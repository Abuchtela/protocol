// This file was generated by seer: https://github.com/moonstream-to/seer.
// seer version: 0.1.20
// seer command: seer evm generate --package DropperV3Facet --cli --struct DropperV3Facet --output bindings/Dropper/DropperV3/DropperV3Facet.go
// Code generated - DO NOT EDIT.
// This file is a generated binding and any manual changes will be lost.

package DropperV3Facet

import (
	"errors"
	"math/big"
	"strings"

	"context"

	ethereum "github.com/ethereum/go-ethereum"
	"github.com/ethereum/go-ethereum/accounts/abi"
	"github.com/ethereum/go-ethereum/accounts/abi/bind"
	"github.com/ethereum/go-ethereum/common"
	"github.com/ethereum/go-ethereum/core/types"
	"github.com/ethereum/go-ethereum/event"

	// Reference imports to suppress errors if they are not otherwise used.
	"encoding/hex"
	"encoding/json"
	"fmt"
	"os"
	"time"

	"github.com/ethereum/go-ethereum/accounts/keystore"
	"github.com/ethereum/go-ethereum/ethclient"
	"github.com/spf13/cobra"
	"golang.org/x/term"
)

var (
	_ = errors.New
	_ = big.NewInt
	_ = strings.NewReader
	_ = ethereum.NotFound
	_ = bind.Bind
	_ = common.Big1
	_ = types.BloomLookup
	_ = event.NewSubscription
	_ = abi.ConvertType
)

// DroppableToken is an auto generated low-level Go binding around an user-defined struct.
type DroppableToken struct {
	TokenType         *big.Int
	TokenAddress      common.Address
	TokenId           *big.Int
	Amount            *big.Int
	MaxNumberOfTokens *big.Int
	ClaimCount        *big.Int
}

// TerminusAuthorization is an auto generated low-level Go binding around an user-defined struct.
type TerminusAuthorization struct {
	TerminusAddress common.Address
	PoolId          *big.Int
}

// DropperV3FacetMetaData contains all meta data concerning the DropperV3Facet contract.
var DropperV3FacetMetaData = &bind.MetaData{
	ABI: "[{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"dropId\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"claimant\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"signer\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"requestID\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Claimed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"dropId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"terminusAddress\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"poolId\",\"type\":\"uint256\"}],\"name\":\"DropAuthorizationChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"dropId\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenType\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"tokenAddress\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"maxNumberOfTokens\",\"type\":\"uint256\"}],\"name\":\"DropCreated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"dropId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"maxNumberOfTokens\",\"type\":\"uint256\"}],\"name\":\"DropMaxTokensChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"dropId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"status\",\"type\":\"bool\"}],\"name\":\"DropStatusChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"dropId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"uri\",\"type\":\"string\"}],\"name\":\"DropURIChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenType\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"tokenAddress\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Withdrawal\",\"type\":\"event\"},{\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"inputs\":[],\"name\":\"adminTerminusInfo\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256[]\",\"name\":\"dropIDList\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"requestIDList\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"blockDeadlineList\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"amountList\",\"type\":\"uint256[]\"},{\"internalType\":\"address[]\",\"name\":\"signerList\",\"type\":\"address[]\"},{\"internalType\":\"bytes[]\",\"name\":\"signatureList\",\"type\":\"bytes[]\"}],\"name\":\"batchClaim\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256[]\",\"name\":\"dropIDList\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"requestIDList\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"blockDeadlineList\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"amountList\",\"type\":\"uint256[]\"},{\"internalType\":\"address[]\",\"name\":\"recipientList\",\"type\":\"address[]\"},{\"internalType\":\"address[]\",\"name\":\"signerList\",\"type\":\"address[]\"},{\"internalType\":\"bytes[]\",\"name\":\"signatureList\",\"type\":\"bytes[]\"}],\"name\":\"batchClaimFor\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"dropId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"requestID\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"blockDeadline\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"signer\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"signature\",\"type\":\"bytes\"}],\"name\":\"claim\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"dropId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"requestID\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"blockDeadline\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"signer\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"signature\",\"type\":\"bytes\"}],\"name\":\"claimFor\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"dropId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"requestID\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"claimant\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"blockDeadline\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"claimMessageHash\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"dropId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"requestId\",\"type\":\"uint256\"}],\"name\":\"claimStatus\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenType\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"tokenAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"authorizationTokenAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"authorizationPoolId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"maxNumberOfTokens\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"uri\",\"type\":\"string\"}],\"name\":\"createDrop\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"dropId\",\"type\":\"uint256\"}],\"name\":\"dropStatus\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"dropId\",\"type\":\"uint256\"}],\"name\":\"dropUri\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"dropperVersion\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"dropId\",\"type\":\"uint256\"}],\"name\":\"getDrop\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"tokenType\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"tokenAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"maxNumberOfTokens\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"claimCount\",\"type\":\"uint256\"}],\"internalType\":\"structDroppableToken\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"dropId\",\"type\":\"uint256\"}],\"name\":\"getDropAuthorization\",\"outputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"terminusAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"poolId\",\"type\":\"uint256\"}],\"internalType\":\"structTerminusAuthorization\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_terminusAdminContractAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_terminusAdminPoolId\",\"type\":\"uint256\"}],\"name\":\"init\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"numDrops\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"},{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"name\":\"onERC1155BatchReceived\",\"outputs\":[{\"internalType\":\"bytes4\",\"name\":\"\",\"type\":\"bytes4\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"name\":\"onERC1155Received\",\"outputs\":[{\"internalType\":\"bytes4\",\"name\":\"\",\"type\":\"bytes4\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"name\":\"onERC721Received\",\"outputs\":[{\"internalType\":\"bytes4\",\"name\":\"\",\"type\":\"bytes4\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"dropId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"terminusAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"poolId\",\"type\":\"uint256\"}],\"name\":\"setDropAuthorization\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"dropId\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"status\",\"type\":\"bool\"}],\"name\":\"setDropStatus\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"dropId\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"uri\",\"type\":\"string\"}],\"name\":\"setDropUri\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"dropId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"maxNumberOfTokens\",\"type\":\"uint256\"}],\"name\":\"setMaxNumberOfTokens\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"poolId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"terminusAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"newPoolController\",\"type\":\"address\"}],\"name\":\"surrenderPoolControl\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"tokenAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"withdrawERC1155\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"tokenAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"withdrawERC20\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"tokenAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"withdrawERC721\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"withdrawNativeToken\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}]",
	Bin: "0x608060405234801561001057600080fd5b506136ab806100206000396000f3fe6080604052600436106101a35760003560e01c806390dc79dd116100e0578063c1e6c0a711610084578063f23a6e6111610061578063f23a6e611461056b578063f3e414f814610597578063f8c89ed2146105b7578063fe57f8ec146105d757005b8063c1e6c0a71461050b578063c536f1ef1461052b578063dfe7f7d91461054b57005b8063a41671e2116100bd578063a41671e214610489578063a69d7337146104a9578063bc197c81146104cc578063c0a6c651146104f857005b806390dc79dd1461042957806397fdced014610449578063a1db97821461046957005b806339fc3096116101475780636787d449116101245780636787d449146103255780637d0561f5146103955780638bc30096146103c25780638f21fc61146103e557005b806339fc3096146102c55780633d8cc2f8146102e55780635b8b5d941461030557005b806318fefe4b1161018057806318fefe4b1461024557806332fc233614610265578063399ae7241461028557806339ead720146102a557005b806301ffc9a7146101ac578063150b7a02146101e157806317e0f2521461022557005b366101aa57005b005b3480156101b857600080fd5b506101cc6101c736600461291d565b6105fa565b60405190151581526020015b60405180910390f35b3480156101ed57600080fd5b5061020c6101fc366004612a1f565b630a85bd0160e11b949350505050565b6040516001600160e01b031990911681526020016101d8565b34801561023157600080fd5b506101aa610240366004612a86565b610631565b34801561025157600080fd5b506101aa610260366004612a9f565b61074a565b34801561027157600080fd5b506101aa610280366004612b23565b6107a6565b34801561029157600080fd5b506101aa6102a0366004612b58565b610886565b3480156102b157600080fd5b506101aa6102c0366004612b82565b610909565b3480156102d157600080fd5b506101aa6102e0366004612d2c565b6109f8565b3480156102f157600080fd5b506101cc610300366004612e20565b610adc565b34801561031157600080fd5b506101aa610320366004612e42565b610b08565b34801561033157600080fd5b50610345610340366004612a86565b610b53565b6040516101d89190815181526020808301516001600160a01b03169082015260408083015190820152606080830151908201526080808301519082015260a0918201519181019190915260c00190565b3480156103a157600080fd5b506103b56103b0366004612a86565b610bc5565b6040516101d89190612f9d565b3480156103ce57600080fd5b506103d7610c71565b6040519081526020016101d8565b3480156103f157600080fd5b50610405610400366004612a86565b610c84565b6040805182516001600160a01b0316815260209283015192810192909252016101d8565b34801561043557600080fd5b506101aa610444366004612fc1565b610cd4565b34801561045557600080fd5b506101aa610464366004612ff1565b610d84565b34801561047557600080fd5b506101aa610484366004612b58565b610e23565b34801561049557600080fd5b506101aa6104a4366004613037565b610f19565b3480156104b557600080fd5b506104be610f74565b6040516101d892919061309c565b3480156104d857600080fd5b5061020c6104e73660046130b5565b63bc197c8160e01b95945050505050565b6103d761050636600461315e565b610f9d565b34801561051757600080fd5b506101aa6105263660046131ec565b611422565b34801561053757600080fd5b506101aa610546366004612e20565b6114d5565b34801561055757600080fd5b506103d7610566366004613228565b611573565b34801561057757600080fd5b5061020c61058636600461326f565b63f23a6e6160e01b95945050505050565b3480156105a357600080fd5b506101aa6105b2366004612b58565b6115fe565b3480156105c357600080fd5b506101cc6105d2366004612a86565b6116ef565b3480156105e357600080fd5b506105ec611710565b6040516101d89291906132d3565b60006001600160e01b03198216630271189760e51b148061062b57506301ffc9a760e01b6001600160e01b03198316145b92915050565b600061063b61187c565b8054600182015491925061065c916001600160a01b039091169060026118a0565b6106815760405162461bcd60e51b815260040161067890613301565b60405180910390fd5b604051600090339084908381818185875af1925050503d80600081146106c3576040519150601f19603f3d011682016040523d82523d6000602084013e6106c8565b606091505b50509050806107195760405162461bcd60e51b815260206004820152601b60248201527f4661696c656420746f2073656e64204e617469766520546f6b656e00000000006044820152606401610678565b6000806001600080516020613616833981519152338760405161073d92919061309c565b60405180910390a4505050565b600080516020613656833981519152805460ff161561077b5760405162461bcd60e51b81526004016106789061336f565b805460ff191660011781556107958888888888888861191b565b805460ff1916905550505050505050565b60006107b061187c565b805460018201549192506107d1916001600160a01b039091169060026118a0565b6107ed5760405162461bcd60e51b815260040161067890613301565b60006107f761187c565b6040805180820182526001600160a01b038781168252602080830188815260008b81526004870190925290849020925183546001600160a01b0319169216919091178255516001909101555190915085907f222c9c997368184d04666106062af190471eb24f6dda31c712fe5c8b3c6398c890610877908790879061309c565b60405180910390a25050505050565b61088e6120e7565b6108d86040518060400160405280600d81526020016c23b0b6b29b90223937b83832b960991b815250604051806040016040528060038152602001620332e360ec1b815250612170565b60006108e261187c565b80546001600160a01b0319166001600160a01b039490941693909317835550600190910155565b600061091361187c565b80546001820154919250610934916001600160a01b039091169060026118a0565b6109505760405162461bcd60e51b815260040161067890613301565b604051637921219560e11b815284906001600160a01b0382169063f242432a906109849030903390899089906004016133b2565b600060405180830381600087803b15801561099e57600080fd5b505af11580156109b2573d6000803e3d6000fd5b5050505083856001600160a01b03166109ca61048390565b60008051602061361683398151915233876040516109e992919061309c565b60405180910390a45050505050565b600080516020613656833981519152805460ff1615610a295760405162461bcd60e51b81526004016106789061336f565b805460ff1916600117815581516000816001600160401b03811115610a5057610a5061296a565b604051908082528060200260200182016040528015610a79578160200160208202803683370190505b50905060005b82811015610aba5733828281518110610a9a57610a9a6133ea565b6001600160a01b0390921660209283029190910190910152600101610a7f565b50610aca89898989858a8a612214565b5050805460ff19169055505050505050565b6000610ae661187c565b6000938452600701602090815260408085209385529290525090205460ff1690565b600080516020613656833981519152805460ff1615610b395760405162461bcd60e51b81526004016106789061336f565b805460ff1916600117815561079588888888888888612214565b610b5b6128de565b610b6361187c565b600092835260059081016020908152604093849020845160c0810186528154815260018201546001600160a01b031692810192909252600281015494820194909452600384015460608201526004840154608082015292015460a08301525090565b6060610bcf61187c565b6000838152600691909101602052604090208054610bec90613400565b80601f0160208091040260200160405190810160405280929190818152602001828054610c1890613400565b8015610c655780601f10610c3a57610100808354040283529160200191610c65565b820191906000526020600020905b815481529060010190602001808311610c4857829003601f168201915b50505050509050919050565b6000610c7b61187c565b60020154905090565b6040805180820190915260008082526020820152610ca061187c565b60009283526004016020908152604092839020835180850190945280546001600160a01b0316845260010154908301525090565b6000610cde61187c565b80546001820154919250610cff916001600160a01b039091169060026118a0565b610d1b5760405162461bcd60e51b815260040161067890613301565b6000610d2561187c565b6000858152600382016020908152604091829020805460ff1916871515908117909155915191825291925085917f3ee2b91473c6d16cdece6fe4bf67ac9bd77cfe40005be2ff0686cc4ac87d3b6d91015b60405180910390a250505050565b6000610d8e61187c565b80546001820154919250610daf916001600160a01b039091169060026118a0565b610dcb5760405162461bcd60e51b815260040161067890613301565b6000610dd561187c565b60008581526006820160205260409020909150610df2848261348b565b50837fcd3ee26a2615347956621c670708428a80143029dafa18a3883ad18189d537bf84604051610d769190612f9d565b6000610e2d61187c565b80546001820154919250610e4e916001600160a01b039091169060026118a0565b610e6a5760405162461bcd60e51b815260040161067890613301565b60405163a9059cbb60e01b815283906001600160a01b0382169063a9059cbb90610e9a903390879060040161309c565b6020604051808303816000875af1158015610eb9573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610edd919061354a565b5060006001600160a01b03851660146000805160206136168339815191523387604051610f0b92919061309c565b60405180910390a450505050565b600080516020613656833981519152805460ff1615610f4a5760405162461bcd60e51b81526004016106789061336f565b805460ff19166001178155610f648787878733888861191b565b805460ff19169055505050505050565b6000806000610f8161187c565b80546001909101546001600160a01b0390911694909350915050565b600080610fa861187c565b80546001820154919250610fc9916001600160a01b039091169060026118a0565b610fe55760405162461bcd60e51b815260040161067890613301565b60148a1480610ff557506102d18a145b8061100157506104838a145b8061100c575060018a145b80611017575060028a145b6110755760405162461bcd60e51b815260206004820152602960248201527f44726f707065723a2063726561746544726f70202d2d20556e6b6e6f776e20746044820152686f6b656e207479706560b81b6064820152608401610678565b87158061108457506102d18a14155b6110f65760405162461bcd60e51b815260206004820152603e60248201527f44726f707065723a2063726561746544726f70202d2d20546f6b656e4964207360448201527f686f756c64206265207a65726f20666f72204552433732312064726f702e00006064820152608401610678565b6001600160a01b038916158061110d575060018a14155b6111935760405162461bcd60e51b815260206004820152604b60248201527f44726f707065723a2063726561746544726f70202d2d20546f6b656e4164647260448201527f6573732073686f756c6420657175616c206164647265737328302920666f722060648201526a06e61746976652064726f760ac1b608482015260a401610678565b600061119d61187c565b60028101805491925060006111b18361357d565b91905055506111be6128de565b8b81526001600160a01b03808c16602080840182815260408086018f8152606087018f8152608088018d81526002808b01805460009081526005808e019099528690208b518155965160018801805491909b166001600160a01b03199091161790995592519285019290925551600384015551600483015560a08601519190920155915491518c928f917f2eb9d2fbe3689cc1caa714232381054a6bd883cc598e66e077f8235c8ee2433f91611288918f908d909283526020830191909152604082015260600190565b60405180910390a46002820180546000908152600384016020908152604091829020805460ff191660019081179091559254915192835290917f3ee2b91473c6d16cdece6fe4bf67ac9bd77cfe40005be2ff0686cc4ac87d3b6d910160405180910390a26040805180820182526001600160a01b038a8116825260208083018b815260028701805460009081526004890190935291859020935184546001600160a01b031916931692909217835590516001909201919091555490517f222c9c997368184d04666106062af190471eb24f6dda31c712fe5c8b3c6398c890611373908b908b9061309c565b60405180910390a260028201546040518781527fe0c9d5fcd78a19a9f7eeef2aa12769583ba7e146f86a49d9cd06111dfe53891b9060200160405180910390a26002820154600090815260068301602052604090206113d2868261348b565b5081600201547fcd3ee26a2615347956621c670708428a80143029dafa18a3883ad18189d537bf866040516114079190612f9d565b60405180910390a250600201549a9950505050505050505050565b600061142c61187c565b8054600182015491925061144d916001600160a01b039091169060026118a0565b6114695760405162461bcd60e51b815260040161067890613301565b604051636e2ae85960e11b8152600481018590526001600160a01b03838116602483015284919082169063dc55d0b290604401600060405180830381600087803b1580156114b657600080fd5b505af11580156114ca573d6000803e3d6000fd5b505050505050505050565b60006114df61187c565b80546001820154919250611500916001600160a01b039091169060026118a0565b61151c5760405162461bcd60e51b815260040161067890613301565b600061152661187c565b6000858152600582016020526040908190206004018590555190915084907fe0c9d5fcd78a19a9f7eeef2aa12769583ba7e146f86a49d9cd06111dfe53891b90610d769086815260200190565b604080517f642049b15da1c1309d5c69c32da2ca73a37c1ef2afe60d57f9ca83aa80017d186020820152908101869052606081018590526001600160a01b038416608082015260a0810183905260c08101829052600090819060e00160405160208183030381529060405280519060200120905060006115f28261259c565b98975050505050505050565b600061160861187c565b80546001820154919250611629916001600160a01b039091169060026118a0565b6116455760405162461bcd60e51b815260040161067890613301565b604051635c46a7ef60e11b815230600482015233602482015260448101839052608060648201526000608482015283906001600160a01b0382169063b88d4fde9060a401600060405180830381600087803b1580156116a357600080fd5b505af11580156116b7573d6000803e3d6000fd5b5050505082846001600160a01b03166116cf6102d190565b600080516020613616833981519152336001604051610f0b92919061309c565b60006116f961187c565b600092835260030160205250604090205460ff1690565b7f6ef13053a44b9a072a3fe328c6f94fd5ce246a5ab93af6b4765bc0ee47f738c48054606091829181907f6ef13053a44b9a072a3fe328c6f94fd5ce246a5ab93af6b4765bc0ee47f738c590829061176790613400565b80601f016020809104026020016040519081016040528092919081815260200182805461179390613400565b80156117e05780601f106117b5576101008083540402835291602001916117e0565b820191906000526020600020905b8154815290600101906020018083116117c357829003601f168201915b505050505091508080546117f390613400565b80601f016020809104026020016040519081016040528092919081815260200182805461181f90613400565b801561186c5780601f106118415761010080835404028352916020019161186c565b820191906000526020600020905b81548152906001019060200180831161184f57829003601f168201915b5050505050905092509250509091565b7f4675625bfb665eb84f799435391fca46dcc7fb2e66d85f6ce7205daf0c9673d790565b600081846001600160a01b031662fdd58e33866040518363ffffffff1660e01b81526004016118d092919061309c565b602060405180830381865afa1580156118ed573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906119119190613596565b1015949350505050565b8442111561197f5760405162461bcd60e51b815260206004820152602b60248201527f44726f707065723a205f636c61696d202d2d20426c6f636b20646561646c696e60448201526a329032bc31b2b2b232b21760a91b6064820152608401610678565b600061198961187c565b60008981526004808301602052604080832080546001909101549151627eeac760e11b81529495506001600160a01b031693849262fdd58e926119ce928a920161309c565b602060405180830381865afa1580156119eb573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611a0f9190613596565b11611a745760405162461bcd60e51b815260206004820152602f60248201527f44726f707065723a205f636c61696d202d2d20556e617574686f72697a65642060448201526e07369676e657220666f722064726f7608c1b6064820152608401610678565b600089815260038301602052604090205460ff16611aea5760405162461bcd60e51b815260206004820152602d60248201527f44726f707065723a205f636c61696d202d2d2063616e6e6f7420636c61696d2060448201526c0696e6163746976652064726f7609c1b6064820152608401610678565b600089815260078301602090815260408083208b845290915290205460ff1615611b8e5760405162461bcd60e51b815260206004820152604960248201527f44726f707065723a205f636c61696d202d2d2054686174202864726f7049442c60448201527f207265717565737449442920706169722068617320616c7265616479206265656064820152681b8818db185a5b595960ba1b608482015260a401610678565b6000611b9d8a8a888b8b611573565b9050611baa8582866125c9565b611c0e5760405162461bcd60e51b815260206004820152602f60248201527f44726f707065723a205f636c61696d202d2d20496e76616c6964207369676e6160448201526e3a3ab932903337b91031b630b4b69760891b6064820152608401610678565b60008a815260058085016020908152604092839020835160c0810185528154815260018201546001600160a01b031692810192909252600281015493820193909352600383015460608201526004830154608082015291015460a082015287158015611c7d57506102d1815114155b15611c8a57806060015197505b6014815103611d5957602081015160405163a9059cbb60e01b81526000906001600160a01b0383169063a9059cbb90611cc99033908e9060040161309c565b6020604051808303816000875af1158015611ce8573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611d0c919061354a565b905080611d525760405162461bcd60e51b815260206004820152601460248201527304661696c656420746f2073656e642045524332360641b6044820152606401610678565b5050611fc5565b6102d1815103611de6576020810151604051635c46a7ef60e11b8152306004820152336024820152604481018a905260806064820152600060848201526001600160a01b0382169063b88d4fde9060a401600060405180830381600087803b158015611dc457600080fd5b505af1158015611dd8573d6000803e3d6000fd5b505050506001985050611fc5565b610483815103611e635760208101516040808301519051637921219560e11b81526001600160a01b0383169163f242432a91611e2b9130913391908f906004016133b2565b600060405180830381600087803b158015611e4557600080fd5b505af1158015611e59573d6000803e3d6000fd5b5050505050611fc5565b6001815103611f0a5760405160009033908a908381818185875af1925050503d8060008114611eae576040519150601f19603f3d011682016040523d82523d6000602084013e611eb3565b606091505b5050905080611f045760405162461bcd60e51b815260206004820152601b60248201527f4661696c656420746f2073656e64204e617469766520546f6b656e00000000006044820152606401610678565b50611fc5565b6002815103611f66576020810151604080830151905163731133e960e01b81523360048201526024810191909152604481018a905260806064820152600060848201526001600160a01b0382169063731133e99060a401611e2b565b60405162461bcd60e51b815260206004820152602e60248201527f44726f707065723a205f636c61696d202d2d20556e6b6e6f776e20746f6b656e60448201526d207479706520696e20636c61696d60901b6064820152608401610678565b60008b8152600580860160205260409091206004810154910154611fea908a906135af565b11156120475760405162461bcd60e51b815260206004820152602660248201527f44463a20436c61696d732065786365656420546f6b656e7320746f206469737460448201526572696275746560d01b6064820152608401610678565b60008b81526005808601602052604082200180548a92906120699084906135af565b909155505060008b815260078501602090815260408083208d8452825291829020805460ff1916600117905581518c81529081018a90526001600160a01b0388169133918e917f3e356ee9071ea983e847cc7da7b8b224b8f44262f7c9ce77262ea0e854a5442c910160405180910390a45050505050505050505050565b7fc8fcad8db84d3cc18b4c41d551ea0ee66dd599cde068d998e57d5e09332c131c600401546001600160a01b0316331461216e5760405162461bcd60e51b815260206004820152602260248201527f4c69624469616d6f6e643a204d75737420626520636f6e7472616374206f776e60448201526132b960f11b6064820152608401610678565b565b7f6ef13053a44b9a072a3fe328c6f94fd5ce246a5ab93af6b4765bc0ee47f738c48061219c848261348b565b50600181016121ab838261348b565b50825160208085019190912083519184019190912060048301829055600583018190554660038401557f8b73c3c69bb8fe3d512ecc4cf759cc79239f7b179b0ffacaa9a75d522b39400f61220081848461262b565b600285015560069093019290925550505050565b85518751146122855760405162461bcd60e51b8152602060048201526043602482015260008051602061363683398151915260448201527f7420616e64207265717565737449444c697374206c656e677468206d69736d616064820152620e8c6d60eb1b608482015260a401610678565b84518751146122fa5760405162461bcd60e51b8152602060048201526047602482015260008051602061363683398151915260448201527f7420616e6420626c6f636b446561646c696e654c697374206c656e677468206d6064820152660d2e6dac2e8c6d60cb1b608482015260a401610678565b8351875114612361576040805162461bcd60e51b815260206004820152602481019190915260008051602061363683398151915260448201527f7420616e6420616d6f756e744c697374206c656e677468206d69736d617463686064820152608401610678565b81518751146123c8576040805162461bcd60e51b815260206004820152602481019190915260008051602061363683398151915260448201527f7420616e64207369676e65724c697374206c656e677468206d69736d617463686064820152608401610678565b80518751146124395760405162461bcd60e51b8152602060048201526043602482015260008051602061363683398151915260448201527f7420616e64207369676e61747572654c697374206c656e677468206d69736d616064820152620e8c6d60eb1b608482015260a401610678565b80518351146124c05760405162461bcd60e51b815260206004820152604760248201527f44726f707065723a20626174616368436c61696d202d2d20726563697069656e60448201527f744c69737420616e64207369676e61747572654c697374206c656e677468206d6064820152660d2e6dac2e8c6d60cb1b608482015260a401610678565b60005b87518110156125925761258a8882815181106124e1576124e16133ea565b60200260200101518883815181106124fb576124fb6133ea565b6020026020010151888481518110612515576125156133ea565b602002602001015188858151811061252f5761252f6133ea565b6020026020010151888681518110612549576125496133ea565b6020026020010151888781518110612563576125636133ea565b602002602001015188888151811061257d5761257d6133ea565b602002602001015161191b565b6001016124c3565b5050505050505050565b600061062b6125a9612674565b8360405161190160f01b8152600281019290925260228201526042902090565b60008060006125d885856126e7565b50909250905060008160038111156125f2576125f26135c2565b1480156126105750856001600160a01b0316826001600160a01b0316145b806126215750612621868686612734565b9695505050505050565b6040805160208101859052908101839052606081018290524660808201523060a082015260009060c0016040516020818303038152906040528051906020012090509392505050565b7f6ef13053a44b9a072a3fe328c6f94fd5ce246a5ab93af6b4765bc0ee47f738c7546000907f6ef13053a44b9a072a3fe328c6f94fd5ce246a5ab93af6b4765bc0ee47f738c49046036126ca5760020154919050565b6126e181600601548260040154836005015461262b565b91505090565b600080600083516041036127215760208401516040850151606086015160001a6127138882858561280f565b95509550955050505061272d565b50508151600091506002905b9250925092565b6000806000856001600160a01b031685856040516024016127569291906135d8565b60408051601f198184030181529181526020820180516001600160e01b0316630b135d3f60e11b1790525161278b91906135f9565b600060405180830381855afa9150503d80600081146127c6576040519150601f19603f3d011682016040523d82523d6000602084013e6127cb565b606091505b50915091508180156127df57506020815110155b801561262157508051630b135d3f60e11b906128049083016020908101908401613596565b149695505050505050565b600080807f7fffffffffffffffffffffffffffffff5d576e7357a4501ddfe92f46681b20a084111561284a57506000915060039050826128d4565b604080516000808252602082018084528a905260ff891692820192909252606081018790526080810186905260019060a0016020604051602081039080840390855afa15801561289e573d6000803e3d6000fd5b5050604051601f1901519150506001600160a01b0381166128ca575060009250600191508290506128d4565b9250600091508190505b9450945094915050565b6040518060c001604052806000815260200160006001600160a01b03168152602001600081526020016000815260200160008152602001600081525090565b60006020828403121561292f57600080fd5b81356001600160e01b03198116811461294757600080fd5b9392505050565b80356001600160a01b038116811461296557600080fd5b919050565b634e487b7160e01b600052604160045260246000fd5b604051601f8201601f191681016001600160401b03811182821017156129a8576129a861296a565b604052919050565b600082601f8301126129c157600080fd5b81356001600160401b038111156129da576129da61296a565b6129ed601f8201601f1916602001612980565b818152846020838601011115612a0257600080fd5b816020850160208301376000918101602001919091529392505050565b60008060008060808587031215612a3557600080fd5b612a3e8561294e565b9350612a4c6020860161294e565b92506040850135915060608501356001600160401b03811115612a6e57600080fd5b612a7a878288016129b0565b91505092959194509250565b600060208284031215612a9857600080fd5b5035919050565b600080600080600080600060e0888a031215612aba57600080fd5b87359650602088013595506040880135945060608801359350612adf6080890161294e565b9250612aed60a0890161294e565b915060c08801356001600160401b03811115612b0857600080fd5b612b148a828b016129b0565b91505092959891949750929550565b600080600060608486031215612b3857600080fd5b83359250612b486020850161294e565b9150604084013590509250925092565b60008060408385031215612b6b57600080fd5b612b748361294e565b946020939093013593505050565b600080600060608486031215612b9757600080fd5b612ba08461294e565b95602085013595506040909401359392505050565b60006001600160401b03821115612bce57612bce61296a565b5060051b60200190565b600082601f830112612be957600080fd5b81356020612bfe612bf983612bb5565b612980565b8083825260208201915060208460051b870101935086841115612c2057600080fd5b602086015b84811015612c3c5780358352918301918301612c25565b509695505050505050565b600082601f830112612c5857600080fd5b81356020612c68612bf983612bb5565b8083825260208201915060208460051b870101935086841115612c8a57600080fd5b602086015b84811015612c3c57612ca08161294e565b8352918301918301612c8f565b600082601f830112612cbe57600080fd5b81356020612cce612bf983612bb5565b82815260059290921b84018101918181019086841115612ced57600080fd5b8286015b84811015612c3c5780356001600160401b03811115612d105760008081fd5b612d1e8986838b01016129b0565b845250918301918301612cf1565b60008060008060008060c08789031215612d4557600080fd5b86356001600160401b0380821115612d5c57600080fd5b612d688a838b01612bd8565b97506020890135915080821115612d7e57600080fd5b612d8a8a838b01612bd8565b96506040890135915080821115612da057600080fd5b612dac8a838b01612bd8565b95506060890135915080821115612dc257600080fd5b612dce8a838b01612bd8565b94506080890135915080821115612de457600080fd5b612df08a838b01612c47565b935060a0890135915080821115612e0657600080fd5b50612e1389828a01612cad565b9150509295509295509295565b60008060408385031215612e3357600080fd5b50508035926020909101359150565b600080600080600080600060e0888a031215612e5d57600080fd5b87356001600160401b0380821115612e7457600080fd5b612e808b838c01612bd8565b985060208a0135915080821115612e9657600080fd5b612ea28b838c01612bd8565b975060408a0135915080821115612eb857600080fd5b612ec48b838c01612bd8565b965060608a0135915080821115612eda57600080fd5b612ee68b838c01612bd8565b955060808a0135915080821115612efc57600080fd5b612f088b838c01612c47565b945060a08a0135915080821115612f1e57600080fd5b612f2a8b838c01612c47565b935060c08a0135915080821115612f4057600080fd5b50612b148a828b01612cad565b60005b83811015612f68578181015183820152602001612f50565b50506000910152565b60008151808452612f89816020860160208601612f4d565b601f01601f19169290920160200192915050565b6020815260006129476020830184612f71565b8015158114612fbe57600080fd5b50565b60008060408385031215612fd457600080fd5b823591506020830135612fe681612fb0565b809150509250929050565b6000806040838503121561300457600080fd5b8235915060208301356001600160401b0381111561302157600080fd5b61302d858286016129b0565b9150509250929050565b60008060008060008060c0878903121561305057600080fd5b863595506020870135945060408701359350606087013592506130756080880161294e565b915060a08701356001600160401b0381111561309057600080fd5b612e1389828a016129b0565b6001600160a01b03929092168252602082015260400190565b600080600080600060a086880312156130cd57600080fd5b6130d68661294e565b94506130e46020870161294e565b935060408601356001600160401b038082111561310057600080fd5b61310c89838a01612bd8565b9450606088013591508082111561312257600080fd5b61312e89838a01612bd8565b9350608088013591508082111561314457600080fd5b50613151888289016129b0565b9150509295509295909350565b600080600080600080600080610100898b03121561317b57600080fd5b8835975061318b60208a0161294e565b965060408901359550606089013594506131a760808a0161294e565b935060a0890135925060c0890135915060e08901356001600160401b038111156131d057600080fd5b6131dc8b828c016129b0565b9150509295985092959890939650565b60008060006060848603121561320157600080fd5b833592506132116020850161294e565b915061321f6040850161294e565b90509250925092565b600080600080600060a0868803121561324057600080fd5b85359450602086013593506132576040870161294e565b94979396509394606081013594506080013592915050565b600080600080600060a0868803121561328757600080fd5b6132908661294e565b945061329e6020870161294e565b9350604086013592506060860135915060808601356001600160401b038111156132c757600080fd5b613151888289016129b0565b6040815260006132e66040830185612f71565b82810360208401526132f88185612f71565b95945050505050565b60208082526048908201527f44726f7070657246616365742e6f6e6c795465726d696e757341646d696e3a2060408201527f53656e64657220646f6573206e6f7420686f6c642061646d696e69737472617460608201526737b9103a37b5b2b760c11b608082015260a00190565b60208082526023908201527f4c69625265656e7472616e637947756172643a207265656e7472616e742063616040820152626c6c2160e81b606082015260800190565b6001600160a01b0394851681529290931660208301526040820152606081019190915260a06080820181905260009082015260c00190565b634e487b7160e01b600052603260045260246000fd5b600181811c9082168061341457607f821691505b60208210810361343457634e487b7160e01b600052602260045260246000fd5b50919050565b601f821115613486576000816000526020600020601f850160051c810160208610156134635750805b601f850160051c820191505b818110156134825782815560010161346f565b5050505b505050565b81516001600160401b038111156134a4576134a461296a565b6134b8816134b28454613400565b8461343a565b602080601f8311600181146134ed57600084156134d55750858301515b600019600386901b1c1916600185901b178555613482565b600085815260208120601f198616915b8281101561351c578886015182559484019460019091019084016134fd565b508582101561353a5787850151600019600388901b60f8161c191681555b5050505050600190811b01905550565b60006020828403121561355c57600080fd5b815161294781612fb0565b634e487b7160e01b600052601160045260246000fd5b60006001820161358f5761358f613567565b5060010190565b6000602082840312156135a857600080fd5b5051919050565b8082018082111561062b5761062b613567565b634e487b7160e01b600052602160045260246000fd5b8281526040602082015260006135f16040830184612f71565b949350505050565b6000825161360b818460208701612f4d565b919091019291505056fed1dec43cb733ef30734a816d655b84537e755d9fab510f7dd9eb6a6bd0b6eb7344726f707065723a206261746368436c61696d202d2d2064726f7049444c6973c607e14f3cd850545e2d5ee2512be031166f24844f10532687fbd3160fd399b0a264697066735822122027779f2ceb1ed3403bdb67e4dac3dab6c254ef1adff225cf65b786e5749922a164736f6c63430008180033",
}

// DropperV3FacetABI is the input ABI used to generate the binding from.
// Deprecated: Use DropperV3FacetMetaData.ABI instead.
var DropperV3FacetABI = DropperV3FacetMetaData.ABI

// DropperV3FacetBin is the compiled bytecode used for deploying new contracts.
// Deprecated: Use DropperV3FacetMetaData.Bin instead.
var DropperV3FacetBin = DropperV3FacetMetaData.Bin

// DeployDropperV3Facet deploys a new Ethereum contract, binding an instance of DropperV3Facet to it.
func DeployDropperV3Facet(auth *bind.TransactOpts, backend bind.ContractBackend) (common.Address, *types.Transaction, *DropperV3Facet, error) {
	parsed, err := DropperV3FacetMetaData.GetAbi()
	if err != nil {
		return common.Address{}, nil, nil, err
	}
	if parsed == nil {
		return common.Address{}, nil, nil, errors.New("GetABI returned nil")
	}

	address, tx, contract, err := bind.DeployContract(auth, *parsed, common.FromHex(DropperV3FacetBin), backend)
	if err != nil {
		return common.Address{}, nil, nil, err
	}
	return address, tx, &DropperV3Facet{DropperV3FacetCaller: DropperV3FacetCaller{contract: contract}, DropperV3FacetTransactor: DropperV3FacetTransactor{contract: contract}, DropperV3FacetFilterer: DropperV3FacetFilterer{contract: contract}}, nil
}

// DropperV3Facet is an auto generated Go binding around an Ethereum contract.
type DropperV3Facet struct {
	DropperV3FacetCaller     // Read-only binding to the contract
	DropperV3FacetTransactor // Write-only binding to the contract
	DropperV3FacetFilterer   // Log filterer for contract events
}

// DropperV3FacetCaller is an auto generated read-only Go binding around an Ethereum contract.
type DropperV3FacetCaller struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// DropperV3FacetTransactor is an auto generated write-only Go binding around an Ethereum contract.
type DropperV3FacetTransactor struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// DropperV3FacetFilterer is an auto generated log filtering Go binding around an Ethereum contract events.
type DropperV3FacetFilterer struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// DropperV3FacetSession is an auto generated Go binding around an Ethereum contract,
// with pre-set call and transact options.
type DropperV3FacetSession struct {
	Contract     *DropperV3Facet   // Generic contract binding to set the session for
	CallOpts     bind.CallOpts     // Call options to use throughout this session
	TransactOpts bind.TransactOpts // Transaction auth options to use throughout this session
}

// DropperV3FacetCallerSession is an auto generated read-only Go binding around an Ethereum contract,
// with pre-set call options.
type DropperV3FacetCallerSession struct {
	Contract *DropperV3FacetCaller // Generic contract caller binding to set the session for
	CallOpts bind.CallOpts         // Call options to use throughout this session
}

// DropperV3FacetTransactorSession is an auto generated write-only Go binding around an Ethereum contract,
// with pre-set transact options.
type DropperV3FacetTransactorSession struct {
	Contract     *DropperV3FacetTransactor // Generic contract transactor binding to set the session for
	TransactOpts bind.TransactOpts         // Transaction auth options to use throughout this session
}

// DropperV3FacetRaw is an auto generated low-level Go binding around an Ethereum contract.
type DropperV3FacetRaw struct {
	Contract *DropperV3Facet // Generic contract binding to access the raw methods on
}

// DropperV3FacetCallerRaw is an auto generated low-level read-only Go binding around an Ethereum contract.
type DropperV3FacetCallerRaw struct {
	Contract *DropperV3FacetCaller // Generic read-only contract binding to access the raw methods on
}

// DropperV3FacetTransactorRaw is an auto generated low-level write-only Go binding around an Ethereum contract.
type DropperV3FacetTransactorRaw struct {
	Contract *DropperV3FacetTransactor // Generic write-only contract binding to access the raw methods on
}

// NewDropperV3Facet creates a new instance of DropperV3Facet, bound to a specific deployed contract.
func NewDropperV3Facet(address common.Address, backend bind.ContractBackend) (*DropperV3Facet, error) {
	contract, err := bindDropperV3Facet(address, backend, backend, backend)
	if err != nil {
		return nil, err
	}
	return &DropperV3Facet{DropperV3FacetCaller: DropperV3FacetCaller{contract: contract}, DropperV3FacetTransactor: DropperV3FacetTransactor{contract: contract}, DropperV3FacetFilterer: DropperV3FacetFilterer{contract: contract}}, nil
}

// NewDropperV3FacetCaller creates a new read-only instance of DropperV3Facet, bound to a specific deployed contract.
func NewDropperV3FacetCaller(address common.Address, caller bind.ContractCaller) (*DropperV3FacetCaller, error) {
	contract, err := bindDropperV3Facet(address, caller, nil, nil)
	if err != nil {
		return nil, err
	}
	return &DropperV3FacetCaller{contract: contract}, nil
}

// NewDropperV3FacetTransactor creates a new write-only instance of DropperV3Facet, bound to a specific deployed contract.
func NewDropperV3FacetTransactor(address common.Address, transactor bind.ContractTransactor) (*DropperV3FacetTransactor, error) {
	contract, err := bindDropperV3Facet(address, nil, transactor, nil)
	if err != nil {
		return nil, err
	}
	return &DropperV3FacetTransactor{contract: contract}, nil
}

// NewDropperV3FacetFilterer creates a new log filterer instance of DropperV3Facet, bound to a specific deployed contract.
func NewDropperV3FacetFilterer(address common.Address, filterer bind.ContractFilterer) (*DropperV3FacetFilterer, error) {
	contract, err := bindDropperV3Facet(address, nil, nil, filterer)
	if err != nil {
		return nil, err
	}
	return &DropperV3FacetFilterer{contract: contract}, nil
}

// bindDropperV3Facet binds a generic wrapper to an already deployed contract.
func bindDropperV3Facet(address common.Address, caller bind.ContractCaller, transactor bind.ContractTransactor, filterer bind.ContractFilterer) (*bind.BoundContract, error) {
	parsed, err := DropperV3FacetMetaData.GetAbi()
	if err != nil {
		return nil, err
	}
	return bind.NewBoundContract(address, *parsed, caller, transactor, filterer), nil
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_DropperV3Facet *DropperV3FacetRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _DropperV3Facet.Contract.DropperV3FacetCaller.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_DropperV3Facet *DropperV3FacetRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _DropperV3Facet.Contract.DropperV3FacetTransactor.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_DropperV3Facet *DropperV3FacetRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _DropperV3Facet.Contract.DropperV3FacetTransactor.contract.Transact(opts, method, params...)
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_DropperV3Facet *DropperV3FacetCallerRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _DropperV3Facet.Contract.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_DropperV3Facet *DropperV3FacetTransactorRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _DropperV3Facet.Contract.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_DropperV3Facet *DropperV3FacetTransactorRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _DropperV3Facet.Contract.contract.Transact(opts, method, params...)
}

// AdminTerminusInfo is a free data retrieval call binding the contract method 0xa69d7337.
//
// Solidity: function adminTerminusInfo() view returns(address, uint256)
func (_DropperV3Facet *DropperV3FacetCaller) AdminTerminusInfo(opts *bind.CallOpts) (common.Address, *big.Int, error) {
	var out []interface{}
	err := _DropperV3Facet.contract.Call(opts, &out, "adminTerminusInfo")

	if err != nil {
		return *new(common.Address), *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)
	out1 := *abi.ConvertType(out[1], new(*big.Int)).(**big.Int)

	return out0, out1, err

}

// AdminTerminusInfo is a free data retrieval call binding the contract method 0xa69d7337.
//
// Solidity: function adminTerminusInfo() view returns(address, uint256)
func (_DropperV3Facet *DropperV3FacetSession) AdminTerminusInfo() (common.Address, *big.Int, error) {
	return _DropperV3Facet.Contract.AdminTerminusInfo(&_DropperV3Facet.CallOpts)
}

// AdminTerminusInfo is a free data retrieval call binding the contract method 0xa69d7337.
//
// Solidity: function adminTerminusInfo() view returns(address, uint256)
func (_DropperV3Facet *DropperV3FacetCallerSession) AdminTerminusInfo() (common.Address, *big.Int, error) {
	return _DropperV3Facet.Contract.AdminTerminusInfo(&_DropperV3Facet.CallOpts)
}

// ClaimMessageHash is a free data retrieval call binding the contract method 0xdfe7f7d9.
//
// Solidity: function claimMessageHash(uint256 dropId, uint256 requestID, address claimant, uint256 blockDeadline, uint256 amount) view returns(bytes32)
func (_DropperV3Facet *DropperV3FacetCaller) ClaimMessageHash(opts *bind.CallOpts, dropId *big.Int, requestID *big.Int, claimant common.Address, blockDeadline *big.Int, amount *big.Int) ([32]byte, error) {
	var out []interface{}
	err := _DropperV3Facet.contract.Call(opts, &out, "claimMessageHash", dropId, requestID, claimant, blockDeadline, amount)

	if err != nil {
		return *new([32]byte), err
	}

	out0 := *abi.ConvertType(out[0], new([32]byte)).(*[32]byte)

	return out0, err

}

// ClaimMessageHash is a free data retrieval call binding the contract method 0xdfe7f7d9.
//
// Solidity: function claimMessageHash(uint256 dropId, uint256 requestID, address claimant, uint256 blockDeadline, uint256 amount) view returns(bytes32)
func (_DropperV3Facet *DropperV3FacetSession) ClaimMessageHash(dropId *big.Int, requestID *big.Int, claimant common.Address, blockDeadline *big.Int, amount *big.Int) ([32]byte, error) {
	return _DropperV3Facet.Contract.ClaimMessageHash(&_DropperV3Facet.CallOpts, dropId, requestID, claimant, blockDeadline, amount)
}

// ClaimMessageHash is a free data retrieval call binding the contract method 0xdfe7f7d9.
//
// Solidity: function claimMessageHash(uint256 dropId, uint256 requestID, address claimant, uint256 blockDeadline, uint256 amount) view returns(bytes32)
func (_DropperV3Facet *DropperV3FacetCallerSession) ClaimMessageHash(dropId *big.Int, requestID *big.Int, claimant common.Address, blockDeadline *big.Int, amount *big.Int) ([32]byte, error) {
	return _DropperV3Facet.Contract.ClaimMessageHash(&_DropperV3Facet.CallOpts, dropId, requestID, claimant, blockDeadline, amount)
}

// ClaimStatus is a free data retrieval call binding the contract method 0x3d8cc2f8.
//
// Solidity: function claimStatus(uint256 dropId, uint256 requestId) view returns(bool)
func (_DropperV3Facet *DropperV3FacetCaller) ClaimStatus(opts *bind.CallOpts, dropId *big.Int, requestId *big.Int) (bool, error) {
	var out []interface{}
	err := _DropperV3Facet.contract.Call(opts, &out, "claimStatus", dropId, requestId)

	if err != nil {
		return *new(bool), err
	}

	out0 := *abi.ConvertType(out[0], new(bool)).(*bool)

	return out0, err

}

// ClaimStatus is a free data retrieval call binding the contract method 0x3d8cc2f8.
//
// Solidity: function claimStatus(uint256 dropId, uint256 requestId) view returns(bool)
func (_DropperV3Facet *DropperV3FacetSession) ClaimStatus(dropId *big.Int, requestId *big.Int) (bool, error) {
	return _DropperV3Facet.Contract.ClaimStatus(&_DropperV3Facet.CallOpts, dropId, requestId)
}

// ClaimStatus is a free data retrieval call binding the contract method 0x3d8cc2f8.
//
// Solidity: function claimStatus(uint256 dropId, uint256 requestId) view returns(bool)
func (_DropperV3Facet *DropperV3FacetCallerSession) ClaimStatus(dropId *big.Int, requestId *big.Int) (bool, error) {
	return _DropperV3Facet.Contract.ClaimStatus(&_DropperV3Facet.CallOpts, dropId, requestId)
}

// DropStatus is a free data retrieval call binding the contract method 0xf8c89ed2.
//
// Solidity: function dropStatus(uint256 dropId) view returns(bool)
func (_DropperV3Facet *DropperV3FacetCaller) DropStatus(opts *bind.CallOpts, dropId *big.Int) (bool, error) {
	var out []interface{}
	err := _DropperV3Facet.contract.Call(opts, &out, "dropStatus", dropId)

	if err != nil {
		return *new(bool), err
	}

	out0 := *abi.ConvertType(out[0], new(bool)).(*bool)

	return out0, err

}

// DropStatus is a free data retrieval call binding the contract method 0xf8c89ed2.
//
// Solidity: function dropStatus(uint256 dropId) view returns(bool)
func (_DropperV3Facet *DropperV3FacetSession) DropStatus(dropId *big.Int) (bool, error) {
	return _DropperV3Facet.Contract.DropStatus(&_DropperV3Facet.CallOpts, dropId)
}

// DropStatus is a free data retrieval call binding the contract method 0xf8c89ed2.
//
// Solidity: function dropStatus(uint256 dropId) view returns(bool)
func (_DropperV3Facet *DropperV3FacetCallerSession) DropStatus(dropId *big.Int) (bool, error) {
	return _DropperV3Facet.Contract.DropStatus(&_DropperV3Facet.CallOpts, dropId)
}

// DropUri is a free data retrieval call binding the contract method 0x7d0561f5.
//
// Solidity: function dropUri(uint256 dropId) view returns(string)
func (_DropperV3Facet *DropperV3FacetCaller) DropUri(opts *bind.CallOpts, dropId *big.Int) (string, error) {
	var out []interface{}
	err := _DropperV3Facet.contract.Call(opts, &out, "dropUri", dropId)

	if err != nil {
		return *new(string), err
	}

	out0 := *abi.ConvertType(out[0], new(string)).(*string)

	return out0, err

}

// DropUri is a free data retrieval call binding the contract method 0x7d0561f5.
//
// Solidity: function dropUri(uint256 dropId) view returns(string)
func (_DropperV3Facet *DropperV3FacetSession) DropUri(dropId *big.Int) (string, error) {
	return _DropperV3Facet.Contract.DropUri(&_DropperV3Facet.CallOpts, dropId)
}

// DropUri is a free data retrieval call binding the contract method 0x7d0561f5.
//
// Solidity: function dropUri(uint256 dropId) view returns(string)
func (_DropperV3Facet *DropperV3FacetCallerSession) DropUri(dropId *big.Int) (string, error) {
	return _DropperV3Facet.Contract.DropUri(&_DropperV3Facet.CallOpts, dropId)
}

// DropperVersion is a free data retrieval call binding the contract method 0xfe57f8ec.
//
// Solidity: function dropperVersion() view returns(string, string)
func (_DropperV3Facet *DropperV3FacetCaller) DropperVersion(opts *bind.CallOpts) (string, string, error) {
	var out []interface{}
	err := _DropperV3Facet.contract.Call(opts, &out, "dropperVersion")

	if err != nil {
		return *new(string), *new(string), err
	}

	out0 := *abi.ConvertType(out[0], new(string)).(*string)
	out1 := *abi.ConvertType(out[1], new(string)).(*string)

	return out0, out1, err

}

// DropperVersion is a free data retrieval call binding the contract method 0xfe57f8ec.
//
// Solidity: function dropperVersion() view returns(string, string)
func (_DropperV3Facet *DropperV3FacetSession) DropperVersion() (string, string, error) {
	return _DropperV3Facet.Contract.DropperVersion(&_DropperV3Facet.CallOpts)
}

// DropperVersion is a free data retrieval call binding the contract method 0xfe57f8ec.
//
// Solidity: function dropperVersion() view returns(string, string)
func (_DropperV3Facet *DropperV3FacetCallerSession) DropperVersion() (string, string, error) {
	return _DropperV3Facet.Contract.DropperVersion(&_DropperV3Facet.CallOpts)
}

// GetDrop is a free data retrieval call binding the contract method 0x6787d449.
//
// Solidity: function getDrop(uint256 dropId) view returns((uint256,address,uint256,uint256,uint256,uint256))
func (_DropperV3Facet *DropperV3FacetCaller) GetDrop(opts *bind.CallOpts, dropId *big.Int) (DroppableToken, error) {
	var out []interface{}
	err := _DropperV3Facet.contract.Call(opts, &out, "getDrop", dropId)

	if err != nil {
		return *new(DroppableToken), err
	}

	out0 := *abi.ConvertType(out[0], new(DroppableToken)).(*DroppableToken)

	return out0, err

}

// GetDrop is a free data retrieval call binding the contract method 0x6787d449.
//
// Solidity: function getDrop(uint256 dropId) view returns((uint256,address,uint256,uint256,uint256,uint256))
func (_DropperV3Facet *DropperV3FacetSession) GetDrop(dropId *big.Int) (DroppableToken, error) {
	return _DropperV3Facet.Contract.GetDrop(&_DropperV3Facet.CallOpts, dropId)
}

// GetDrop is a free data retrieval call binding the contract method 0x6787d449.
//
// Solidity: function getDrop(uint256 dropId) view returns((uint256,address,uint256,uint256,uint256,uint256))
func (_DropperV3Facet *DropperV3FacetCallerSession) GetDrop(dropId *big.Int) (DroppableToken, error) {
	return _DropperV3Facet.Contract.GetDrop(&_DropperV3Facet.CallOpts, dropId)
}

// GetDropAuthorization is a free data retrieval call binding the contract method 0x8f21fc61.
//
// Solidity: function getDropAuthorization(uint256 dropId) view returns((address,uint256))
func (_DropperV3Facet *DropperV3FacetCaller) GetDropAuthorization(opts *bind.CallOpts, dropId *big.Int) (TerminusAuthorization, error) {
	var out []interface{}
	err := _DropperV3Facet.contract.Call(opts, &out, "getDropAuthorization", dropId)

	if err != nil {
		return *new(TerminusAuthorization), err
	}

	out0 := *abi.ConvertType(out[0], new(TerminusAuthorization)).(*TerminusAuthorization)

	return out0, err

}

// GetDropAuthorization is a free data retrieval call binding the contract method 0x8f21fc61.
//
// Solidity: function getDropAuthorization(uint256 dropId) view returns((address,uint256))
func (_DropperV3Facet *DropperV3FacetSession) GetDropAuthorization(dropId *big.Int) (TerminusAuthorization, error) {
	return _DropperV3Facet.Contract.GetDropAuthorization(&_DropperV3Facet.CallOpts, dropId)
}

// GetDropAuthorization is a free data retrieval call binding the contract method 0x8f21fc61.
//
// Solidity: function getDropAuthorization(uint256 dropId) view returns((address,uint256))
func (_DropperV3Facet *DropperV3FacetCallerSession) GetDropAuthorization(dropId *big.Int) (TerminusAuthorization, error) {
	return _DropperV3Facet.Contract.GetDropAuthorization(&_DropperV3Facet.CallOpts, dropId)
}

// NumDrops is a free data retrieval call binding the contract method 0x8bc30096.
//
// Solidity: function numDrops() view returns(uint256)
func (_DropperV3Facet *DropperV3FacetCaller) NumDrops(opts *bind.CallOpts) (*big.Int, error) {
	var out []interface{}
	err := _DropperV3Facet.contract.Call(opts, &out, "numDrops")

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// NumDrops is a free data retrieval call binding the contract method 0x8bc30096.
//
// Solidity: function numDrops() view returns(uint256)
func (_DropperV3Facet *DropperV3FacetSession) NumDrops() (*big.Int, error) {
	return _DropperV3Facet.Contract.NumDrops(&_DropperV3Facet.CallOpts)
}

// NumDrops is a free data retrieval call binding the contract method 0x8bc30096.
//
// Solidity: function numDrops() view returns(uint256)
func (_DropperV3Facet *DropperV3FacetCallerSession) NumDrops() (*big.Int, error) {
	return _DropperV3Facet.Contract.NumDrops(&_DropperV3Facet.CallOpts)
}

// SupportsInterface is a free data retrieval call binding the contract method 0x01ffc9a7.
//
// Solidity: function supportsInterface(bytes4 interfaceId) view returns(bool)
func (_DropperV3Facet *DropperV3FacetCaller) SupportsInterface(opts *bind.CallOpts, interfaceId [4]byte) (bool, error) {
	var out []interface{}
	err := _DropperV3Facet.contract.Call(opts, &out, "supportsInterface", interfaceId)

	if err != nil {
		return *new(bool), err
	}

	out0 := *abi.ConvertType(out[0], new(bool)).(*bool)

	return out0, err

}

// SupportsInterface is a free data retrieval call binding the contract method 0x01ffc9a7.
//
// Solidity: function supportsInterface(bytes4 interfaceId) view returns(bool)
func (_DropperV3Facet *DropperV3FacetSession) SupportsInterface(interfaceId [4]byte) (bool, error) {
	return _DropperV3Facet.Contract.SupportsInterface(&_DropperV3Facet.CallOpts, interfaceId)
}

// SupportsInterface is a free data retrieval call binding the contract method 0x01ffc9a7.
//
// Solidity: function supportsInterface(bytes4 interfaceId) view returns(bool)
func (_DropperV3Facet *DropperV3FacetCallerSession) SupportsInterface(interfaceId [4]byte) (bool, error) {
	return _DropperV3Facet.Contract.SupportsInterface(&_DropperV3Facet.CallOpts, interfaceId)
}

// BatchClaim is a paid mutator transaction binding the contract method 0x39fc3096.
//
// Solidity: function batchClaim(uint256[] dropIDList, uint256[] requestIDList, uint256[] blockDeadlineList, uint256[] amountList, address[] signerList, bytes[] signatureList) returns()
func (_DropperV3Facet *DropperV3FacetTransactor) BatchClaim(opts *bind.TransactOpts, dropIDList []*big.Int, requestIDList []*big.Int, blockDeadlineList []*big.Int, amountList []*big.Int, signerList []common.Address, signatureList [][]byte) (*types.Transaction, error) {
	return _DropperV3Facet.contract.Transact(opts, "batchClaim", dropIDList, requestIDList, blockDeadlineList, amountList, signerList, signatureList)
}

// BatchClaim is a paid mutator transaction binding the contract method 0x39fc3096.
//
// Solidity: function batchClaim(uint256[] dropIDList, uint256[] requestIDList, uint256[] blockDeadlineList, uint256[] amountList, address[] signerList, bytes[] signatureList) returns()
func (_DropperV3Facet *DropperV3FacetSession) BatchClaim(dropIDList []*big.Int, requestIDList []*big.Int, blockDeadlineList []*big.Int, amountList []*big.Int, signerList []common.Address, signatureList [][]byte) (*types.Transaction, error) {
	return _DropperV3Facet.Contract.BatchClaim(&_DropperV3Facet.TransactOpts, dropIDList, requestIDList, blockDeadlineList, amountList, signerList, signatureList)
}

// BatchClaim is a paid mutator transaction binding the contract method 0x39fc3096.
//
// Solidity: function batchClaim(uint256[] dropIDList, uint256[] requestIDList, uint256[] blockDeadlineList, uint256[] amountList, address[] signerList, bytes[] signatureList) returns()
func (_DropperV3Facet *DropperV3FacetTransactorSession) BatchClaim(dropIDList []*big.Int, requestIDList []*big.Int, blockDeadlineList []*big.Int, amountList []*big.Int, signerList []common.Address, signatureList [][]byte) (*types.Transaction, error) {
	return _DropperV3Facet.Contract.BatchClaim(&_DropperV3Facet.TransactOpts, dropIDList, requestIDList, blockDeadlineList, amountList, signerList, signatureList)
}

// BatchClaimFor is a paid mutator transaction binding the contract method 0x5b8b5d94.
//
// Solidity: function batchClaimFor(uint256[] dropIDList, uint256[] requestIDList, uint256[] blockDeadlineList, uint256[] amountList, address[] recipientList, address[] signerList, bytes[] signatureList) returns()
func (_DropperV3Facet *DropperV3FacetTransactor) BatchClaimFor(opts *bind.TransactOpts, dropIDList []*big.Int, requestIDList []*big.Int, blockDeadlineList []*big.Int, amountList []*big.Int, recipientList []common.Address, signerList []common.Address, signatureList [][]byte) (*types.Transaction, error) {
	return _DropperV3Facet.contract.Transact(opts, "batchClaimFor", dropIDList, requestIDList, blockDeadlineList, amountList, recipientList, signerList, signatureList)
}

// BatchClaimFor is a paid mutator transaction binding the contract method 0x5b8b5d94.
//
// Solidity: function batchClaimFor(uint256[] dropIDList, uint256[] requestIDList, uint256[] blockDeadlineList, uint256[] amountList, address[] recipientList, address[] signerList, bytes[] signatureList) returns()
func (_DropperV3Facet *DropperV3FacetSession) BatchClaimFor(dropIDList []*big.Int, requestIDList []*big.Int, blockDeadlineList []*big.Int, amountList []*big.Int, recipientList []common.Address, signerList []common.Address, signatureList [][]byte) (*types.Transaction, error) {
	return _DropperV3Facet.Contract.BatchClaimFor(&_DropperV3Facet.TransactOpts, dropIDList, requestIDList, blockDeadlineList, amountList, recipientList, signerList, signatureList)
}

// BatchClaimFor is a paid mutator transaction binding the contract method 0x5b8b5d94.
//
// Solidity: function batchClaimFor(uint256[] dropIDList, uint256[] requestIDList, uint256[] blockDeadlineList, uint256[] amountList, address[] recipientList, address[] signerList, bytes[] signatureList) returns()
func (_DropperV3Facet *DropperV3FacetTransactorSession) BatchClaimFor(dropIDList []*big.Int, requestIDList []*big.Int, blockDeadlineList []*big.Int, amountList []*big.Int, recipientList []common.Address, signerList []common.Address, signatureList [][]byte) (*types.Transaction, error) {
	return _DropperV3Facet.Contract.BatchClaimFor(&_DropperV3Facet.TransactOpts, dropIDList, requestIDList, blockDeadlineList, amountList, recipientList, signerList, signatureList)
}

// Claim is a paid mutator transaction binding the contract method 0xa41671e2.
//
// Solidity: function claim(uint256 dropId, uint256 requestID, uint256 blockDeadline, uint256 amount, address signer, bytes signature) returns()
func (_DropperV3Facet *DropperV3FacetTransactor) Claim(opts *bind.TransactOpts, dropId *big.Int, requestID *big.Int, blockDeadline *big.Int, amount *big.Int, signer common.Address, signature []byte) (*types.Transaction, error) {
	return _DropperV3Facet.contract.Transact(opts, "claim", dropId, requestID, blockDeadline, amount, signer, signature)
}

// Claim is a paid mutator transaction binding the contract method 0xa41671e2.
//
// Solidity: function claim(uint256 dropId, uint256 requestID, uint256 blockDeadline, uint256 amount, address signer, bytes signature) returns()
func (_DropperV3Facet *DropperV3FacetSession) Claim(dropId *big.Int, requestID *big.Int, blockDeadline *big.Int, amount *big.Int, signer common.Address, signature []byte) (*types.Transaction, error) {
	return _DropperV3Facet.Contract.Claim(&_DropperV3Facet.TransactOpts, dropId, requestID, blockDeadline, amount, signer, signature)
}

// Claim is a paid mutator transaction binding the contract method 0xa41671e2.
//
// Solidity: function claim(uint256 dropId, uint256 requestID, uint256 blockDeadline, uint256 amount, address signer, bytes signature) returns()
func (_DropperV3Facet *DropperV3FacetTransactorSession) Claim(dropId *big.Int, requestID *big.Int, blockDeadline *big.Int, amount *big.Int, signer common.Address, signature []byte) (*types.Transaction, error) {
	return _DropperV3Facet.Contract.Claim(&_DropperV3Facet.TransactOpts, dropId, requestID, blockDeadline, amount, signer, signature)
}

// ClaimFor is a paid mutator transaction binding the contract method 0x18fefe4b.
//
// Solidity: function claimFor(uint256 dropId, uint256 requestID, uint256 blockDeadline, uint256 amount, address recipient, address signer, bytes signature) returns()
func (_DropperV3Facet *DropperV3FacetTransactor) ClaimFor(opts *bind.TransactOpts, dropId *big.Int, requestID *big.Int, blockDeadline *big.Int, amount *big.Int, recipient common.Address, signer common.Address, signature []byte) (*types.Transaction, error) {
	return _DropperV3Facet.contract.Transact(opts, "claimFor", dropId, requestID, blockDeadline, amount, recipient, signer, signature)
}

// ClaimFor is a paid mutator transaction binding the contract method 0x18fefe4b.
//
// Solidity: function claimFor(uint256 dropId, uint256 requestID, uint256 blockDeadline, uint256 amount, address recipient, address signer, bytes signature) returns()
func (_DropperV3Facet *DropperV3FacetSession) ClaimFor(dropId *big.Int, requestID *big.Int, blockDeadline *big.Int, amount *big.Int, recipient common.Address, signer common.Address, signature []byte) (*types.Transaction, error) {
	return _DropperV3Facet.Contract.ClaimFor(&_DropperV3Facet.TransactOpts, dropId, requestID, blockDeadline, amount, recipient, signer, signature)
}

// ClaimFor is a paid mutator transaction binding the contract method 0x18fefe4b.
//
// Solidity: function claimFor(uint256 dropId, uint256 requestID, uint256 blockDeadline, uint256 amount, address recipient, address signer, bytes signature) returns()
func (_DropperV3Facet *DropperV3FacetTransactorSession) ClaimFor(dropId *big.Int, requestID *big.Int, blockDeadline *big.Int, amount *big.Int, recipient common.Address, signer common.Address, signature []byte) (*types.Transaction, error) {
	return _DropperV3Facet.Contract.ClaimFor(&_DropperV3Facet.TransactOpts, dropId, requestID, blockDeadline, amount, recipient, signer, signature)
}

// CreateDrop is a paid mutator transaction binding the contract method 0xc0a6c651.
//
// Solidity: function createDrop(uint256 tokenType, address tokenAddress, uint256 tokenId, uint256 amount, address authorizationTokenAddress, uint256 authorizationPoolId, uint256 maxNumberOfTokens, string uri) payable returns(uint256)
func (_DropperV3Facet *DropperV3FacetTransactor) CreateDrop(opts *bind.TransactOpts, tokenType *big.Int, tokenAddress common.Address, tokenId *big.Int, amount *big.Int, authorizationTokenAddress common.Address, authorizationPoolId *big.Int, maxNumberOfTokens *big.Int, uri string) (*types.Transaction, error) {
	return _DropperV3Facet.contract.Transact(opts, "createDrop", tokenType, tokenAddress, tokenId, amount, authorizationTokenAddress, authorizationPoolId, maxNumberOfTokens, uri)
}

// CreateDrop is a paid mutator transaction binding the contract method 0xc0a6c651.
//
// Solidity: function createDrop(uint256 tokenType, address tokenAddress, uint256 tokenId, uint256 amount, address authorizationTokenAddress, uint256 authorizationPoolId, uint256 maxNumberOfTokens, string uri) payable returns(uint256)
func (_DropperV3Facet *DropperV3FacetSession) CreateDrop(tokenType *big.Int, tokenAddress common.Address, tokenId *big.Int, amount *big.Int, authorizationTokenAddress common.Address, authorizationPoolId *big.Int, maxNumberOfTokens *big.Int, uri string) (*types.Transaction, error) {
	return _DropperV3Facet.Contract.CreateDrop(&_DropperV3Facet.TransactOpts, tokenType, tokenAddress, tokenId, amount, authorizationTokenAddress, authorizationPoolId, maxNumberOfTokens, uri)
}

// CreateDrop is a paid mutator transaction binding the contract method 0xc0a6c651.
//
// Solidity: function createDrop(uint256 tokenType, address tokenAddress, uint256 tokenId, uint256 amount, address authorizationTokenAddress, uint256 authorizationPoolId, uint256 maxNumberOfTokens, string uri) payable returns(uint256)
func (_DropperV3Facet *DropperV3FacetTransactorSession) CreateDrop(tokenType *big.Int, tokenAddress common.Address, tokenId *big.Int, amount *big.Int, authorizationTokenAddress common.Address, authorizationPoolId *big.Int, maxNumberOfTokens *big.Int, uri string) (*types.Transaction, error) {
	return _DropperV3Facet.Contract.CreateDrop(&_DropperV3Facet.TransactOpts, tokenType, tokenAddress, tokenId, amount, authorizationTokenAddress, authorizationPoolId, maxNumberOfTokens, uri)
}

// Init is a paid mutator transaction binding the contract method 0x399ae724.
//
// Solidity: function init(address _terminusAdminContractAddress, uint256 _terminusAdminPoolId) returns()
func (_DropperV3Facet *DropperV3FacetTransactor) Init(opts *bind.TransactOpts, _terminusAdminContractAddress common.Address, _terminusAdminPoolId *big.Int) (*types.Transaction, error) {
	return _DropperV3Facet.contract.Transact(opts, "init", _terminusAdminContractAddress, _terminusAdminPoolId)
}

// Init is a paid mutator transaction binding the contract method 0x399ae724.
//
// Solidity: function init(address _terminusAdminContractAddress, uint256 _terminusAdminPoolId) returns()
func (_DropperV3Facet *DropperV3FacetSession) Init(_terminusAdminContractAddress common.Address, _terminusAdminPoolId *big.Int) (*types.Transaction, error) {
	return _DropperV3Facet.Contract.Init(&_DropperV3Facet.TransactOpts, _terminusAdminContractAddress, _terminusAdminPoolId)
}

// Init is a paid mutator transaction binding the contract method 0x399ae724.
//
// Solidity: function init(address _terminusAdminContractAddress, uint256 _terminusAdminPoolId) returns()
func (_DropperV3Facet *DropperV3FacetTransactorSession) Init(_terminusAdminContractAddress common.Address, _terminusAdminPoolId *big.Int) (*types.Transaction, error) {
	return _DropperV3Facet.Contract.Init(&_DropperV3Facet.TransactOpts, _terminusAdminContractAddress, _terminusAdminPoolId)
}

// OnERC1155BatchReceived is a paid mutator transaction binding the contract method 0xbc197c81.
//
// Solidity: function onERC1155BatchReceived(address , address , uint256[] , uint256[] , bytes ) returns(bytes4)
func (_DropperV3Facet *DropperV3FacetTransactor) OnERC1155BatchReceived(opts *bind.TransactOpts, arg0 common.Address, arg1 common.Address, arg2 []*big.Int, arg3 []*big.Int, arg4 []byte) (*types.Transaction, error) {
	return _DropperV3Facet.contract.Transact(opts, "onERC1155BatchReceived", arg0, arg1, arg2, arg3, arg4)
}

// OnERC1155BatchReceived is a paid mutator transaction binding the contract method 0xbc197c81.
//
// Solidity: function onERC1155BatchReceived(address , address , uint256[] , uint256[] , bytes ) returns(bytes4)
func (_DropperV3Facet *DropperV3FacetSession) OnERC1155BatchReceived(arg0 common.Address, arg1 common.Address, arg2 []*big.Int, arg3 []*big.Int, arg4 []byte) (*types.Transaction, error) {
	return _DropperV3Facet.Contract.OnERC1155BatchReceived(&_DropperV3Facet.TransactOpts, arg0, arg1, arg2, arg3, arg4)
}

// OnERC1155BatchReceived is a paid mutator transaction binding the contract method 0xbc197c81.
//
// Solidity: function onERC1155BatchReceived(address , address , uint256[] , uint256[] , bytes ) returns(bytes4)
func (_DropperV3Facet *DropperV3FacetTransactorSession) OnERC1155BatchReceived(arg0 common.Address, arg1 common.Address, arg2 []*big.Int, arg3 []*big.Int, arg4 []byte) (*types.Transaction, error) {
	return _DropperV3Facet.Contract.OnERC1155BatchReceived(&_DropperV3Facet.TransactOpts, arg0, arg1, arg2, arg3, arg4)
}

// OnERC1155Received is a paid mutator transaction binding the contract method 0xf23a6e61.
//
// Solidity: function onERC1155Received(address , address , uint256 , uint256 , bytes ) returns(bytes4)
func (_DropperV3Facet *DropperV3FacetTransactor) OnERC1155Received(opts *bind.TransactOpts, arg0 common.Address, arg1 common.Address, arg2 *big.Int, arg3 *big.Int, arg4 []byte) (*types.Transaction, error) {
	return _DropperV3Facet.contract.Transact(opts, "onERC1155Received", arg0, arg1, arg2, arg3, arg4)
}

// OnERC1155Received is a paid mutator transaction binding the contract method 0xf23a6e61.
//
// Solidity: function onERC1155Received(address , address , uint256 , uint256 , bytes ) returns(bytes4)
func (_DropperV3Facet *DropperV3FacetSession) OnERC1155Received(arg0 common.Address, arg1 common.Address, arg2 *big.Int, arg3 *big.Int, arg4 []byte) (*types.Transaction, error) {
	return _DropperV3Facet.Contract.OnERC1155Received(&_DropperV3Facet.TransactOpts, arg0, arg1, arg2, arg3, arg4)
}

// OnERC1155Received is a paid mutator transaction binding the contract method 0xf23a6e61.
//
// Solidity: function onERC1155Received(address , address , uint256 , uint256 , bytes ) returns(bytes4)
func (_DropperV3Facet *DropperV3FacetTransactorSession) OnERC1155Received(arg0 common.Address, arg1 common.Address, arg2 *big.Int, arg3 *big.Int, arg4 []byte) (*types.Transaction, error) {
	return _DropperV3Facet.Contract.OnERC1155Received(&_DropperV3Facet.TransactOpts, arg0, arg1, arg2, arg3, arg4)
}

// OnERC721Received is a paid mutator transaction binding the contract method 0x150b7a02.
//
// Solidity: function onERC721Received(address , address , uint256 , bytes ) returns(bytes4)
func (_DropperV3Facet *DropperV3FacetTransactor) OnERC721Received(opts *bind.TransactOpts, arg0 common.Address, arg1 common.Address, arg2 *big.Int, arg3 []byte) (*types.Transaction, error) {
	return _DropperV3Facet.contract.Transact(opts, "onERC721Received", arg0, arg1, arg2, arg3)
}

// OnERC721Received is a paid mutator transaction binding the contract method 0x150b7a02.
//
// Solidity: function onERC721Received(address , address , uint256 , bytes ) returns(bytes4)
func (_DropperV3Facet *DropperV3FacetSession) OnERC721Received(arg0 common.Address, arg1 common.Address, arg2 *big.Int, arg3 []byte) (*types.Transaction, error) {
	return _DropperV3Facet.Contract.OnERC721Received(&_DropperV3Facet.TransactOpts, arg0, arg1, arg2, arg3)
}

// OnERC721Received is a paid mutator transaction binding the contract method 0x150b7a02.
//
// Solidity: function onERC721Received(address , address , uint256 , bytes ) returns(bytes4)
func (_DropperV3Facet *DropperV3FacetTransactorSession) OnERC721Received(arg0 common.Address, arg1 common.Address, arg2 *big.Int, arg3 []byte) (*types.Transaction, error) {
	return _DropperV3Facet.Contract.OnERC721Received(&_DropperV3Facet.TransactOpts, arg0, arg1, arg2, arg3)
}

// SetDropAuthorization is a paid mutator transaction binding the contract method 0x32fc2336.
//
// Solidity: function setDropAuthorization(uint256 dropId, address terminusAddress, uint256 poolId) returns()
func (_DropperV3Facet *DropperV3FacetTransactor) SetDropAuthorization(opts *bind.TransactOpts, dropId *big.Int, terminusAddress common.Address, poolId *big.Int) (*types.Transaction, error) {
	return _DropperV3Facet.contract.Transact(opts, "setDropAuthorization", dropId, terminusAddress, poolId)
}

// SetDropAuthorization is a paid mutator transaction binding the contract method 0x32fc2336.
//
// Solidity: function setDropAuthorization(uint256 dropId, address terminusAddress, uint256 poolId) returns()
func (_DropperV3Facet *DropperV3FacetSession) SetDropAuthorization(dropId *big.Int, terminusAddress common.Address, poolId *big.Int) (*types.Transaction, error) {
	return _DropperV3Facet.Contract.SetDropAuthorization(&_DropperV3Facet.TransactOpts, dropId, terminusAddress, poolId)
}

// SetDropAuthorization is a paid mutator transaction binding the contract method 0x32fc2336.
//
// Solidity: function setDropAuthorization(uint256 dropId, address terminusAddress, uint256 poolId) returns()
func (_DropperV3Facet *DropperV3FacetTransactorSession) SetDropAuthorization(dropId *big.Int, terminusAddress common.Address, poolId *big.Int) (*types.Transaction, error) {
	return _DropperV3Facet.Contract.SetDropAuthorization(&_DropperV3Facet.TransactOpts, dropId, terminusAddress, poolId)
}

// SetDropStatus is a paid mutator transaction binding the contract method 0x90dc79dd.
//
// Solidity: function setDropStatus(uint256 dropId, bool status) returns()
func (_DropperV3Facet *DropperV3FacetTransactor) SetDropStatus(opts *bind.TransactOpts, dropId *big.Int, status bool) (*types.Transaction, error) {
	return _DropperV3Facet.contract.Transact(opts, "setDropStatus", dropId, status)
}

// SetDropStatus is a paid mutator transaction binding the contract method 0x90dc79dd.
//
// Solidity: function setDropStatus(uint256 dropId, bool status) returns()
func (_DropperV3Facet *DropperV3FacetSession) SetDropStatus(dropId *big.Int, status bool) (*types.Transaction, error) {
	return _DropperV3Facet.Contract.SetDropStatus(&_DropperV3Facet.TransactOpts, dropId, status)
}

// SetDropStatus is a paid mutator transaction binding the contract method 0x90dc79dd.
//
// Solidity: function setDropStatus(uint256 dropId, bool status) returns()
func (_DropperV3Facet *DropperV3FacetTransactorSession) SetDropStatus(dropId *big.Int, status bool) (*types.Transaction, error) {
	return _DropperV3Facet.Contract.SetDropStatus(&_DropperV3Facet.TransactOpts, dropId, status)
}

// SetDropUri is a paid mutator transaction binding the contract method 0x97fdced0.
//
// Solidity: function setDropUri(uint256 dropId, string uri) returns()
func (_DropperV3Facet *DropperV3FacetTransactor) SetDropUri(opts *bind.TransactOpts, dropId *big.Int, uri string) (*types.Transaction, error) {
	return _DropperV3Facet.contract.Transact(opts, "setDropUri", dropId, uri)
}

// SetDropUri is a paid mutator transaction binding the contract method 0x97fdced0.
//
// Solidity: function setDropUri(uint256 dropId, string uri) returns()
func (_DropperV3Facet *DropperV3FacetSession) SetDropUri(dropId *big.Int, uri string) (*types.Transaction, error) {
	return _DropperV3Facet.Contract.SetDropUri(&_DropperV3Facet.TransactOpts, dropId, uri)
}

// SetDropUri is a paid mutator transaction binding the contract method 0x97fdced0.
//
// Solidity: function setDropUri(uint256 dropId, string uri) returns()
func (_DropperV3Facet *DropperV3FacetTransactorSession) SetDropUri(dropId *big.Int, uri string) (*types.Transaction, error) {
	return _DropperV3Facet.Contract.SetDropUri(&_DropperV3Facet.TransactOpts, dropId, uri)
}

// SetMaxNumberOfTokens is a paid mutator transaction binding the contract method 0xc536f1ef.
//
// Solidity: function setMaxNumberOfTokens(uint256 dropId, uint256 maxNumberOfTokens) returns()
func (_DropperV3Facet *DropperV3FacetTransactor) SetMaxNumberOfTokens(opts *bind.TransactOpts, dropId *big.Int, maxNumberOfTokens *big.Int) (*types.Transaction, error) {
	return _DropperV3Facet.contract.Transact(opts, "setMaxNumberOfTokens", dropId, maxNumberOfTokens)
}

// SetMaxNumberOfTokens is a paid mutator transaction binding the contract method 0xc536f1ef.
//
// Solidity: function setMaxNumberOfTokens(uint256 dropId, uint256 maxNumberOfTokens) returns()
func (_DropperV3Facet *DropperV3FacetSession) SetMaxNumberOfTokens(dropId *big.Int, maxNumberOfTokens *big.Int) (*types.Transaction, error) {
	return _DropperV3Facet.Contract.SetMaxNumberOfTokens(&_DropperV3Facet.TransactOpts, dropId, maxNumberOfTokens)
}

// SetMaxNumberOfTokens is a paid mutator transaction binding the contract method 0xc536f1ef.
//
// Solidity: function setMaxNumberOfTokens(uint256 dropId, uint256 maxNumberOfTokens) returns()
func (_DropperV3Facet *DropperV3FacetTransactorSession) SetMaxNumberOfTokens(dropId *big.Int, maxNumberOfTokens *big.Int) (*types.Transaction, error) {
	return _DropperV3Facet.Contract.SetMaxNumberOfTokens(&_DropperV3Facet.TransactOpts, dropId, maxNumberOfTokens)
}

// SurrenderPoolControl is a paid mutator transaction binding the contract method 0xc1e6c0a7.
//
// Solidity: function surrenderPoolControl(uint256 poolId, address terminusAddress, address newPoolController) returns()
func (_DropperV3Facet *DropperV3FacetTransactor) SurrenderPoolControl(opts *bind.TransactOpts, poolId *big.Int, terminusAddress common.Address, newPoolController common.Address) (*types.Transaction, error) {
	return _DropperV3Facet.contract.Transact(opts, "surrenderPoolControl", poolId, terminusAddress, newPoolController)
}

// SurrenderPoolControl is a paid mutator transaction binding the contract method 0xc1e6c0a7.
//
// Solidity: function surrenderPoolControl(uint256 poolId, address terminusAddress, address newPoolController) returns()
func (_DropperV3Facet *DropperV3FacetSession) SurrenderPoolControl(poolId *big.Int, terminusAddress common.Address, newPoolController common.Address) (*types.Transaction, error) {
	return _DropperV3Facet.Contract.SurrenderPoolControl(&_DropperV3Facet.TransactOpts, poolId, terminusAddress, newPoolController)
}

// SurrenderPoolControl is a paid mutator transaction binding the contract method 0xc1e6c0a7.
//
// Solidity: function surrenderPoolControl(uint256 poolId, address terminusAddress, address newPoolController) returns()
func (_DropperV3Facet *DropperV3FacetTransactorSession) SurrenderPoolControl(poolId *big.Int, terminusAddress common.Address, newPoolController common.Address) (*types.Transaction, error) {
	return _DropperV3Facet.Contract.SurrenderPoolControl(&_DropperV3Facet.TransactOpts, poolId, terminusAddress, newPoolController)
}

// WithdrawERC1155 is a paid mutator transaction binding the contract method 0x39ead720.
//
// Solidity: function withdrawERC1155(address tokenAddress, uint256 tokenId, uint256 amount) returns()
func (_DropperV3Facet *DropperV3FacetTransactor) WithdrawERC1155(opts *bind.TransactOpts, tokenAddress common.Address, tokenId *big.Int, amount *big.Int) (*types.Transaction, error) {
	return _DropperV3Facet.contract.Transact(opts, "withdrawERC1155", tokenAddress, tokenId, amount)
}

// WithdrawERC1155 is a paid mutator transaction binding the contract method 0x39ead720.
//
// Solidity: function withdrawERC1155(address tokenAddress, uint256 tokenId, uint256 amount) returns()
func (_DropperV3Facet *DropperV3FacetSession) WithdrawERC1155(tokenAddress common.Address, tokenId *big.Int, amount *big.Int) (*types.Transaction, error) {
	return _DropperV3Facet.Contract.WithdrawERC1155(&_DropperV3Facet.TransactOpts, tokenAddress, tokenId, amount)
}

// WithdrawERC1155 is a paid mutator transaction binding the contract method 0x39ead720.
//
// Solidity: function withdrawERC1155(address tokenAddress, uint256 tokenId, uint256 amount) returns()
func (_DropperV3Facet *DropperV3FacetTransactorSession) WithdrawERC1155(tokenAddress common.Address, tokenId *big.Int, amount *big.Int) (*types.Transaction, error) {
	return _DropperV3Facet.Contract.WithdrawERC1155(&_DropperV3Facet.TransactOpts, tokenAddress, tokenId, amount)
}

// WithdrawERC20 is a paid mutator transaction binding the contract method 0xa1db9782.
//
// Solidity: function withdrawERC20(address tokenAddress, uint256 amount) returns()
func (_DropperV3Facet *DropperV3FacetTransactor) WithdrawERC20(opts *bind.TransactOpts, tokenAddress common.Address, amount *big.Int) (*types.Transaction, error) {
	return _DropperV3Facet.contract.Transact(opts, "withdrawERC20", tokenAddress, amount)
}

// WithdrawERC20 is a paid mutator transaction binding the contract method 0xa1db9782.
//
// Solidity: function withdrawERC20(address tokenAddress, uint256 amount) returns()
func (_DropperV3Facet *DropperV3FacetSession) WithdrawERC20(tokenAddress common.Address, amount *big.Int) (*types.Transaction, error) {
	return _DropperV3Facet.Contract.WithdrawERC20(&_DropperV3Facet.TransactOpts, tokenAddress, amount)
}

// WithdrawERC20 is a paid mutator transaction binding the contract method 0xa1db9782.
//
// Solidity: function withdrawERC20(address tokenAddress, uint256 amount) returns()
func (_DropperV3Facet *DropperV3FacetTransactorSession) WithdrawERC20(tokenAddress common.Address, amount *big.Int) (*types.Transaction, error) {
	return _DropperV3Facet.Contract.WithdrawERC20(&_DropperV3Facet.TransactOpts, tokenAddress, amount)
}

// WithdrawERC721 is a paid mutator transaction binding the contract method 0xf3e414f8.
//
// Solidity: function withdrawERC721(address tokenAddress, uint256 tokenId) returns()
func (_DropperV3Facet *DropperV3FacetTransactor) WithdrawERC721(opts *bind.TransactOpts, tokenAddress common.Address, tokenId *big.Int) (*types.Transaction, error) {
	return _DropperV3Facet.contract.Transact(opts, "withdrawERC721", tokenAddress, tokenId)
}

// WithdrawERC721 is a paid mutator transaction binding the contract method 0xf3e414f8.
//
// Solidity: function withdrawERC721(address tokenAddress, uint256 tokenId) returns()
func (_DropperV3Facet *DropperV3FacetSession) WithdrawERC721(tokenAddress common.Address, tokenId *big.Int) (*types.Transaction, error) {
	return _DropperV3Facet.Contract.WithdrawERC721(&_DropperV3Facet.TransactOpts, tokenAddress, tokenId)
}

// WithdrawERC721 is a paid mutator transaction binding the contract method 0xf3e414f8.
//
// Solidity: function withdrawERC721(address tokenAddress, uint256 tokenId) returns()
func (_DropperV3Facet *DropperV3FacetTransactorSession) WithdrawERC721(tokenAddress common.Address, tokenId *big.Int) (*types.Transaction, error) {
	return _DropperV3Facet.Contract.WithdrawERC721(&_DropperV3Facet.TransactOpts, tokenAddress, tokenId)
}

// WithdrawNativeToken is a paid mutator transaction binding the contract method 0x17e0f252.
//
// Solidity: function withdrawNativeToken(uint256 amount) returns()
func (_DropperV3Facet *DropperV3FacetTransactor) WithdrawNativeToken(opts *bind.TransactOpts, amount *big.Int) (*types.Transaction, error) {
	return _DropperV3Facet.contract.Transact(opts, "withdrawNativeToken", amount)
}

// WithdrawNativeToken is a paid mutator transaction binding the contract method 0x17e0f252.
//
// Solidity: function withdrawNativeToken(uint256 amount) returns()
func (_DropperV3Facet *DropperV3FacetSession) WithdrawNativeToken(amount *big.Int) (*types.Transaction, error) {
	return _DropperV3Facet.Contract.WithdrawNativeToken(&_DropperV3Facet.TransactOpts, amount)
}

// WithdrawNativeToken is a paid mutator transaction binding the contract method 0x17e0f252.
//
// Solidity: function withdrawNativeToken(uint256 amount) returns()
func (_DropperV3Facet *DropperV3FacetTransactorSession) WithdrawNativeToken(amount *big.Int) (*types.Transaction, error) {
	return _DropperV3Facet.Contract.WithdrawNativeToken(&_DropperV3Facet.TransactOpts, amount)
}

// Fallback is a paid mutator transaction binding the contract fallback function.
//
// Solidity: fallback() payable returns()
func (_DropperV3Facet *DropperV3FacetTransactor) Fallback(opts *bind.TransactOpts, calldata []byte) (*types.Transaction, error) {
	return _DropperV3Facet.contract.RawTransact(opts, calldata)
}

// Fallback is a paid mutator transaction binding the contract fallback function.
//
// Solidity: fallback() payable returns()
func (_DropperV3Facet *DropperV3FacetSession) Fallback(calldata []byte) (*types.Transaction, error) {
	return _DropperV3Facet.Contract.Fallback(&_DropperV3Facet.TransactOpts, calldata)
}

// Fallback is a paid mutator transaction binding the contract fallback function.
//
// Solidity: fallback() payable returns()
func (_DropperV3Facet *DropperV3FacetTransactorSession) Fallback(calldata []byte) (*types.Transaction, error) {
	return _DropperV3Facet.Contract.Fallback(&_DropperV3Facet.TransactOpts, calldata)
}

// Receive is a paid mutator transaction binding the contract receive function.
//
// Solidity: receive() payable returns()
func (_DropperV3Facet *DropperV3FacetTransactor) Receive(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _DropperV3Facet.contract.RawTransact(opts, nil) // calldata is disallowed for receive function
}

// Receive is a paid mutator transaction binding the contract receive function.
//
// Solidity: receive() payable returns()
func (_DropperV3Facet *DropperV3FacetSession) Receive() (*types.Transaction, error) {
	return _DropperV3Facet.Contract.Receive(&_DropperV3Facet.TransactOpts)
}

// Receive is a paid mutator transaction binding the contract receive function.
//
// Solidity: receive() payable returns()
func (_DropperV3Facet *DropperV3FacetTransactorSession) Receive() (*types.Transaction, error) {
	return _DropperV3Facet.Contract.Receive(&_DropperV3Facet.TransactOpts)
}

// DropperV3FacetClaimedIterator is returned from FilterClaimed and is used to iterate over the raw logs and unpacked data for Claimed events raised by the DropperV3Facet contract.
type DropperV3FacetClaimedIterator struct {
	Event *DropperV3FacetClaimed // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *DropperV3FacetClaimedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(DropperV3FacetClaimed)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(DropperV3FacetClaimed)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *DropperV3FacetClaimedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *DropperV3FacetClaimedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// DropperV3FacetClaimed represents a Claimed event raised by the DropperV3Facet contract.
type DropperV3FacetClaimed struct {
	DropId    *big.Int
	Claimant  common.Address
	Signer    common.Address
	RequestID *big.Int
	Amount    *big.Int
	Raw       types.Log // Blockchain specific contextual infos
}

// FilterClaimed is a free log retrieval operation binding the contract event 0x3e356ee9071ea983e847cc7da7b8b224b8f44262f7c9ce77262ea0e854a5442c.
//
// Solidity: event Claimed(uint256 indexed dropId, address indexed claimant, address indexed signer, uint256 requestID, uint256 amount)
func (_DropperV3Facet *DropperV3FacetFilterer) FilterClaimed(opts *bind.FilterOpts, dropId []*big.Int, claimant []common.Address, signer []common.Address) (*DropperV3FacetClaimedIterator, error) {

	var dropIdRule []interface{}
	for _, dropIdItem := range dropId {
		dropIdRule = append(dropIdRule, dropIdItem)
	}
	var claimantRule []interface{}
	for _, claimantItem := range claimant {
		claimantRule = append(claimantRule, claimantItem)
	}
	var signerRule []interface{}
	for _, signerItem := range signer {
		signerRule = append(signerRule, signerItem)
	}

	logs, sub, err := _DropperV3Facet.contract.FilterLogs(opts, "Claimed", dropIdRule, claimantRule, signerRule)
	if err != nil {
		return nil, err
	}
	return &DropperV3FacetClaimedIterator{contract: _DropperV3Facet.contract, event: "Claimed", logs: logs, sub: sub}, nil
}

// WatchClaimed is a free log subscription operation binding the contract event 0x3e356ee9071ea983e847cc7da7b8b224b8f44262f7c9ce77262ea0e854a5442c.
//
// Solidity: event Claimed(uint256 indexed dropId, address indexed claimant, address indexed signer, uint256 requestID, uint256 amount)
func (_DropperV3Facet *DropperV3FacetFilterer) WatchClaimed(opts *bind.WatchOpts, sink chan<- *DropperV3FacetClaimed, dropId []*big.Int, claimant []common.Address, signer []common.Address) (event.Subscription, error) {

	var dropIdRule []interface{}
	for _, dropIdItem := range dropId {
		dropIdRule = append(dropIdRule, dropIdItem)
	}
	var claimantRule []interface{}
	for _, claimantItem := range claimant {
		claimantRule = append(claimantRule, claimantItem)
	}
	var signerRule []interface{}
	for _, signerItem := range signer {
		signerRule = append(signerRule, signerItem)
	}

	logs, sub, err := _DropperV3Facet.contract.WatchLogs(opts, "Claimed", dropIdRule, claimantRule, signerRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(DropperV3FacetClaimed)
				if err := _DropperV3Facet.contract.UnpackLog(event, "Claimed", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseClaimed is a log parse operation binding the contract event 0x3e356ee9071ea983e847cc7da7b8b224b8f44262f7c9ce77262ea0e854a5442c.
//
// Solidity: event Claimed(uint256 indexed dropId, address indexed claimant, address indexed signer, uint256 requestID, uint256 amount)
func (_DropperV3Facet *DropperV3FacetFilterer) ParseClaimed(log types.Log) (*DropperV3FacetClaimed, error) {
	event := new(DropperV3FacetClaimed)
	if err := _DropperV3Facet.contract.UnpackLog(event, "Claimed", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// DropperV3FacetDropAuthorizationChangedIterator is returned from FilterDropAuthorizationChanged and is used to iterate over the raw logs and unpacked data for DropAuthorizationChanged events raised by the DropperV3Facet contract.
type DropperV3FacetDropAuthorizationChangedIterator struct {
	Event *DropperV3FacetDropAuthorizationChanged // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *DropperV3FacetDropAuthorizationChangedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(DropperV3FacetDropAuthorizationChanged)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(DropperV3FacetDropAuthorizationChanged)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *DropperV3FacetDropAuthorizationChangedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *DropperV3FacetDropAuthorizationChangedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// DropperV3FacetDropAuthorizationChanged represents a DropAuthorizationChanged event raised by the DropperV3Facet contract.
type DropperV3FacetDropAuthorizationChanged struct {
	DropId          *big.Int
	TerminusAddress common.Address
	PoolId          *big.Int
	Raw             types.Log // Blockchain specific contextual infos
}

// FilterDropAuthorizationChanged is a free log retrieval operation binding the contract event 0x222c9c997368184d04666106062af190471eb24f6dda31c712fe5c8b3c6398c8.
//
// Solidity: event DropAuthorizationChanged(uint256 indexed dropId, address terminusAddress, uint256 poolId)
func (_DropperV3Facet *DropperV3FacetFilterer) FilterDropAuthorizationChanged(opts *bind.FilterOpts, dropId []*big.Int) (*DropperV3FacetDropAuthorizationChangedIterator, error) {

	var dropIdRule []interface{}
	for _, dropIdItem := range dropId {
		dropIdRule = append(dropIdRule, dropIdItem)
	}

	logs, sub, err := _DropperV3Facet.contract.FilterLogs(opts, "DropAuthorizationChanged", dropIdRule)
	if err != nil {
		return nil, err
	}
	return &DropperV3FacetDropAuthorizationChangedIterator{contract: _DropperV3Facet.contract, event: "DropAuthorizationChanged", logs: logs, sub: sub}, nil
}

// WatchDropAuthorizationChanged is a free log subscription operation binding the contract event 0x222c9c997368184d04666106062af190471eb24f6dda31c712fe5c8b3c6398c8.
//
// Solidity: event DropAuthorizationChanged(uint256 indexed dropId, address terminusAddress, uint256 poolId)
func (_DropperV3Facet *DropperV3FacetFilterer) WatchDropAuthorizationChanged(opts *bind.WatchOpts, sink chan<- *DropperV3FacetDropAuthorizationChanged, dropId []*big.Int) (event.Subscription, error) {

	var dropIdRule []interface{}
	for _, dropIdItem := range dropId {
		dropIdRule = append(dropIdRule, dropIdItem)
	}

	logs, sub, err := _DropperV3Facet.contract.WatchLogs(opts, "DropAuthorizationChanged", dropIdRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(DropperV3FacetDropAuthorizationChanged)
				if err := _DropperV3Facet.contract.UnpackLog(event, "DropAuthorizationChanged", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseDropAuthorizationChanged is a log parse operation binding the contract event 0x222c9c997368184d04666106062af190471eb24f6dda31c712fe5c8b3c6398c8.
//
// Solidity: event DropAuthorizationChanged(uint256 indexed dropId, address terminusAddress, uint256 poolId)
func (_DropperV3Facet *DropperV3FacetFilterer) ParseDropAuthorizationChanged(log types.Log) (*DropperV3FacetDropAuthorizationChanged, error) {
	event := new(DropperV3FacetDropAuthorizationChanged)
	if err := _DropperV3Facet.contract.UnpackLog(event, "DropAuthorizationChanged", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// DropperV3FacetDropCreatedIterator is returned from FilterDropCreated and is used to iterate over the raw logs and unpacked data for DropCreated events raised by the DropperV3Facet contract.
type DropperV3FacetDropCreatedIterator struct {
	Event *DropperV3FacetDropCreated // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *DropperV3FacetDropCreatedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(DropperV3FacetDropCreated)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(DropperV3FacetDropCreated)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *DropperV3FacetDropCreatedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *DropperV3FacetDropCreatedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// DropperV3FacetDropCreated represents a DropCreated event raised by the DropperV3Facet contract.
type DropperV3FacetDropCreated struct {
	DropId            *big.Int
	TokenType         *big.Int
	TokenAddress      common.Address
	TokenId           *big.Int
	Amount            *big.Int
	MaxNumberOfTokens *big.Int
	Raw               types.Log // Blockchain specific contextual infos
}

// FilterDropCreated is a free log retrieval operation binding the contract event 0x2eb9d2fbe3689cc1caa714232381054a6bd883cc598e66e077f8235c8ee2433f.
//
// Solidity: event DropCreated(uint256 dropId, uint256 indexed tokenType, address indexed tokenAddress, uint256 indexed tokenId, uint256 amount, uint256 maxNumberOfTokens)
func (_DropperV3Facet *DropperV3FacetFilterer) FilterDropCreated(opts *bind.FilterOpts, tokenType []*big.Int, tokenAddress []common.Address, tokenId []*big.Int) (*DropperV3FacetDropCreatedIterator, error) {

	var tokenTypeRule []interface{}
	for _, tokenTypeItem := range tokenType {
		tokenTypeRule = append(tokenTypeRule, tokenTypeItem)
	}
	var tokenAddressRule []interface{}
	for _, tokenAddressItem := range tokenAddress {
		tokenAddressRule = append(tokenAddressRule, tokenAddressItem)
	}
	var tokenIdRule []interface{}
	for _, tokenIdItem := range tokenId {
		tokenIdRule = append(tokenIdRule, tokenIdItem)
	}

	logs, sub, err := _DropperV3Facet.contract.FilterLogs(opts, "DropCreated", tokenTypeRule, tokenAddressRule, tokenIdRule)
	if err != nil {
		return nil, err
	}
	return &DropperV3FacetDropCreatedIterator{contract: _DropperV3Facet.contract, event: "DropCreated", logs: logs, sub: sub}, nil
}

// WatchDropCreated is a free log subscription operation binding the contract event 0x2eb9d2fbe3689cc1caa714232381054a6bd883cc598e66e077f8235c8ee2433f.
//
// Solidity: event DropCreated(uint256 dropId, uint256 indexed tokenType, address indexed tokenAddress, uint256 indexed tokenId, uint256 amount, uint256 maxNumberOfTokens)
func (_DropperV3Facet *DropperV3FacetFilterer) WatchDropCreated(opts *bind.WatchOpts, sink chan<- *DropperV3FacetDropCreated, tokenType []*big.Int, tokenAddress []common.Address, tokenId []*big.Int) (event.Subscription, error) {

	var tokenTypeRule []interface{}
	for _, tokenTypeItem := range tokenType {
		tokenTypeRule = append(tokenTypeRule, tokenTypeItem)
	}
	var tokenAddressRule []interface{}
	for _, tokenAddressItem := range tokenAddress {
		tokenAddressRule = append(tokenAddressRule, tokenAddressItem)
	}
	var tokenIdRule []interface{}
	for _, tokenIdItem := range tokenId {
		tokenIdRule = append(tokenIdRule, tokenIdItem)
	}

	logs, sub, err := _DropperV3Facet.contract.WatchLogs(opts, "DropCreated", tokenTypeRule, tokenAddressRule, tokenIdRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(DropperV3FacetDropCreated)
				if err := _DropperV3Facet.contract.UnpackLog(event, "DropCreated", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseDropCreated is a log parse operation binding the contract event 0x2eb9d2fbe3689cc1caa714232381054a6bd883cc598e66e077f8235c8ee2433f.
//
// Solidity: event DropCreated(uint256 dropId, uint256 indexed tokenType, address indexed tokenAddress, uint256 indexed tokenId, uint256 amount, uint256 maxNumberOfTokens)
func (_DropperV3Facet *DropperV3FacetFilterer) ParseDropCreated(log types.Log) (*DropperV3FacetDropCreated, error) {
	event := new(DropperV3FacetDropCreated)
	if err := _DropperV3Facet.contract.UnpackLog(event, "DropCreated", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// DropperV3FacetDropMaxTokensChangedIterator is returned from FilterDropMaxTokensChanged and is used to iterate over the raw logs and unpacked data for DropMaxTokensChanged events raised by the DropperV3Facet contract.
type DropperV3FacetDropMaxTokensChangedIterator struct {
	Event *DropperV3FacetDropMaxTokensChanged // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *DropperV3FacetDropMaxTokensChangedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(DropperV3FacetDropMaxTokensChanged)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(DropperV3FacetDropMaxTokensChanged)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *DropperV3FacetDropMaxTokensChangedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *DropperV3FacetDropMaxTokensChangedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// DropperV3FacetDropMaxTokensChanged represents a DropMaxTokensChanged event raised by the DropperV3Facet contract.
type DropperV3FacetDropMaxTokensChanged struct {
	DropId            *big.Int
	MaxNumberOfTokens *big.Int
	Raw               types.Log // Blockchain specific contextual infos
}

// FilterDropMaxTokensChanged is a free log retrieval operation binding the contract event 0xe0c9d5fcd78a19a9f7eeef2aa12769583ba7e146f86a49d9cd06111dfe53891b.
//
// Solidity: event DropMaxTokensChanged(uint256 indexed dropId, uint256 maxNumberOfTokens)
func (_DropperV3Facet *DropperV3FacetFilterer) FilterDropMaxTokensChanged(opts *bind.FilterOpts, dropId []*big.Int) (*DropperV3FacetDropMaxTokensChangedIterator, error) {

	var dropIdRule []interface{}
	for _, dropIdItem := range dropId {
		dropIdRule = append(dropIdRule, dropIdItem)
	}

	logs, sub, err := _DropperV3Facet.contract.FilterLogs(opts, "DropMaxTokensChanged", dropIdRule)
	if err != nil {
		return nil, err
	}
	return &DropperV3FacetDropMaxTokensChangedIterator{contract: _DropperV3Facet.contract, event: "DropMaxTokensChanged", logs: logs, sub: sub}, nil
}

// WatchDropMaxTokensChanged is a free log subscription operation binding the contract event 0xe0c9d5fcd78a19a9f7eeef2aa12769583ba7e146f86a49d9cd06111dfe53891b.
//
// Solidity: event DropMaxTokensChanged(uint256 indexed dropId, uint256 maxNumberOfTokens)
func (_DropperV3Facet *DropperV3FacetFilterer) WatchDropMaxTokensChanged(opts *bind.WatchOpts, sink chan<- *DropperV3FacetDropMaxTokensChanged, dropId []*big.Int) (event.Subscription, error) {

	var dropIdRule []interface{}
	for _, dropIdItem := range dropId {
		dropIdRule = append(dropIdRule, dropIdItem)
	}

	logs, sub, err := _DropperV3Facet.contract.WatchLogs(opts, "DropMaxTokensChanged", dropIdRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(DropperV3FacetDropMaxTokensChanged)
				if err := _DropperV3Facet.contract.UnpackLog(event, "DropMaxTokensChanged", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseDropMaxTokensChanged is a log parse operation binding the contract event 0xe0c9d5fcd78a19a9f7eeef2aa12769583ba7e146f86a49d9cd06111dfe53891b.
//
// Solidity: event DropMaxTokensChanged(uint256 indexed dropId, uint256 maxNumberOfTokens)
func (_DropperV3Facet *DropperV3FacetFilterer) ParseDropMaxTokensChanged(log types.Log) (*DropperV3FacetDropMaxTokensChanged, error) {
	event := new(DropperV3FacetDropMaxTokensChanged)
	if err := _DropperV3Facet.contract.UnpackLog(event, "DropMaxTokensChanged", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// DropperV3FacetDropStatusChangedIterator is returned from FilterDropStatusChanged and is used to iterate over the raw logs and unpacked data for DropStatusChanged events raised by the DropperV3Facet contract.
type DropperV3FacetDropStatusChangedIterator struct {
	Event *DropperV3FacetDropStatusChanged // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *DropperV3FacetDropStatusChangedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(DropperV3FacetDropStatusChanged)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(DropperV3FacetDropStatusChanged)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *DropperV3FacetDropStatusChangedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *DropperV3FacetDropStatusChangedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// DropperV3FacetDropStatusChanged represents a DropStatusChanged event raised by the DropperV3Facet contract.
type DropperV3FacetDropStatusChanged struct {
	DropId *big.Int
	Status bool
	Raw    types.Log // Blockchain specific contextual infos
}

// FilterDropStatusChanged is a free log retrieval operation binding the contract event 0x3ee2b91473c6d16cdece6fe4bf67ac9bd77cfe40005be2ff0686cc4ac87d3b6d.
//
// Solidity: event DropStatusChanged(uint256 indexed dropId, bool status)
func (_DropperV3Facet *DropperV3FacetFilterer) FilterDropStatusChanged(opts *bind.FilterOpts, dropId []*big.Int) (*DropperV3FacetDropStatusChangedIterator, error) {

	var dropIdRule []interface{}
	for _, dropIdItem := range dropId {
		dropIdRule = append(dropIdRule, dropIdItem)
	}

	logs, sub, err := _DropperV3Facet.contract.FilterLogs(opts, "DropStatusChanged", dropIdRule)
	if err != nil {
		return nil, err
	}
	return &DropperV3FacetDropStatusChangedIterator{contract: _DropperV3Facet.contract, event: "DropStatusChanged", logs: logs, sub: sub}, nil
}

// WatchDropStatusChanged is a free log subscription operation binding the contract event 0x3ee2b91473c6d16cdece6fe4bf67ac9bd77cfe40005be2ff0686cc4ac87d3b6d.
//
// Solidity: event DropStatusChanged(uint256 indexed dropId, bool status)
func (_DropperV3Facet *DropperV3FacetFilterer) WatchDropStatusChanged(opts *bind.WatchOpts, sink chan<- *DropperV3FacetDropStatusChanged, dropId []*big.Int) (event.Subscription, error) {

	var dropIdRule []interface{}
	for _, dropIdItem := range dropId {
		dropIdRule = append(dropIdRule, dropIdItem)
	}

	logs, sub, err := _DropperV3Facet.contract.WatchLogs(opts, "DropStatusChanged", dropIdRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(DropperV3FacetDropStatusChanged)
				if err := _DropperV3Facet.contract.UnpackLog(event, "DropStatusChanged", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseDropStatusChanged is a log parse operation binding the contract event 0x3ee2b91473c6d16cdece6fe4bf67ac9bd77cfe40005be2ff0686cc4ac87d3b6d.
//
// Solidity: event DropStatusChanged(uint256 indexed dropId, bool status)
func (_DropperV3Facet *DropperV3FacetFilterer) ParseDropStatusChanged(log types.Log) (*DropperV3FacetDropStatusChanged, error) {
	event := new(DropperV3FacetDropStatusChanged)
	if err := _DropperV3Facet.contract.UnpackLog(event, "DropStatusChanged", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// DropperV3FacetDropURIChangedIterator is returned from FilterDropURIChanged and is used to iterate over the raw logs and unpacked data for DropURIChanged events raised by the DropperV3Facet contract.
type DropperV3FacetDropURIChangedIterator struct {
	Event *DropperV3FacetDropURIChanged // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *DropperV3FacetDropURIChangedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(DropperV3FacetDropURIChanged)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(DropperV3FacetDropURIChanged)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *DropperV3FacetDropURIChangedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *DropperV3FacetDropURIChangedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// DropperV3FacetDropURIChanged represents a DropURIChanged event raised by the DropperV3Facet contract.
type DropperV3FacetDropURIChanged struct {
	DropId *big.Int
	Uri    string
	Raw    types.Log // Blockchain specific contextual infos
}

// FilterDropURIChanged is a free log retrieval operation binding the contract event 0xcd3ee26a2615347956621c670708428a80143029dafa18a3883ad18189d537bf.
//
// Solidity: event DropURIChanged(uint256 indexed dropId, string uri)
func (_DropperV3Facet *DropperV3FacetFilterer) FilterDropURIChanged(opts *bind.FilterOpts, dropId []*big.Int) (*DropperV3FacetDropURIChangedIterator, error) {

	var dropIdRule []interface{}
	for _, dropIdItem := range dropId {
		dropIdRule = append(dropIdRule, dropIdItem)
	}

	logs, sub, err := _DropperV3Facet.contract.FilterLogs(opts, "DropURIChanged", dropIdRule)
	if err != nil {
		return nil, err
	}
	return &DropperV3FacetDropURIChangedIterator{contract: _DropperV3Facet.contract, event: "DropURIChanged", logs: logs, sub: sub}, nil
}

// WatchDropURIChanged is a free log subscription operation binding the contract event 0xcd3ee26a2615347956621c670708428a80143029dafa18a3883ad18189d537bf.
//
// Solidity: event DropURIChanged(uint256 indexed dropId, string uri)
func (_DropperV3Facet *DropperV3FacetFilterer) WatchDropURIChanged(opts *bind.WatchOpts, sink chan<- *DropperV3FacetDropURIChanged, dropId []*big.Int) (event.Subscription, error) {

	var dropIdRule []interface{}
	for _, dropIdItem := range dropId {
		dropIdRule = append(dropIdRule, dropIdItem)
	}

	logs, sub, err := _DropperV3Facet.contract.WatchLogs(opts, "DropURIChanged", dropIdRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(DropperV3FacetDropURIChanged)
				if err := _DropperV3Facet.contract.UnpackLog(event, "DropURIChanged", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseDropURIChanged is a log parse operation binding the contract event 0xcd3ee26a2615347956621c670708428a80143029dafa18a3883ad18189d537bf.
//
// Solidity: event DropURIChanged(uint256 indexed dropId, string uri)
func (_DropperV3Facet *DropperV3FacetFilterer) ParseDropURIChanged(log types.Log) (*DropperV3FacetDropURIChanged, error) {
	event := new(DropperV3FacetDropURIChanged)
	if err := _DropperV3Facet.contract.UnpackLog(event, "DropURIChanged", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// DropperV3FacetWithdrawalIterator is returned from FilterWithdrawal and is used to iterate over the raw logs and unpacked data for Withdrawal events raised by the DropperV3Facet contract.
type DropperV3FacetWithdrawalIterator struct {
	Event *DropperV3FacetWithdrawal // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *DropperV3FacetWithdrawalIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(DropperV3FacetWithdrawal)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(DropperV3FacetWithdrawal)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *DropperV3FacetWithdrawalIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *DropperV3FacetWithdrawalIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// DropperV3FacetWithdrawal represents a Withdrawal event raised by the DropperV3Facet contract.
type DropperV3FacetWithdrawal struct {
	Recipient    common.Address
	TokenType    *big.Int
	TokenAddress common.Address
	TokenId      *big.Int
	Amount       *big.Int
	Raw          types.Log // Blockchain specific contextual infos
}

// FilterWithdrawal is a free log retrieval operation binding the contract event 0xd1dec43cb733ef30734a816d655b84537e755d9fab510f7dd9eb6a6bd0b6eb73.
//
// Solidity: event Withdrawal(address recipient, uint256 indexed tokenType, address indexed tokenAddress, uint256 indexed tokenId, uint256 amount)
func (_DropperV3Facet *DropperV3FacetFilterer) FilterWithdrawal(opts *bind.FilterOpts, tokenType []*big.Int, tokenAddress []common.Address, tokenId []*big.Int) (*DropperV3FacetWithdrawalIterator, error) {

	var tokenTypeRule []interface{}
	for _, tokenTypeItem := range tokenType {
		tokenTypeRule = append(tokenTypeRule, tokenTypeItem)
	}
	var tokenAddressRule []interface{}
	for _, tokenAddressItem := range tokenAddress {
		tokenAddressRule = append(tokenAddressRule, tokenAddressItem)
	}
	var tokenIdRule []interface{}
	for _, tokenIdItem := range tokenId {
		tokenIdRule = append(tokenIdRule, tokenIdItem)
	}

	logs, sub, err := _DropperV3Facet.contract.FilterLogs(opts, "Withdrawal", tokenTypeRule, tokenAddressRule, tokenIdRule)
	if err != nil {
		return nil, err
	}
	return &DropperV3FacetWithdrawalIterator{contract: _DropperV3Facet.contract, event: "Withdrawal", logs: logs, sub: sub}, nil
}

// WatchWithdrawal is a free log subscription operation binding the contract event 0xd1dec43cb733ef30734a816d655b84537e755d9fab510f7dd9eb6a6bd0b6eb73.
//
// Solidity: event Withdrawal(address recipient, uint256 indexed tokenType, address indexed tokenAddress, uint256 indexed tokenId, uint256 amount)
func (_DropperV3Facet *DropperV3FacetFilterer) WatchWithdrawal(opts *bind.WatchOpts, sink chan<- *DropperV3FacetWithdrawal, tokenType []*big.Int, tokenAddress []common.Address, tokenId []*big.Int) (event.Subscription, error) {

	var tokenTypeRule []interface{}
	for _, tokenTypeItem := range tokenType {
		tokenTypeRule = append(tokenTypeRule, tokenTypeItem)
	}
	var tokenAddressRule []interface{}
	for _, tokenAddressItem := range tokenAddress {
		tokenAddressRule = append(tokenAddressRule, tokenAddressItem)
	}
	var tokenIdRule []interface{}
	for _, tokenIdItem := range tokenId {
		tokenIdRule = append(tokenIdRule, tokenIdItem)
	}

	logs, sub, err := _DropperV3Facet.contract.WatchLogs(opts, "Withdrawal", tokenTypeRule, tokenAddressRule, tokenIdRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(DropperV3FacetWithdrawal)
				if err := _DropperV3Facet.contract.UnpackLog(event, "Withdrawal", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseWithdrawal is a log parse operation binding the contract event 0xd1dec43cb733ef30734a816d655b84537e755d9fab510f7dd9eb6a6bd0b6eb73.
//
// Solidity: event Withdrawal(address recipient, uint256 indexed tokenType, address indexed tokenAddress, uint256 indexed tokenId, uint256 amount)
func (_DropperV3Facet *DropperV3FacetFilterer) ParseWithdrawal(log types.Log) (*DropperV3FacetWithdrawal, error) {
	event := new(DropperV3FacetWithdrawal)
	if err := _DropperV3Facet.contract.UnpackLog(event, "Withdrawal", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

func CreateDropperV3FacetDeploymentCommand() *cobra.Command {
	var keyfile, nonce, password, value, gasPrice, maxFeePerGas, maxPriorityFeePerGas, rpc string
	var gasLimit uint64
	var simulate bool
	var timeout uint

	cmd := &cobra.Command{
		Use:   "deploy",
		Short: "Deploy a new DropperV3Facet contract",
		PreRunE: func(cmd *cobra.Command, args []string) error {
			if keyfile == "" {
				return fmt.Errorf("--keystore not specified (this should be a path to an Ethereum account keystore file)")
			}

			return nil
		},
		RunE: func(cmd *cobra.Command, args []string) error {
			client, clientErr := NewClient(rpc)
			if clientErr != nil {
				return clientErr
			}

			key, keyErr := KeyFromFile(keyfile, password)
			if keyErr != nil {
				return keyErr
			}

			chainIDCtx, cancelChainIDCtx := NewChainContext(timeout)
			defer cancelChainIDCtx()
			chainID, chainIDErr := client.ChainID(chainIDCtx)
			if chainIDErr != nil {
				return chainIDErr
			}

			transactionOpts, transactionOptsErr := bind.NewKeyedTransactorWithChainID(key.PrivateKey, chainID)
			if transactionOptsErr != nil {
				return transactionOptsErr
			}

			SetTransactionParametersFromArgs(transactionOpts, nonce, value, gasPrice, maxFeePerGas, maxPriorityFeePerGas, gasLimit, simulate)

			address, deploymentTransaction, _, deploymentErr := DeployDropperV3Facet(
				transactionOpts,
				client,
			)
			if deploymentErr != nil {
				return deploymentErr
			}

			cmd.Printf("Transaction hash: %s\nContract address: %s\n", deploymentTransaction.Hash().Hex(), address.Hex())
			if transactionOpts.NoSend {
				estimationMessage := ethereum.CallMsg{
					From: transactionOpts.From,
					Data: deploymentTransaction.Data(),
				}

				gasEstimationCtx, cancelGasEstimationCtx := NewChainContext(timeout)
				defer cancelGasEstimationCtx()

				gasEstimate, gasEstimateErr := client.EstimateGas(gasEstimationCtx, estimationMessage)
				if gasEstimateErr != nil {
					return gasEstimateErr
				}

				transactionBinary, transactionBinaryErr := deploymentTransaction.MarshalBinary()
				if transactionBinaryErr != nil {
					return transactionBinaryErr
				}
				transactionBinaryHex := hex.EncodeToString(transactionBinary)

				cmd.Printf("Transaction: %s\nEstimated gas: %d\n", transactionBinaryHex, gasEstimate)
			} else {
				cmd.Println("Transaction submitted")
			}

			return nil
		},
	}

	cmd.Flags().StringVar(&rpc, "rpc", "", "URL of the JSONRPC API to use")
	cmd.Flags().StringVar(&keyfile, "keyfile", "", "Path to the keystore file to use for the transaction")
	cmd.Flags().StringVar(&password, "password", "", "Password to use to unlock the keystore (if not specified, you will be prompted for the password when the command executes)")
	cmd.Flags().StringVar(&nonce, "nonce", "", "Nonce to use for the transaction")
	cmd.Flags().StringVar(&value, "value", "", "Value to send with the transaction")
	cmd.Flags().StringVar(&gasPrice, "gas-price", "", "Gas price to use for the transaction")
	cmd.Flags().StringVar(&maxFeePerGas, "max-fee-per-gas", "", "Maximum fee per gas to use for the (EIP-1559) transaction")
	cmd.Flags().StringVar(&maxPriorityFeePerGas, "max-priority-fee-per-gas", "", "Maximum priority fee per gas to use for the (EIP-1559) transaction")
	cmd.Flags().Uint64Var(&gasLimit, "gas-limit", 0, "Gas limit for the transaction")
	cmd.Flags().BoolVar(&simulate, "simulate", false, "Simulate the transaction without sending it")
	cmd.Flags().UintVar(&timeout, "timeout", 60, "Timeout (in seconds) for interactions with the JSONRPC API")

	return cmd
}

func CreateAdminTerminusInfoCommand() *cobra.Command {
	var contractAddressRaw, rpc string
	var contractAddress common.Address
	var timeout uint

	var blockNumberRaw, fromAddressRaw string
	var pending bool

	var capture0 common.Address
	var capture1 *big.Int

	cmd := &cobra.Command{
		Use:   "admin-terminus-info",
		Short: "Call the AdminTerminusInfo view method on a DropperV3Facet contract",
		PreRunE: func(cmd *cobra.Command, args []string) error {
			if contractAddressRaw == "" {
				return fmt.Errorf("--contract not specified")
			} else if !common.IsHexAddress(contractAddressRaw) {
				return fmt.Errorf("--contract is not a valid Ethereum address")
			}
			contractAddress = common.HexToAddress(contractAddressRaw)

			return nil
		},
		RunE: func(cmd *cobra.Command, args []string) error {
			client, clientErr := NewClient(rpc)
			if clientErr != nil {
				return clientErr
			}

			contract, contractErr := NewDropperV3Facet(contractAddress, client)
			if contractErr != nil {
				return contractErr
			}

			callOpts := bind.CallOpts{}
			SetCallParametersFromArgs(&callOpts, pending, fromAddressRaw, blockNumberRaw)

			session := DropperV3FacetCallerSession{
				Contract: &contract.DropperV3FacetCaller,
				CallOpts: callOpts,
			}

			var callErr error
			capture0, capture1, callErr = session.AdminTerminusInfo()
			if callErr != nil {
				return callErr
			}

			cmd.Printf("0: %s\n", capture0.Hex())
			cmd.Printf("1: %s\n", capture1.String())

			return nil
		},
	}

	cmd.Flags().StringVar(&rpc, "rpc", "", "URL of the JSONRPC API to use")
	cmd.Flags().StringVar(&blockNumberRaw, "block", "", "Block number at which to call the view method")
	cmd.Flags().BoolVar(&pending, "pending", false, "Set this flag if it's ok to call the view method against pending state")
	cmd.Flags().UintVar(&timeout, "timeout", 60, "Timeout (in seconds) for interactions with the JSONRPC API")
	cmd.Flags().StringVar(&contractAddressRaw, "contract", "", "Address of the contract to interact with")
	cmd.Flags().StringVar(&fromAddressRaw, "from", "", "Optional address for caller of the view method")

	return cmd
}
func CreateClaimMessageHashCommand() *cobra.Command {
	var contractAddressRaw, rpc string
	var contractAddress common.Address
	var timeout uint

	var blockNumberRaw, fromAddressRaw string
	var pending bool

	var dropId *big.Int
	var dropIdRaw string
	var requestID *big.Int
	var requestIDRaw string
	var claimant common.Address
	var claimantRaw string
	var blockDeadline *big.Int
	var blockDeadlineRaw string
	var amount *big.Int
	var amountRaw string

	var capture0 [32]byte

	cmd := &cobra.Command{
		Use:   "claim-message-hash",
		Short: "Call the ClaimMessageHash view method on a DropperV3Facet contract",
		PreRunE: func(cmd *cobra.Command, args []string) error {
			if contractAddressRaw == "" {
				return fmt.Errorf("--contract not specified")
			} else if !common.IsHexAddress(contractAddressRaw) {
				return fmt.Errorf("--contract is not a valid Ethereum address")
			}
			contractAddress = common.HexToAddress(contractAddressRaw)

			if dropIdRaw == "" {
				return fmt.Errorf("--drop-id argument not specified")
			}
			dropId = new(big.Int)
			dropId.SetString(dropIdRaw, 0)

			if requestIDRaw == "" {
				return fmt.Errorf("--request-id argument not specified")
			}
			requestID = new(big.Int)
			requestID.SetString(requestIDRaw, 0)

			if claimantRaw == "" {
				return fmt.Errorf("--claimant argument not specified")
			} else if !common.IsHexAddress(claimantRaw) {
				return fmt.Errorf("--claimant argument is not a valid Ethereum address")
			}
			claimant = common.HexToAddress(claimantRaw)

			if blockDeadlineRaw == "" {
				return fmt.Errorf("--block-deadline argument not specified")
			}
			blockDeadline = new(big.Int)
			blockDeadline.SetString(blockDeadlineRaw, 0)

			if amountRaw == "" {
				return fmt.Errorf("--amount argument not specified")
			}
			amount = new(big.Int)
			amount.SetString(amountRaw, 0)

			return nil
		},
		RunE: func(cmd *cobra.Command, args []string) error {
			client, clientErr := NewClient(rpc)
			if clientErr != nil {
				return clientErr
			}

			contract, contractErr := NewDropperV3Facet(contractAddress, client)
			if contractErr != nil {
				return contractErr
			}

			callOpts := bind.CallOpts{}
			SetCallParametersFromArgs(&callOpts, pending, fromAddressRaw, blockNumberRaw)

			session := DropperV3FacetCallerSession{
				Contract: &contract.DropperV3FacetCaller,
				CallOpts: callOpts,
			}

			var callErr error
			capture0, callErr = session.ClaimMessageHash(
				dropId,
				requestID,
				claimant,
				blockDeadline,
				amount,
			)
			if callErr != nil {
				return callErr
			}

			cmd.Printf("0: %v\n", capture0)

			return nil
		},
	}

	cmd.Flags().StringVar(&rpc, "rpc", "", "URL of the JSONRPC API to use")
	cmd.Flags().StringVar(&blockNumberRaw, "block", "", "Block number at which to call the view method")
	cmd.Flags().BoolVar(&pending, "pending", false, "Set this flag if it's ok to call the view method against pending state")
	cmd.Flags().UintVar(&timeout, "timeout", 60, "Timeout (in seconds) for interactions with the JSONRPC API")
	cmd.Flags().StringVar(&contractAddressRaw, "contract", "", "Address of the contract to interact with")
	cmd.Flags().StringVar(&fromAddressRaw, "from", "", "Optional address for caller of the view method")

	cmd.Flags().StringVar(&dropIdRaw, "drop-id", "", "drop-id argument")
	cmd.Flags().StringVar(&requestIDRaw, "request-id", "", "request-id argument")
	cmd.Flags().StringVar(&claimantRaw, "claimant", "", "claimant argument (common.Address)")
	cmd.Flags().StringVar(&blockDeadlineRaw, "block-deadline", "", "block-deadline argument")
	cmd.Flags().StringVar(&amountRaw, "amount", "", "amount argument")

	return cmd
}
func CreateClaimStatusCommand() *cobra.Command {
	var contractAddressRaw, rpc string
	var contractAddress common.Address
	var timeout uint

	var blockNumberRaw, fromAddressRaw string
	var pending bool

	var dropId *big.Int
	var dropIdRaw string
	var requestId *big.Int
	var requestIdRaw string

	var capture0 bool

	cmd := &cobra.Command{
		Use:   "claim-status",
		Short: "Call the ClaimStatus view method on a DropperV3Facet contract",
		PreRunE: func(cmd *cobra.Command, args []string) error {
			if contractAddressRaw == "" {
				return fmt.Errorf("--contract not specified")
			} else if !common.IsHexAddress(contractAddressRaw) {
				return fmt.Errorf("--contract is not a valid Ethereum address")
			}
			contractAddress = common.HexToAddress(contractAddressRaw)

			if dropIdRaw == "" {
				return fmt.Errorf("--drop-id argument not specified")
			}
			dropId = new(big.Int)
			dropId.SetString(dropIdRaw, 0)

			if requestIdRaw == "" {
				return fmt.Errorf("--request-id argument not specified")
			}
			requestId = new(big.Int)
			requestId.SetString(requestIdRaw, 0)

			return nil
		},
		RunE: func(cmd *cobra.Command, args []string) error {
			client, clientErr := NewClient(rpc)
			if clientErr != nil {
				return clientErr
			}

			contract, contractErr := NewDropperV3Facet(contractAddress, client)
			if contractErr != nil {
				return contractErr
			}

			callOpts := bind.CallOpts{}
			SetCallParametersFromArgs(&callOpts, pending, fromAddressRaw, blockNumberRaw)

			session := DropperV3FacetCallerSession{
				Contract: &contract.DropperV3FacetCaller,
				CallOpts: callOpts,
			}

			var callErr error
			capture0, callErr = session.ClaimStatus(
				dropId,
				requestId,
			)
			if callErr != nil {
				return callErr
			}

			cmd.Printf("0: %t\n", capture0)

			return nil
		},
	}

	cmd.Flags().StringVar(&rpc, "rpc", "", "URL of the JSONRPC API to use")
	cmd.Flags().StringVar(&blockNumberRaw, "block", "", "Block number at which to call the view method")
	cmd.Flags().BoolVar(&pending, "pending", false, "Set this flag if it's ok to call the view method against pending state")
	cmd.Flags().UintVar(&timeout, "timeout", 60, "Timeout (in seconds) for interactions with the JSONRPC API")
	cmd.Flags().StringVar(&contractAddressRaw, "contract", "", "Address of the contract to interact with")
	cmd.Flags().StringVar(&fromAddressRaw, "from", "", "Optional address for caller of the view method")

	cmd.Flags().StringVar(&dropIdRaw, "drop-id", "", "drop-id argument")
	cmd.Flags().StringVar(&requestIdRaw, "request-id", "", "request-id argument")

	return cmd
}
func CreateDropStatusCommand() *cobra.Command {
	var contractAddressRaw, rpc string
	var contractAddress common.Address
	var timeout uint

	var blockNumberRaw, fromAddressRaw string
	var pending bool

	var dropId *big.Int
	var dropIdRaw string

	var capture0 bool

	cmd := &cobra.Command{
		Use:   "drop-status",
		Short: "Call the DropStatus view method on a DropperV3Facet contract",
		PreRunE: func(cmd *cobra.Command, args []string) error {
			if contractAddressRaw == "" {
				return fmt.Errorf("--contract not specified")
			} else if !common.IsHexAddress(contractAddressRaw) {
				return fmt.Errorf("--contract is not a valid Ethereum address")
			}
			contractAddress = common.HexToAddress(contractAddressRaw)

			if dropIdRaw == "" {
				return fmt.Errorf("--drop-id argument not specified")
			}
			dropId = new(big.Int)
			dropId.SetString(dropIdRaw, 0)

			return nil
		},
		RunE: func(cmd *cobra.Command, args []string) error {
			client, clientErr := NewClient(rpc)
			if clientErr != nil {
				return clientErr
			}

			contract, contractErr := NewDropperV3Facet(contractAddress, client)
			if contractErr != nil {
				return contractErr
			}

			callOpts := bind.CallOpts{}
			SetCallParametersFromArgs(&callOpts, pending, fromAddressRaw, blockNumberRaw)

			session := DropperV3FacetCallerSession{
				Contract: &contract.DropperV3FacetCaller,
				CallOpts: callOpts,
			}

			var callErr error
			capture0, callErr = session.DropStatus(
				dropId,
			)
			if callErr != nil {
				return callErr
			}

			cmd.Printf("0: %t\n", capture0)

			return nil
		},
	}

	cmd.Flags().StringVar(&rpc, "rpc", "", "URL of the JSONRPC API to use")
	cmd.Flags().StringVar(&blockNumberRaw, "block", "", "Block number at which to call the view method")
	cmd.Flags().BoolVar(&pending, "pending", false, "Set this flag if it's ok to call the view method against pending state")
	cmd.Flags().UintVar(&timeout, "timeout", 60, "Timeout (in seconds) for interactions with the JSONRPC API")
	cmd.Flags().StringVar(&contractAddressRaw, "contract", "", "Address of the contract to interact with")
	cmd.Flags().StringVar(&fromAddressRaw, "from", "", "Optional address for caller of the view method")

	cmd.Flags().StringVar(&dropIdRaw, "drop-id", "", "drop-id argument")

	return cmd
}
func CreateDropUriCommand() *cobra.Command {
	var contractAddressRaw, rpc string
	var contractAddress common.Address
	var timeout uint

	var blockNumberRaw, fromAddressRaw string
	var pending bool

	var dropId *big.Int
	var dropIdRaw string

	var capture0 string

	cmd := &cobra.Command{
		Use:   "drop-uri",
		Short: "Call the DropUri view method on a DropperV3Facet contract",
		PreRunE: func(cmd *cobra.Command, args []string) error {
			if contractAddressRaw == "" {
				return fmt.Errorf("--contract not specified")
			} else if !common.IsHexAddress(contractAddressRaw) {
				return fmt.Errorf("--contract is not a valid Ethereum address")
			}
			contractAddress = common.HexToAddress(contractAddressRaw)

			if dropIdRaw == "" {
				return fmt.Errorf("--drop-id argument not specified")
			}
			dropId = new(big.Int)
			dropId.SetString(dropIdRaw, 0)

			return nil
		},
		RunE: func(cmd *cobra.Command, args []string) error {
			client, clientErr := NewClient(rpc)
			if clientErr != nil {
				return clientErr
			}

			contract, contractErr := NewDropperV3Facet(contractAddress, client)
			if contractErr != nil {
				return contractErr
			}

			callOpts := bind.CallOpts{}
			SetCallParametersFromArgs(&callOpts, pending, fromAddressRaw, blockNumberRaw)

			session := DropperV3FacetCallerSession{
				Contract: &contract.DropperV3FacetCaller,
				CallOpts: callOpts,
			}

			var callErr error
			capture0, callErr = session.DropUri(
				dropId,
			)
			if callErr != nil {
				return callErr
			}

			cmd.Printf("0: %s\n", capture0)

			return nil
		},
	}

	cmd.Flags().StringVar(&rpc, "rpc", "", "URL of the JSONRPC API to use")
	cmd.Flags().StringVar(&blockNumberRaw, "block", "", "Block number at which to call the view method")
	cmd.Flags().BoolVar(&pending, "pending", false, "Set this flag if it's ok to call the view method against pending state")
	cmd.Flags().UintVar(&timeout, "timeout", 60, "Timeout (in seconds) for interactions with the JSONRPC API")
	cmd.Flags().StringVar(&contractAddressRaw, "contract", "", "Address of the contract to interact with")
	cmd.Flags().StringVar(&fromAddressRaw, "from", "", "Optional address for caller of the view method")

	cmd.Flags().StringVar(&dropIdRaw, "drop-id", "", "drop-id argument")

	return cmd
}
func CreateDropperVersionCommand() *cobra.Command {
	var contractAddressRaw, rpc string
	var contractAddress common.Address
	var timeout uint

	var blockNumberRaw, fromAddressRaw string
	var pending bool

	var capture0 string
	var capture1 string

	cmd := &cobra.Command{
		Use:   "dropper-version",
		Short: "Call the DropperVersion view method on a DropperV3Facet contract",
		PreRunE: func(cmd *cobra.Command, args []string) error {
			if contractAddressRaw == "" {
				return fmt.Errorf("--contract not specified")
			} else if !common.IsHexAddress(contractAddressRaw) {
				return fmt.Errorf("--contract is not a valid Ethereum address")
			}
			contractAddress = common.HexToAddress(contractAddressRaw)

			return nil
		},
		RunE: func(cmd *cobra.Command, args []string) error {
			client, clientErr := NewClient(rpc)
			if clientErr != nil {
				return clientErr
			}

			contract, contractErr := NewDropperV3Facet(contractAddress, client)
			if contractErr != nil {
				return contractErr
			}

			callOpts := bind.CallOpts{}
			SetCallParametersFromArgs(&callOpts, pending, fromAddressRaw, blockNumberRaw)

			session := DropperV3FacetCallerSession{
				Contract: &contract.DropperV3FacetCaller,
				CallOpts: callOpts,
			}

			var callErr error
			capture0, capture1, callErr = session.DropperVersion()
			if callErr != nil {
				return callErr
			}

			cmd.Printf("0: %s\n", capture0)
			cmd.Printf("1: %s\n", capture1)

			return nil
		},
	}

	cmd.Flags().StringVar(&rpc, "rpc", "", "URL of the JSONRPC API to use")
	cmd.Flags().StringVar(&blockNumberRaw, "block", "", "Block number at which to call the view method")
	cmd.Flags().BoolVar(&pending, "pending", false, "Set this flag if it's ok to call the view method against pending state")
	cmd.Flags().UintVar(&timeout, "timeout", 60, "Timeout (in seconds) for interactions with the JSONRPC API")
	cmd.Flags().StringVar(&contractAddressRaw, "contract", "", "Address of the contract to interact with")
	cmd.Flags().StringVar(&fromAddressRaw, "from", "", "Optional address for caller of the view method")

	return cmd
}
func CreateGetDropCommand() *cobra.Command {
	var contractAddressRaw, rpc string
	var contractAddress common.Address
	var timeout uint

	var blockNumberRaw, fromAddressRaw string
	var pending bool

	var dropId *big.Int
	var dropIdRaw string

	var capture0 DroppableToken

	cmd := &cobra.Command{
		Use:   "get-drop",
		Short: "Call the GetDrop view method on a DropperV3Facet contract",
		PreRunE: func(cmd *cobra.Command, args []string) error {
			if contractAddressRaw == "" {
				return fmt.Errorf("--contract not specified")
			} else if !common.IsHexAddress(contractAddressRaw) {
				return fmt.Errorf("--contract is not a valid Ethereum address")
			}
			contractAddress = common.HexToAddress(contractAddressRaw)

			if dropIdRaw == "" {
				return fmt.Errorf("--drop-id argument not specified")
			}
			dropId = new(big.Int)
			dropId.SetString(dropIdRaw, 0)

			return nil
		},
		RunE: func(cmd *cobra.Command, args []string) error {
			client, clientErr := NewClient(rpc)
			if clientErr != nil {
				return clientErr
			}

			contract, contractErr := NewDropperV3Facet(contractAddress, client)
			if contractErr != nil {
				return contractErr
			}

			callOpts := bind.CallOpts{}
			SetCallParametersFromArgs(&callOpts, pending, fromAddressRaw, blockNumberRaw)

			session := DropperV3FacetCallerSession{
				Contract: &contract.DropperV3FacetCaller,
				CallOpts: callOpts,
			}

			var callErr error
			capture0, callErr = session.GetDrop(
				dropId,
			)
			if callErr != nil {
				return callErr
			}

			cmd.Printf("0: %v\n", capture0)

			return nil
		},
	}

	cmd.Flags().StringVar(&rpc, "rpc", "", "URL of the JSONRPC API to use")
	cmd.Flags().StringVar(&blockNumberRaw, "block", "", "Block number at which to call the view method")
	cmd.Flags().BoolVar(&pending, "pending", false, "Set this flag if it's ok to call the view method against pending state")
	cmd.Flags().UintVar(&timeout, "timeout", 60, "Timeout (in seconds) for interactions with the JSONRPC API")
	cmd.Flags().StringVar(&contractAddressRaw, "contract", "", "Address of the contract to interact with")
	cmd.Flags().StringVar(&fromAddressRaw, "from", "", "Optional address for caller of the view method")

	cmd.Flags().StringVar(&dropIdRaw, "drop-id", "", "drop-id argument")

	return cmd
}
func CreateGetDropAuthorizationCommand() *cobra.Command {
	var contractAddressRaw, rpc string
	var contractAddress common.Address
	var timeout uint

	var blockNumberRaw, fromAddressRaw string
	var pending bool

	var dropId *big.Int
	var dropIdRaw string

	var capture0 TerminusAuthorization

	cmd := &cobra.Command{
		Use:   "get-drop-authorization",
		Short: "Call the GetDropAuthorization view method on a DropperV3Facet contract",
		PreRunE: func(cmd *cobra.Command, args []string) error {
			if contractAddressRaw == "" {
				return fmt.Errorf("--contract not specified")
			} else if !common.IsHexAddress(contractAddressRaw) {
				return fmt.Errorf("--contract is not a valid Ethereum address")
			}
			contractAddress = common.HexToAddress(contractAddressRaw)

			if dropIdRaw == "" {
				return fmt.Errorf("--drop-id argument not specified")
			}
			dropId = new(big.Int)
			dropId.SetString(dropIdRaw, 0)

			return nil
		},
		RunE: func(cmd *cobra.Command, args []string) error {
			client, clientErr := NewClient(rpc)
			if clientErr != nil {
				return clientErr
			}

			contract, contractErr := NewDropperV3Facet(contractAddress, client)
			if contractErr != nil {
				return contractErr
			}

			callOpts := bind.CallOpts{}
			SetCallParametersFromArgs(&callOpts, pending, fromAddressRaw, blockNumberRaw)

			session := DropperV3FacetCallerSession{
				Contract: &contract.DropperV3FacetCaller,
				CallOpts: callOpts,
			}

			var callErr error
			capture0, callErr = session.GetDropAuthorization(
				dropId,
			)
			if callErr != nil {
				return callErr
			}

			cmd.Printf("0: %v\n", capture0)

			return nil
		},
	}

	cmd.Flags().StringVar(&rpc, "rpc", "", "URL of the JSONRPC API to use")
	cmd.Flags().StringVar(&blockNumberRaw, "block", "", "Block number at which to call the view method")
	cmd.Flags().BoolVar(&pending, "pending", false, "Set this flag if it's ok to call the view method against pending state")
	cmd.Flags().UintVar(&timeout, "timeout", 60, "Timeout (in seconds) for interactions with the JSONRPC API")
	cmd.Flags().StringVar(&contractAddressRaw, "contract", "", "Address of the contract to interact with")
	cmd.Flags().StringVar(&fromAddressRaw, "from", "", "Optional address for caller of the view method")

	cmd.Flags().StringVar(&dropIdRaw, "drop-id", "", "drop-id argument")

	return cmd
}
func CreateNumDropsCommand() *cobra.Command {
	var contractAddressRaw, rpc string
	var contractAddress common.Address
	var timeout uint

	var blockNumberRaw, fromAddressRaw string
	var pending bool

	var capture0 *big.Int

	cmd := &cobra.Command{
		Use:   "num-drops",
		Short: "Call the NumDrops view method on a DropperV3Facet contract",
		PreRunE: func(cmd *cobra.Command, args []string) error {
			if contractAddressRaw == "" {
				return fmt.Errorf("--contract not specified")
			} else if !common.IsHexAddress(contractAddressRaw) {
				return fmt.Errorf("--contract is not a valid Ethereum address")
			}
			contractAddress = common.HexToAddress(contractAddressRaw)

			return nil
		},
		RunE: func(cmd *cobra.Command, args []string) error {
			client, clientErr := NewClient(rpc)
			if clientErr != nil {
				return clientErr
			}

			contract, contractErr := NewDropperV3Facet(contractAddress, client)
			if contractErr != nil {
				return contractErr
			}

			callOpts := bind.CallOpts{}
			SetCallParametersFromArgs(&callOpts, pending, fromAddressRaw, blockNumberRaw)

			session := DropperV3FacetCallerSession{
				Contract: &contract.DropperV3FacetCaller,
				CallOpts: callOpts,
			}

			var callErr error
			capture0, callErr = session.NumDrops()
			if callErr != nil {
				return callErr
			}

			cmd.Printf("0: %s\n", capture0.String())

			return nil
		},
	}

	cmd.Flags().StringVar(&rpc, "rpc", "", "URL of the JSONRPC API to use")
	cmd.Flags().StringVar(&blockNumberRaw, "block", "", "Block number at which to call the view method")
	cmd.Flags().BoolVar(&pending, "pending", false, "Set this flag if it's ok to call the view method against pending state")
	cmd.Flags().UintVar(&timeout, "timeout", 60, "Timeout (in seconds) for interactions with the JSONRPC API")
	cmd.Flags().StringVar(&contractAddressRaw, "contract", "", "Address of the contract to interact with")
	cmd.Flags().StringVar(&fromAddressRaw, "from", "", "Optional address for caller of the view method")

	return cmd
}
func CreateSupportsInterfaceCommand() *cobra.Command {
	var contractAddressRaw, rpc string
	var contractAddress common.Address
	var timeout uint

	var blockNumberRaw, fromAddressRaw string
	var pending bool

	var interfaceId [4]byte
	var interfaceIdRaw string

	var capture0 bool

	cmd := &cobra.Command{
		Use:   "supports-interface",
		Short: "Call the SupportsInterface view method on a DropperV3Facet contract",
		PreRunE: func(cmd *cobra.Command, args []string) error {
			if contractAddressRaw == "" {
				return fmt.Errorf("--contract not specified")
			} else if !common.IsHexAddress(contractAddressRaw) {
				return fmt.Errorf("--contract is not a valid Ethereum address")
			}
			contractAddress = common.HexToAddress(contractAddressRaw)

			var interfaceIdIntermediate []byte

			var interfaceIdIntermediateHexDecodeErr error
			interfaceIdIntermediate, interfaceIdIntermediateHexDecodeErr = hex.DecodeString(interfaceIdRaw)
			if interfaceIdIntermediateHexDecodeErr != nil {
				return interfaceIdIntermediateHexDecodeErr
			}

			copy(interfaceId[:], interfaceIdIntermediate)

			return nil
		},
		RunE: func(cmd *cobra.Command, args []string) error {
			client, clientErr := NewClient(rpc)
			if clientErr != nil {
				return clientErr
			}

			contract, contractErr := NewDropperV3Facet(contractAddress, client)
			if contractErr != nil {
				return contractErr
			}

			callOpts := bind.CallOpts{}
			SetCallParametersFromArgs(&callOpts, pending, fromAddressRaw, blockNumberRaw)

			session := DropperV3FacetCallerSession{
				Contract: &contract.DropperV3FacetCaller,
				CallOpts: callOpts,
			}

			var callErr error
			capture0, callErr = session.SupportsInterface(
				interfaceId,
			)
			if callErr != nil {
				return callErr
			}

			cmd.Printf("0: %t\n", capture0)

			return nil
		},
	}

	cmd.Flags().StringVar(&rpc, "rpc", "", "URL of the JSONRPC API to use")
	cmd.Flags().StringVar(&blockNumberRaw, "block", "", "Block number at which to call the view method")
	cmd.Flags().BoolVar(&pending, "pending", false, "Set this flag if it's ok to call the view method against pending state")
	cmd.Flags().UintVar(&timeout, "timeout", 60, "Timeout (in seconds) for interactions with the JSONRPC API")
	cmd.Flags().StringVar(&contractAddressRaw, "contract", "", "Address of the contract to interact with")
	cmd.Flags().StringVar(&fromAddressRaw, "from", "", "Optional address for caller of the view method")

	cmd.Flags().StringVar(&interfaceIdRaw, "interface-id", "", "interface-id argument ([4]byte)")

	return cmd
}

func CreateBatchClaimCommand() *cobra.Command {
	var keyfile, nonce, password, value, gasPrice, maxFeePerGas, maxPriorityFeePerGas, rpc, contractAddressRaw string
	var gasLimit uint64
	var simulate bool
	var timeout uint
	var contractAddress common.Address

	var dropIDList []*big.Int
	var dropIDListRaw string
	var requestIDList []*big.Int
	var requestIDListRaw string
	var blockDeadlineList []*big.Int
	var blockDeadlineListRaw string
	var amountList []*big.Int
	var amountListRaw string
	var signerList []common.Address
	var signerListRaw string
	var signatureList [][]byte
	var signatureListRaw string

	cmd := &cobra.Command{
		Use:   "batch-claim",
		Short: "Execute the BatchClaim method on a DropperV3Facet contract",
		PreRunE: func(cmd *cobra.Command, args []string) error {
			if keyfile == "" {
				return fmt.Errorf("--keystore not specified")
			}

			if contractAddressRaw == "" {
				return fmt.Errorf("--contract not specified")
			} else if !common.IsHexAddress(contractAddressRaw) {
				return fmt.Errorf("--contract is not a valid Ethereum address")
			}
			contractAddress = common.HexToAddress(contractAddressRaw)

			if dropIDListRaw == "" {
				return fmt.Errorf("--drop-id-list argument not specified")
			} else if strings.HasPrefix(dropIDListRaw, "@") {
				filename := strings.TrimPrefix(dropIDListRaw, "@")
				contents, readErr := os.ReadFile(filename)
				if readErr != nil {
					return readErr
				}
				unmarshalErr := json.Unmarshal(contents, &dropIDList)
				if unmarshalErr != nil {
					return unmarshalErr
				}
			} else {
				unmarshalErr := json.Unmarshal([]byte(dropIDListRaw), &dropIDList)
				if unmarshalErr != nil {
					return unmarshalErr
				}
			}

			if requestIDListRaw == "" {
				return fmt.Errorf("--request-id-list argument not specified")
			} else if strings.HasPrefix(requestIDListRaw, "@") {
				filename := strings.TrimPrefix(requestIDListRaw, "@")
				contents, readErr := os.ReadFile(filename)
				if readErr != nil {
					return readErr
				}
				unmarshalErr := json.Unmarshal(contents, &requestIDList)
				if unmarshalErr != nil {
					return unmarshalErr
				}
			} else {
				unmarshalErr := json.Unmarshal([]byte(requestIDListRaw), &requestIDList)
				if unmarshalErr != nil {
					return unmarshalErr
				}
			}

			if blockDeadlineListRaw == "" {
				return fmt.Errorf("--block-deadline-list argument not specified")
			} else if strings.HasPrefix(blockDeadlineListRaw, "@") {
				filename := strings.TrimPrefix(blockDeadlineListRaw, "@")
				contents, readErr := os.ReadFile(filename)
				if readErr != nil {
					return readErr
				}
				unmarshalErr := json.Unmarshal(contents, &blockDeadlineList)
				if unmarshalErr != nil {
					return unmarshalErr
				}
			} else {
				unmarshalErr := json.Unmarshal([]byte(blockDeadlineListRaw), &blockDeadlineList)
				if unmarshalErr != nil {
					return unmarshalErr
				}
			}

			if amountListRaw == "" {
				return fmt.Errorf("--amount-list argument not specified")
			} else if strings.HasPrefix(amountListRaw, "@") {
				filename := strings.TrimPrefix(amountListRaw, "@")
				contents, readErr := os.ReadFile(filename)
				if readErr != nil {
					return readErr
				}
				unmarshalErr := json.Unmarshal(contents, &amountList)
				if unmarshalErr != nil {
					return unmarshalErr
				}
			} else {
				unmarshalErr := json.Unmarshal([]byte(amountListRaw), &amountList)
				if unmarshalErr != nil {
					return unmarshalErr
				}
			}

			if signerListRaw == "" {
				return fmt.Errorf("--signer-list argument not specified")
			} else if strings.HasPrefix(signerListRaw, "@") {
				filename := strings.TrimPrefix(signerListRaw, "@")
				contents, readErr := os.ReadFile(filename)
				if readErr != nil {
					return readErr
				}
				unmarshalErr := json.Unmarshal(contents, &signerList)
				if unmarshalErr != nil {
					return unmarshalErr
				}
			} else {
				unmarshalErr := json.Unmarshal([]byte(signerListRaw), &signerList)
				if unmarshalErr != nil {
					return unmarshalErr
				}
			}

			var signatureListIntermediate [][]byte

			unmarshalErr := json.Unmarshal([]byte(signatureListRaw), &signatureListIntermediate)
			if unmarshalErr != nil {
				return unmarshalErr
			}

			signatureList = make([][]byte, len(signatureListIntermediate))

			for i0, _ := range signatureListIntermediate {

				copy(signatureList[i0][:], signatureListIntermediate[i0])

			}

			return nil
		},
		RunE: func(cmd *cobra.Command, args []string) error {
			client, clientErr := NewClient(rpc)
			if clientErr != nil {
				return clientErr
			}

			key, keyErr := KeyFromFile(keyfile, password)
			if keyErr != nil {
				return keyErr
			}

			chainIDCtx, cancelChainIDCtx := NewChainContext(timeout)
			defer cancelChainIDCtx()
			chainID, chainIDErr := client.ChainID(chainIDCtx)
			if chainIDErr != nil {
				return chainIDErr
			}

			transactionOpts, transactionOptsErr := bind.NewKeyedTransactorWithChainID(key.PrivateKey, chainID)
			if transactionOptsErr != nil {
				return transactionOptsErr
			}

			SetTransactionParametersFromArgs(transactionOpts, nonce, value, gasPrice, maxFeePerGas, maxPriorityFeePerGas, gasLimit, simulate)

			contract, contractErr := NewDropperV3Facet(contractAddress, client)
			if contractErr != nil {
				return contractErr
			}

			session := DropperV3FacetTransactorSession{
				Contract:     &contract.DropperV3FacetTransactor,
				TransactOpts: *transactionOpts,
			}

			transaction, transactionErr := session.BatchClaim(
				dropIDList,
				requestIDList,
				blockDeadlineList,
				amountList,
				signerList,
				signatureList,
			)
			if transactionErr != nil {
				return transactionErr
			}

			cmd.Printf("Transaction hash: %s\n", transaction.Hash().Hex())
			if transactionOpts.NoSend {
				estimationMessage := ethereum.CallMsg{
					From: transactionOpts.From,
					To:   &contractAddress,
					Data: transaction.Data(),
				}

				gasEstimationCtx, cancelGasEstimationCtx := NewChainContext(timeout)
				defer cancelGasEstimationCtx()

				gasEstimate, gasEstimateErr := client.EstimateGas(gasEstimationCtx, estimationMessage)
				if gasEstimateErr != nil {
					return gasEstimateErr
				}

				transactionBinary, transactionBinaryErr := transaction.MarshalBinary()
				if transactionBinaryErr != nil {
					return transactionBinaryErr
				}
				transactionBinaryHex := hex.EncodeToString(transactionBinary)

				cmd.Printf("Transaction: %s\nEstimated gas: %d\n", transactionBinaryHex, gasEstimate)
			} else {
				cmd.Println("Transaction submitted")
			}

			return nil
		},
	}

	cmd.Flags().StringVar(&rpc, "rpc", "", "URL of the JSONRPC API to use")
	cmd.Flags().StringVar(&keyfile, "keyfile", "", "Path to the keystore file to use for the transaction")
	cmd.Flags().StringVar(&password, "password", "", "Password to use to unlock the keystore (if not specified, you will be prompted for the password when the command executes)")
	cmd.Flags().StringVar(&nonce, "nonce", "", "Nonce to use for the transaction")
	cmd.Flags().StringVar(&value, "value", "", "Value to send with the transaction")
	cmd.Flags().StringVar(&gasPrice, "gas-price", "", "Gas price to use for the transaction")
	cmd.Flags().StringVar(&maxFeePerGas, "max-fee-per-gas", "", "Maximum fee per gas to use for the (EIP-1559) transaction")
	cmd.Flags().StringVar(&maxPriorityFeePerGas, "max-priority-fee-per-gas", "", "Maximum priority fee per gas to use for the (EIP-1559) transaction")
	cmd.Flags().Uint64Var(&gasLimit, "gas-limit", 0, "Gas limit for the transaction")
	cmd.Flags().BoolVar(&simulate, "simulate", false, "Simulate the transaction without sending it")
	cmd.Flags().UintVar(&timeout, "timeout", 60, "Timeout (in seconds) for interactions with the JSONRPC API")
	cmd.Flags().StringVar(&contractAddressRaw, "contract", "", "Address of the contract to interact with")

	cmd.Flags().StringVar(&dropIDListRaw, "drop-id-list", "", "drop-id-list argument ([]*big.Int)")
	cmd.Flags().StringVar(&requestIDListRaw, "request-id-list", "", "request-id-list argument ([]*big.Int)")
	cmd.Flags().StringVar(&blockDeadlineListRaw, "block-deadline-list", "", "block-deadline-list argument ([]*big.Int)")
	cmd.Flags().StringVar(&amountListRaw, "amount-list", "", "amount-list argument ([]*big.Int)")
	cmd.Flags().StringVar(&signerListRaw, "signer-list", "", "signer-list argument ([]common.Address)")
	cmd.Flags().StringVar(&signatureListRaw, "signature-list", "", "signature-list argument ([][]byte)")

	return cmd
}
func CreateBatchClaimForCommand() *cobra.Command {
	var keyfile, nonce, password, value, gasPrice, maxFeePerGas, maxPriorityFeePerGas, rpc, contractAddressRaw string
	var gasLimit uint64
	var simulate bool
	var timeout uint
	var contractAddress common.Address

	var dropIDList []*big.Int
	var dropIDListRaw string
	var requestIDList []*big.Int
	var requestIDListRaw string
	var blockDeadlineList []*big.Int
	var blockDeadlineListRaw string
	var amountList []*big.Int
	var amountListRaw string
	var recipientList []common.Address
	var recipientListRaw string
	var signerList []common.Address
	var signerListRaw string
	var signatureList [][]byte
	var signatureListRaw string

	cmd := &cobra.Command{
		Use:   "batch-claim-for",
		Short: "Execute the BatchClaimFor method on a DropperV3Facet contract",
		PreRunE: func(cmd *cobra.Command, args []string) error {
			if keyfile == "" {
				return fmt.Errorf("--keystore not specified")
			}

			if contractAddressRaw == "" {
				return fmt.Errorf("--contract not specified")
			} else if !common.IsHexAddress(contractAddressRaw) {
				return fmt.Errorf("--contract is not a valid Ethereum address")
			}
			contractAddress = common.HexToAddress(contractAddressRaw)

			if dropIDListRaw == "" {
				return fmt.Errorf("--drop-id-list argument not specified")
			} else if strings.HasPrefix(dropIDListRaw, "@") {
				filename := strings.TrimPrefix(dropIDListRaw, "@")
				contents, readErr := os.ReadFile(filename)
				if readErr != nil {
					return readErr
				}
				unmarshalErr := json.Unmarshal(contents, &dropIDList)
				if unmarshalErr != nil {
					return unmarshalErr
				}
			} else {
				unmarshalErr := json.Unmarshal([]byte(dropIDListRaw), &dropIDList)
				if unmarshalErr != nil {
					return unmarshalErr
				}
			}

			if requestIDListRaw == "" {
				return fmt.Errorf("--request-id-list argument not specified")
			} else if strings.HasPrefix(requestIDListRaw, "@") {
				filename := strings.TrimPrefix(requestIDListRaw, "@")
				contents, readErr := os.ReadFile(filename)
				if readErr != nil {
					return readErr
				}
				unmarshalErr := json.Unmarshal(contents, &requestIDList)
				if unmarshalErr != nil {
					return unmarshalErr
				}
			} else {
				unmarshalErr := json.Unmarshal([]byte(requestIDListRaw), &requestIDList)
				if unmarshalErr != nil {
					return unmarshalErr
				}
			}

			if blockDeadlineListRaw == "" {
				return fmt.Errorf("--block-deadline-list argument not specified")
			} else if strings.HasPrefix(blockDeadlineListRaw, "@") {
				filename := strings.TrimPrefix(blockDeadlineListRaw, "@")
				contents, readErr := os.ReadFile(filename)
				if readErr != nil {
					return readErr
				}
				unmarshalErr := json.Unmarshal(contents, &blockDeadlineList)
				if unmarshalErr != nil {
					return unmarshalErr
				}
			} else {
				unmarshalErr := json.Unmarshal([]byte(blockDeadlineListRaw), &blockDeadlineList)
				if unmarshalErr != nil {
					return unmarshalErr
				}
			}

			if amountListRaw == "" {
				return fmt.Errorf("--amount-list argument not specified")
			} else if strings.HasPrefix(amountListRaw, "@") {
				filename := strings.TrimPrefix(amountListRaw, "@")
				contents, readErr := os.ReadFile(filename)
				if readErr != nil {
					return readErr
				}
				unmarshalErr := json.Unmarshal(contents, &amountList)
				if unmarshalErr != nil {
					return unmarshalErr
				}
			} else {
				unmarshalErr := json.Unmarshal([]byte(amountListRaw), &amountList)
				if unmarshalErr != nil {
					return unmarshalErr
				}
			}

			if recipientListRaw == "" {
				return fmt.Errorf("--recipient-list argument not specified")
			} else if strings.HasPrefix(recipientListRaw, "@") {
				filename := strings.TrimPrefix(recipientListRaw, "@")
				contents, readErr := os.ReadFile(filename)
				if readErr != nil {
					return readErr
				}
				unmarshalErr := json.Unmarshal(contents, &recipientList)
				if unmarshalErr != nil {
					return unmarshalErr
				}
			} else {
				unmarshalErr := json.Unmarshal([]byte(recipientListRaw), &recipientList)
				if unmarshalErr != nil {
					return unmarshalErr
				}
			}

			if signerListRaw == "" {
				return fmt.Errorf("--signer-list argument not specified")
			} else if strings.HasPrefix(signerListRaw, "@") {
				filename := strings.TrimPrefix(signerListRaw, "@")
				contents, readErr := os.ReadFile(filename)
				if readErr != nil {
					return readErr
				}
				unmarshalErr := json.Unmarshal(contents, &signerList)
				if unmarshalErr != nil {
					return unmarshalErr
				}
			} else {
				unmarshalErr := json.Unmarshal([]byte(signerListRaw), &signerList)
				if unmarshalErr != nil {
					return unmarshalErr
				}
			}

			var signatureListIntermediate [][]byte

			unmarshalErr := json.Unmarshal([]byte(signatureListRaw), &signatureListIntermediate)
			if unmarshalErr != nil {
				return unmarshalErr
			}

			signatureList = make([][]byte, len(signatureListIntermediate))

			for i0, _ := range signatureListIntermediate {

				copy(signatureList[i0][:], signatureListIntermediate[i0])

			}

			return nil
		},
		RunE: func(cmd *cobra.Command, args []string) error {
			client, clientErr := NewClient(rpc)
			if clientErr != nil {
				return clientErr
			}

			key, keyErr := KeyFromFile(keyfile, password)
			if keyErr != nil {
				return keyErr
			}

			chainIDCtx, cancelChainIDCtx := NewChainContext(timeout)
			defer cancelChainIDCtx()
			chainID, chainIDErr := client.ChainID(chainIDCtx)
			if chainIDErr != nil {
				return chainIDErr
			}

			transactionOpts, transactionOptsErr := bind.NewKeyedTransactorWithChainID(key.PrivateKey, chainID)
			if transactionOptsErr != nil {
				return transactionOptsErr
			}

			SetTransactionParametersFromArgs(transactionOpts, nonce, value, gasPrice, maxFeePerGas, maxPriorityFeePerGas, gasLimit, simulate)

			contract, contractErr := NewDropperV3Facet(contractAddress, client)
			if contractErr != nil {
				return contractErr
			}

			session := DropperV3FacetTransactorSession{
				Contract:     &contract.DropperV3FacetTransactor,
				TransactOpts: *transactionOpts,
			}

			transaction, transactionErr := session.BatchClaimFor(
				dropIDList,
				requestIDList,
				blockDeadlineList,
				amountList,
				recipientList,
				signerList,
				signatureList,
			)
			if transactionErr != nil {
				return transactionErr
			}

			cmd.Printf("Transaction hash: %s\n", transaction.Hash().Hex())
			if transactionOpts.NoSend {
				estimationMessage := ethereum.CallMsg{
					From: transactionOpts.From,
					To:   &contractAddress,
					Data: transaction.Data(),
				}

				gasEstimationCtx, cancelGasEstimationCtx := NewChainContext(timeout)
				defer cancelGasEstimationCtx()

				gasEstimate, gasEstimateErr := client.EstimateGas(gasEstimationCtx, estimationMessage)
				if gasEstimateErr != nil {
					return gasEstimateErr
				}

				transactionBinary, transactionBinaryErr := transaction.MarshalBinary()
				if transactionBinaryErr != nil {
					return transactionBinaryErr
				}
				transactionBinaryHex := hex.EncodeToString(transactionBinary)

				cmd.Printf("Transaction: %s\nEstimated gas: %d\n", transactionBinaryHex, gasEstimate)
			} else {
				cmd.Println("Transaction submitted")
			}

			return nil
		},
	}

	cmd.Flags().StringVar(&rpc, "rpc", "", "URL of the JSONRPC API to use")
	cmd.Flags().StringVar(&keyfile, "keyfile", "", "Path to the keystore file to use for the transaction")
	cmd.Flags().StringVar(&password, "password", "", "Password to use to unlock the keystore (if not specified, you will be prompted for the password when the command executes)")
	cmd.Flags().StringVar(&nonce, "nonce", "", "Nonce to use for the transaction")
	cmd.Flags().StringVar(&value, "value", "", "Value to send with the transaction")
	cmd.Flags().StringVar(&gasPrice, "gas-price", "", "Gas price to use for the transaction")
	cmd.Flags().StringVar(&maxFeePerGas, "max-fee-per-gas", "", "Maximum fee per gas to use for the (EIP-1559) transaction")
	cmd.Flags().StringVar(&maxPriorityFeePerGas, "max-priority-fee-per-gas", "", "Maximum priority fee per gas to use for the (EIP-1559) transaction")
	cmd.Flags().Uint64Var(&gasLimit, "gas-limit", 0, "Gas limit for the transaction")
	cmd.Flags().BoolVar(&simulate, "simulate", false, "Simulate the transaction without sending it")
	cmd.Flags().UintVar(&timeout, "timeout", 60, "Timeout (in seconds) for interactions with the JSONRPC API")
	cmd.Flags().StringVar(&contractAddressRaw, "contract", "", "Address of the contract to interact with")

	cmd.Flags().StringVar(&dropIDListRaw, "drop-id-list", "", "drop-id-list argument ([]*big.Int)")
	cmd.Flags().StringVar(&requestIDListRaw, "request-id-list", "", "request-id-list argument ([]*big.Int)")
	cmd.Flags().StringVar(&blockDeadlineListRaw, "block-deadline-list", "", "block-deadline-list argument ([]*big.Int)")
	cmd.Flags().StringVar(&amountListRaw, "amount-list", "", "amount-list argument ([]*big.Int)")
	cmd.Flags().StringVar(&recipientListRaw, "recipient-list", "", "recipient-list argument ([]common.Address)")
	cmd.Flags().StringVar(&signerListRaw, "signer-list", "", "signer-list argument ([]common.Address)")
	cmd.Flags().StringVar(&signatureListRaw, "signature-list", "", "signature-list argument ([][]byte)")

	return cmd
}
func CreateClaimCommand() *cobra.Command {
	var keyfile, nonce, password, value, gasPrice, maxFeePerGas, maxPriorityFeePerGas, rpc, contractAddressRaw string
	var gasLimit uint64
	var simulate bool
	var timeout uint
	var contractAddress common.Address

	var dropId *big.Int
	var dropIdRaw string
	var requestID *big.Int
	var requestIDRaw string
	var blockDeadline *big.Int
	var blockDeadlineRaw string
	var amount *big.Int
	var amountRaw string
	var signer common.Address
	var signerRaw string
	var signature []byte
	var signatureRaw string

	cmd := &cobra.Command{
		Use:   "claim",
		Short: "Execute the Claim method on a DropperV3Facet contract",
		PreRunE: func(cmd *cobra.Command, args []string) error {
			if keyfile == "" {
				return fmt.Errorf("--keystore not specified")
			}

			if contractAddressRaw == "" {
				return fmt.Errorf("--contract not specified")
			} else if !common.IsHexAddress(contractAddressRaw) {
				return fmt.Errorf("--contract is not a valid Ethereum address")
			}
			contractAddress = common.HexToAddress(contractAddressRaw)

			if dropIdRaw == "" {
				return fmt.Errorf("--drop-id argument not specified")
			}
			dropId = new(big.Int)
			dropId.SetString(dropIdRaw, 0)

			if requestIDRaw == "" {
				return fmt.Errorf("--request-id argument not specified")
			}
			requestID = new(big.Int)
			requestID.SetString(requestIDRaw, 0)

			if blockDeadlineRaw == "" {
				return fmt.Errorf("--block-deadline argument not specified")
			}
			blockDeadline = new(big.Int)
			blockDeadline.SetString(blockDeadlineRaw, 0)

			if amountRaw == "" {
				return fmt.Errorf("--amount argument not specified")
			}
			amount = new(big.Int)
			amount.SetString(amountRaw, 0)

			if signerRaw == "" {
				return fmt.Errorf("--signer argument not specified")
			} else if !common.IsHexAddress(signerRaw) {
				return fmt.Errorf("--signer argument is not a valid Ethereum address")
			}
			signer = common.HexToAddress(signerRaw)

			var signatureIntermediate []byte

			var signatureIntermediateHexDecodeErr error
			signatureIntermediate, signatureIntermediateHexDecodeErr = hex.DecodeString(signatureRaw)
			if signatureIntermediateHexDecodeErr != nil {
				return signatureIntermediateHexDecodeErr
			}

			copy(signature[:], signatureIntermediate)

			return nil
		},
		RunE: func(cmd *cobra.Command, args []string) error {
			client, clientErr := NewClient(rpc)
			if clientErr != nil {
				return clientErr
			}

			key, keyErr := KeyFromFile(keyfile, password)
			if keyErr != nil {
				return keyErr
			}

			chainIDCtx, cancelChainIDCtx := NewChainContext(timeout)
			defer cancelChainIDCtx()
			chainID, chainIDErr := client.ChainID(chainIDCtx)
			if chainIDErr != nil {
				return chainIDErr
			}

			transactionOpts, transactionOptsErr := bind.NewKeyedTransactorWithChainID(key.PrivateKey, chainID)
			if transactionOptsErr != nil {
				return transactionOptsErr
			}

			SetTransactionParametersFromArgs(transactionOpts, nonce, value, gasPrice, maxFeePerGas, maxPriorityFeePerGas, gasLimit, simulate)

			contract, contractErr := NewDropperV3Facet(contractAddress, client)
			if contractErr != nil {
				return contractErr
			}

			session := DropperV3FacetTransactorSession{
				Contract:     &contract.DropperV3FacetTransactor,
				TransactOpts: *transactionOpts,
			}

			transaction, transactionErr := session.Claim(
				dropId,
				requestID,
				blockDeadline,
				amount,
				signer,
				signature,
			)
			if transactionErr != nil {
				return transactionErr
			}

			cmd.Printf("Transaction hash: %s\n", transaction.Hash().Hex())
			if transactionOpts.NoSend {
				estimationMessage := ethereum.CallMsg{
					From: transactionOpts.From,
					To:   &contractAddress,
					Data: transaction.Data(),
				}

				gasEstimationCtx, cancelGasEstimationCtx := NewChainContext(timeout)
				defer cancelGasEstimationCtx()

				gasEstimate, gasEstimateErr := client.EstimateGas(gasEstimationCtx, estimationMessage)
				if gasEstimateErr != nil {
					return gasEstimateErr
				}

				transactionBinary, transactionBinaryErr := transaction.MarshalBinary()
				if transactionBinaryErr != nil {
					return transactionBinaryErr
				}
				transactionBinaryHex := hex.EncodeToString(transactionBinary)

				cmd.Printf("Transaction: %s\nEstimated gas: %d\n", transactionBinaryHex, gasEstimate)
			} else {
				cmd.Println("Transaction submitted")
			}

			return nil
		},
	}

	cmd.Flags().StringVar(&rpc, "rpc", "", "URL of the JSONRPC API to use")
	cmd.Flags().StringVar(&keyfile, "keyfile", "", "Path to the keystore file to use for the transaction")
	cmd.Flags().StringVar(&password, "password", "", "Password to use to unlock the keystore (if not specified, you will be prompted for the password when the command executes)")
	cmd.Flags().StringVar(&nonce, "nonce", "", "Nonce to use for the transaction")
	cmd.Flags().StringVar(&value, "value", "", "Value to send with the transaction")
	cmd.Flags().StringVar(&gasPrice, "gas-price", "", "Gas price to use for the transaction")
	cmd.Flags().StringVar(&maxFeePerGas, "max-fee-per-gas", "", "Maximum fee per gas to use for the (EIP-1559) transaction")
	cmd.Flags().StringVar(&maxPriorityFeePerGas, "max-priority-fee-per-gas", "", "Maximum priority fee per gas to use for the (EIP-1559) transaction")
	cmd.Flags().Uint64Var(&gasLimit, "gas-limit", 0, "Gas limit for the transaction")
	cmd.Flags().BoolVar(&simulate, "simulate", false, "Simulate the transaction without sending it")
	cmd.Flags().UintVar(&timeout, "timeout", 60, "Timeout (in seconds) for interactions with the JSONRPC API")
	cmd.Flags().StringVar(&contractAddressRaw, "contract", "", "Address of the contract to interact with")

	cmd.Flags().StringVar(&dropIdRaw, "drop-id", "", "drop-id argument")
	cmd.Flags().StringVar(&requestIDRaw, "request-id", "", "request-id argument")
	cmd.Flags().StringVar(&blockDeadlineRaw, "block-deadline", "", "block-deadline argument")
	cmd.Flags().StringVar(&amountRaw, "amount", "", "amount argument")
	cmd.Flags().StringVar(&signerRaw, "signer", "", "signer argument (common.Address)")
	cmd.Flags().StringVar(&signatureRaw, "signature", "", "signature argument ([]byte)")

	return cmd
}
func CreateClaimForCommand() *cobra.Command {
	var keyfile, nonce, password, value, gasPrice, maxFeePerGas, maxPriorityFeePerGas, rpc, contractAddressRaw string
	var gasLimit uint64
	var simulate bool
	var timeout uint
	var contractAddress common.Address

	var dropId *big.Int
	var dropIdRaw string
	var requestID *big.Int
	var requestIDRaw string
	var blockDeadline *big.Int
	var blockDeadlineRaw string
	var amount *big.Int
	var amountRaw string
	var recipient common.Address
	var recipientRaw string
	var signer common.Address
	var signerRaw string
	var signature []byte
	var signatureRaw string

	cmd := &cobra.Command{
		Use:   "claim-for",
		Short: "Execute the ClaimFor method on a DropperV3Facet contract",
		PreRunE: func(cmd *cobra.Command, args []string) error {
			if keyfile == "" {
				return fmt.Errorf("--keystore not specified")
			}

			if contractAddressRaw == "" {
				return fmt.Errorf("--contract not specified")
			} else if !common.IsHexAddress(contractAddressRaw) {
				return fmt.Errorf("--contract is not a valid Ethereum address")
			}
			contractAddress = common.HexToAddress(contractAddressRaw)

			if dropIdRaw == "" {
				return fmt.Errorf("--drop-id argument not specified")
			}
			dropId = new(big.Int)
			dropId.SetString(dropIdRaw, 0)

			if requestIDRaw == "" {
				return fmt.Errorf("--request-id argument not specified")
			}
			requestID = new(big.Int)
			requestID.SetString(requestIDRaw, 0)

			if blockDeadlineRaw == "" {
				return fmt.Errorf("--block-deadline argument not specified")
			}
			blockDeadline = new(big.Int)
			blockDeadline.SetString(blockDeadlineRaw, 0)

			if amountRaw == "" {
				return fmt.Errorf("--amount argument not specified")
			}
			amount = new(big.Int)
			amount.SetString(amountRaw, 0)

			if recipientRaw == "" {
				return fmt.Errorf("--recipient argument not specified")
			} else if !common.IsHexAddress(recipientRaw) {
				return fmt.Errorf("--recipient argument is not a valid Ethereum address")
			}
			recipient = common.HexToAddress(recipientRaw)

			if signerRaw == "" {
				return fmt.Errorf("--signer argument not specified")
			} else if !common.IsHexAddress(signerRaw) {
				return fmt.Errorf("--signer argument is not a valid Ethereum address")
			}
			signer = common.HexToAddress(signerRaw)

			var signatureIntermediate []byte

			var signatureIntermediateHexDecodeErr error
			signatureIntermediate, signatureIntermediateHexDecodeErr = hex.DecodeString(signatureRaw)
			if signatureIntermediateHexDecodeErr != nil {
				return signatureIntermediateHexDecodeErr
			}

			copy(signature[:], signatureIntermediate)

			return nil
		},
		RunE: func(cmd *cobra.Command, args []string) error {
			client, clientErr := NewClient(rpc)
			if clientErr != nil {
				return clientErr
			}

			key, keyErr := KeyFromFile(keyfile, password)
			if keyErr != nil {
				return keyErr
			}

			chainIDCtx, cancelChainIDCtx := NewChainContext(timeout)
			defer cancelChainIDCtx()
			chainID, chainIDErr := client.ChainID(chainIDCtx)
			if chainIDErr != nil {
				return chainIDErr
			}

			transactionOpts, transactionOptsErr := bind.NewKeyedTransactorWithChainID(key.PrivateKey, chainID)
			if transactionOptsErr != nil {
				return transactionOptsErr
			}

			SetTransactionParametersFromArgs(transactionOpts, nonce, value, gasPrice, maxFeePerGas, maxPriorityFeePerGas, gasLimit, simulate)

			contract, contractErr := NewDropperV3Facet(contractAddress, client)
			if contractErr != nil {
				return contractErr
			}

			session := DropperV3FacetTransactorSession{
				Contract:     &contract.DropperV3FacetTransactor,
				TransactOpts: *transactionOpts,
			}

			transaction, transactionErr := session.ClaimFor(
				dropId,
				requestID,
				blockDeadline,
				amount,
				recipient,
				signer,
				signature,
			)
			if transactionErr != nil {
				return transactionErr
			}

			cmd.Printf("Transaction hash: %s\n", transaction.Hash().Hex())
			if transactionOpts.NoSend {
				estimationMessage := ethereum.CallMsg{
					From: transactionOpts.From,
					To:   &contractAddress,
					Data: transaction.Data(),
				}

				gasEstimationCtx, cancelGasEstimationCtx := NewChainContext(timeout)
				defer cancelGasEstimationCtx()

				gasEstimate, gasEstimateErr := client.EstimateGas(gasEstimationCtx, estimationMessage)
				if gasEstimateErr != nil {
					return gasEstimateErr
				}

				transactionBinary, transactionBinaryErr := transaction.MarshalBinary()
				if transactionBinaryErr != nil {
					return transactionBinaryErr
				}
				transactionBinaryHex := hex.EncodeToString(transactionBinary)

				cmd.Printf("Transaction: %s\nEstimated gas: %d\n", transactionBinaryHex, gasEstimate)
			} else {
				cmd.Println("Transaction submitted")
			}

			return nil
		},
	}

	cmd.Flags().StringVar(&rpc, "rpc", "", "URL of the JSONRPC API to use")
	cmd.Flags().StringVar(&keyfile, "keyfile", "", "Path to the keystore file to use for the transaction")
	cmd.Flags().StringVar(&password, "password", "", "Password to use to unlock the keystore (if not specified, you will be prompted for the password when the command executes)")
	cmd.Flags().StringVar(&nonce, "nonce", "", "Nonce to use for the transaction")
	cmd.Flags().StringVar(&value, "value", "", "Value to send with the transaction")
	cmd.Flags().StringVar(&gasPrice, "gas-price", "", "Gas price to use for the transaction")
	cmd.Flags().StringVar(&maxFeePerGas, "max-fee-per-gas", "", "Maximum fee per gas to use for the (EIP-1559) transaction")
	cmd.Flags().StringVar(&maxPriorityFeePerGas, "max-priority-fee-per-gas", "", "Maximum priority fee per gas to use for the (EIP-1559) transaction")
	cmd.Flags().Uint64Var(&gasLimit, "gas-limit", 0, "Gas limit for the transaction")
	cmd.Flags().BoolVar(&simulate, "simulate", false, "Simulate the transaction without sending it")
	cmd.Flags().UintVar(&timeout, "timeout", 60, "Timeout (in seconds) for interactions with the JSONRPC API")
	cmd.Flags().StringVar(&contractAddressRaw, "contract", "", "Address of the contract to interact with")

	cmd.Flags().StringVar(&dropIdRaw, "drop-id", "", "drop-id argument")
	cmd.Flags().StringVar(&requestIDRaw, "request-id", "", "request-id argument")
	cmd.Flags().StringVar(&blockDeadlineRaw, "block-deadline", "", "block-deadline argument")
	cmd.Flags().StringVar(&amountRaw, "amount", "", "amount argument")
	cmd.Flags().StringVar(&recipientRaw, "recipient", "", "recipient argument (common.Address)")
	cmd.Flags().StringVar(&signerRaw, "signer", "", "signer argument (common.Address)")
	cmd.Flags().StringVar(&signatureRaw, "signature", "", "signature argument ([]byte)")

	return cmd
}
func CreateCreateDropCommand() *cobra.Command {
	var keyfile, nonce, password, value, gasPrice, maxFeePerGas, maxPriorityFeePerGas, rpc, contractAddressRaw string
	var gasLimit uint64
	var simulate bool
	var timeout uint
	var contractAddress common.Address

	var tokenType *big.Int
	var tokenTypeRaw string
	var tokenAddress common.Address
	var tokenAddressRaw string
	var tokenId *big.Int
	var tokenIdRaw string
	var amount *big.Int
	var amountRaw string
	var authorizationTokenAddress common.Address
	var authorizationTokenAddressRaw string
	var authorizationPoolId *big.Int
	var authorizationPoolIdRaw string
	var maxNumberOfTokens *big.Int
	var maxNumberOfTokensRaw string
	var uri string

	cmd := &cobra.Command{
		Use:   "create-drop",
		Short: "Execute the CreateDrop method on a DropperV3Facet contract",
		PreRunE: func(cmd *cobra.Command, args []string) error {
			if keyfile == "" {
				return fmt.Errorf("--keystore not specified")
			}

			if contractAddressRaw == "" {
				return fmt.Errorf("--contract not specified")
			} else if !common.IsHexAddress(contractAddressRaw) {
				return fmt.Errorf("--contract is not a valid Ethereum address")
			}
			contractAddress = common.HexToAddress(contractAddressRaw)

			if tokenTypeRaw == "" {
				return fmt.Errorf("--token-type argument not specified")
			}
			tokenType = new(big.Int)
			tokenType.SetString(tokenTypeRaw, 0)

			if tokenAddressRaw == "" {
				return fmt.Errorf("--token-address argument not specified")
			} else if !common.IsHexAddress(tokenAddressRaw) {
				return fmt.Errorf("--token-address argument is not a valid Ethereum address")
			}
			tokenAddress = common.HexToAddress(tokenAddressRaw)

			if tokenIdRaw == "" {
				return fmt.Errorf("--token-id argument not specified")
			}
			tokenId = new(big.Int)
			tokenId.SetString(tokenIdRaw, 0)

			if amountRaw == "" {
				return fmt.Errorf("--amount argument not specified")
			}
			amount = new(big.Int)
			amount.SetString(amountRaw, 0)

			if authorizationTokenAddressRaw == "" {
				return fmt.Errorf("--authorization-token-address argument not specified")
			} else if !common.IsHexAddress(authorizationTokenAddressRaw) {
				return fmt.Errorf("--authorization-token-address argument is not a valid Ethereum address")
			}
			authorizationTokenAddress = common.HexToAddress(authorizationTokenAddressRaw)

			if authorizationPoolIdRaw == "" {
				return fmt.Errorf("--authorization-pool-id argument not specified")
			}
			authorizationPoolId = new(big.Int)
			authorizationPoolId.SetString(authorizationPoolIdRaw, 0)

			if maxNumberOfTokensRaw == "" {
				return fmt.Errorf("--max-number-of-tokens argument not specified")
			}
			maxNumberOfTokens = new(big.Int)
			maxNumberOfTokens.SetString(maxNumberOfTokensRaw, 0)

			return nil
		},
		RunE: func(cmd *cobra.Command, args []string) error {
			client, clientErr := NewClient(rpc)
			if clientErr != nil {
				return clientErr
			}

			key, keyErr := KeyFromFile(keyfile, password)
			if keyErr != nil {
				return keyErr
			}

			chainIDCtx, cancelChainIDCtx := NewChainContext(timeout)
			defer cancelChainIDCtx()
			chainID, chainIDErr := client.ChainID(chainIDCtx)
			if chainIDErr != nil {
				return chainIDErr
			}

			transactionOpts, transactionOptsErr := bind.NewKeyedTransactorWithChainID(key.PrivateKey, chainID)
			if transactionOptsErr != nil {
				return transactionOptsErr
			}

			SetTransactionParametersFromArgs(transactionOpts, nonce, value, gasPrice, maxFeePerGas, maxPriorityFeePerGas, gasLimit, simulate)

			contract, contractErr := NewDropperV3Facet(contractAddress, client)
			if contractErr != nil {
				return contractErr
			}

			session := DropperV3FacetTransactorSession{
				Contract:     &contract.DropperV3FacetTransactor,
				TransactOpts: *transactionOpts,
			}

			transaction, transactionErr := session.CreateDrop(
				tokenType,
				tokenAddress,
				tokenId,
				amount,
				authorizationTokenAddress,
				authorizationPoolId,
				maxNumberOfTokens,
				uri,
			)
			if transactionErr != nil {
				return transactionErr
			}

			cmd.Printf("Transaction hash: %s\n", transaction.Hash().Hex())
			if transactionOpts.NoSend {
				estimationMessage := ethereum.CallMsg{
					From: transactionOpts.From,
					To:   &contractAddress,
					Data: transaction.Data(),
				}

				gasEstimationCtx, cancelGasEstimationCtx := NewChainContext(timeout)
				defer cancelGasEstimationCtx()

				gasEstimate, gasEstimateErr := client.EstimateGas(gasEstimationCtx, estimationMessage)
				if gasEstimateErr != nil {
					return gasEstimateErr
				}

				transactionBinary, transactionBinaryErr := transaction.MarshalBinary()
				if transactionBinaryErr != nil {
					return transactionBinaryErr
				}
				transactionBinaryHex := hex.EncodeToString(transactionBinary)

				cmd.Printf("Transaction: %s\nEstimated gas: %d\n", transactionBinaryHex, gasEstimate)
			} else {
				cmd.Println("Transaction submitted")
			}

			return nil
		},
	}

	cmd.Flags().StringVar(&rpc, "rpc", "", "URL of the JSONRPC API to use")
	cmd.Flags().StringVar(&keyfile, "keyfile", "", "Path to the keystore file to use for the transaction")
	cmd.Flags().StringVar(&password, "password", "", "Password to use to unlock the keystore (if not specified, you will be prompted for the password when the command executes)")
	cmd.Flags().StringVar(&nonce, "nonce", "", "Nonce to use for the transaction")
	cmd.Flags().StringVar(&value, "value", "", "Value to send with the transaction")
	cmd.Flags().StringVar(&gasPrice, "gas-price", "", "Gas price to use for the transaction")
	cmd.Flags().StringVar(&maxFeePerGas, "max-fee-per-gas", "", "Maximum fee per gas to use for the (EIP-1559) transaction")
	cmd.Flags().StringVar(&maxPriorityFeePerGas, "max-priority-fee-per-gas", "", "Maximum priority fee per gas to use for the (EIP-1559) transaction")
	cmd.Flags().Uint64Var(&gasLimit, "gas-limit", 0, "Gas limit for the transaction")
	cmd.Flags().BoolVar(&simulate, "simulate", false, "Simulate the transaction without sending it")
	cmd.Flags().UintVar(&timeout, "timeout", 60, "Timeout (in seconds) for interactions with the JSONRPC API")
	cmd.Flags().StringVar(&contractAddressRaw, "contract", "", "Address of the contract to interact with")

	cmd.Flags().StringVar(&tokenTypeRaw, "token-type", "", "token-type argument")
	cmd.Flags().StringVar(&tokenAddressRaw, "token-address", "", "token-address argument (common.Address)")
	cmd.Flags().StringVar(&tokenIdRaw, "token-id", "", "token-id argument")
	cmd.Flags().StringVar(&amountRaw, "amount", "", "amount argument")
	cmd.Flags().StringVar(&authorizationTokenAddressRaw, "authorization-token-address", "", "authorization-token-address argument (common.Address)")
	cmd.Flags().StringVar(&authorizationPoolIdRaw, "authorization-pool-id", "", "authorization-pool-id argument")
	cmd.Flags().StringVar(&maxNumberOfTokensRaw, "max-number-of-tokens", "", "max-number-of-tokens argument")
	cmd.Flags().StringVar(&uri, "uri", "", "uri argument")

	return cmd
}
func CreateFallbackCommand() *cobra.Command {
	var keyfile, nonce, password, value, gasPrice, maxFeePerGas, maxPriorityFeePerGas, rpc, contractAddressRaw string
	var gasLimit uint64
	var simulate bool
	var timeout uint
	var contractAddress common.Address

	var calldata []byte
	var calldataRaw string

	cmd := &cobra.Command{
		Use:   "fallback",
		Short: "Execute the Fallback method on a DropperV3Facet contract",
		PreRunE: func(cmd *cobra.Command, args []string) error {
			if keyfile == "" {
				return fmt.Errorf("--keystore not specified")
			}

			if contractAddressRaw == "" {
				return fmt.Errorf("--contract not specified")
			} else if !common.IsHexAddress(contractAddressRaw) {
				return fmt.Errorf("--contract is not a valid Ethereum address")
			}
			contractAddress = common.HexToAddress(contractAddressRaw)

			var calldataIntermediate []byte

			var calldataIntermediateHexDecodeErr error
			calldataIntermediate, calldataIntermediateHexDecodeErr = hex.DecodeString(calldataRaw)
			if calldataIntermediateHexDecodeErr != nil {
				return calldataIntermediateHexDecodeErr
			}

			copy(calldata[:], calldataIntermediate)

			return nil
		},
		RunE: func(cmd *cobra.Command, args []string) error {
			client, clientErr := NewClient(rpc)
			if clientErr != nil {
				return clientErr
			}

			key, keyErr := KeyFromFile(keyfile, password)
			if keyErr != nil {
				return keyErr
			}

			chainIDCtx, cancelChainIDCtx := NewChainContext(timeout)
			defer cancelChainIDCtx()
			chainID, chainIDErr := client.ChainID(chainIDCtx)
			if chainIDErr != nil {
				return chainIDErr
			}

			transactionOpts, transactionOptsErr := bind.NewKeyedTransactorWithChainID(key.PrivateKey, chainID)
			if transactionOptsErr != nil {
				return transactionOptsErr
			}

			SetTransactionParametersFromArgs(transactionOpts, nonce, value, gasPrice, maxFeePerGas, maxPriorityFeePerGas, gasLimit, simulate)

			contract, contractErr := NewDropperV3Facet(contractAddress, client)
			if contractErr != nil {
				return contractErr
			}

			session := DropperV3FacetTransactorSession{
				Contract:     &contract.DropperV3FacetTransactor,
				TransactOpts: *transactionOpts,
			}

			transaction, transactionErr := session.Fallback(
				calldata,
			)
			if transactionErr != nil {
				return transactionErr
			}

			cmd.Printf("Transaction hash: %s\n", transaction.Hash().Hex())
			if transactionOpts.NoSend {
				estimationMessage := ethereum.CallMsg{
					From: transactionOpts.From,
					To:   &contractAddress,
					Data: transaction.Data(),
				}

				gasEstimationCtx, cancelGasEstimationCtx := NewChainContext(timeout)
				defer cancelGasEstimationCtx()

				gasEstimate, gasEstimateErr := client.EstimateGas(gasEstimationCtx, estimationMessage)
				if gasEstimateErr != nil {
					return gasEstimateErr
				}

				transactionBinary, transactionBinaryErr := transaction.MarshalBinary()
				if transactionBinaryErr != nil {
					return transactionBinaryErr
				}
				transactionBinaryHex := hex.EncodeToString(transactionBinary)

				cmd.Printf("Transaction: %s\nEstimated gas: %d\n", transactionBinaryHex, gasEstimate)
			} else {
				cmd.Println("Transaction submitted")
			}

			return nil
		},
	}

	cmd.Flags().StringVar(&rpc, "rpc", "", "URL of the JSONRPC API to use")
	cmd.Flags().StringVar(&keyfile, "keyfile", "", "Path to the keystore file to use for the transaction")
	cmd.Flags().StringVar(&password, "password", "", "Password to use to unlock the keystore (if not specified, you will be prompted for the password when the command executes)")
	cmd.Flags().StringVar(&nonce, "nonce", "", "Nonce to use for the transaction")
	cmd.Flags().StringVar(&value, "value", "", "Value to send with the transaction")
	cmd.Flags().StringVar(&gasPrice, "gas-price", "", "Gas price to use for the transaction")
	cmd.Flags().StringVar(&maxFeePerGas, "max-fee-per-gas", "", "Maximum fee per gas to use for the (EIP-1559) transaction")
	cmd.Flags().StringVar(&maxPriorityFeePerGas, "max-priority-fee-per-gas", "", "Maximum priority fee per gas to use for the (EIP-1559) transaction")
	cmd.Flags().Uint64Var(&gasLimit, "gas-limit", 0, "Gas limit for the transaction")
	cmd.Flags().BoolVar(&simulate, "simulate", false, "Simulate the transaction without sending it")
	cmd.Flags().UintVar(&timeout, "timeout", 60, "Timeout (in seconds) for interactions with the JSONRPC API")
	cmd.Flags().StringVar(&contractAddressRaw, "contract", "", "Address of the contract to interact with")

	cmd.Flags().StringVar(&calldataRaw, "calldata", "", "calldata argument ([]byte)")

	return cmd
}
func CreateInitCommand() *cobra.Command {
	var keyfile, nonce, password, value, gasPrice, maxFeePerGas, maxPriorityFeePerGas, rpc, contractAddressRaw string
	var gasLimit uint64
	var simulate bool
	var timeout uint
	var contractAddress common.Address

	var terminusAdminContractAddress common.Address
	var terminusAdminContractAddressRaw string
	var terminusAdminPoolId *big.Int
	var terminusAdminPoolIdRaw string

	cmd := &cobra.Command{
		Use:   "init",
		Short: "Execute the Init method on a DropperV3Facet contract",
		PreRunE: func(cmd *cobra.Command, args []string) error {
			if keyfile == "" {
				return fmt.Errorf("--keystore not specified")
			}

			if contractAddressRaw == "" {
				return fmt.Errorf("--contract not specified")
			} else if !common.IsHexAddress(contractAddressRaw) {
				return fmt.Errorf("--contract is not a valid Ethereum address")
			}
			contractAddress = common.HexToAddress(contractAddressRaw)

			if terminusAdminContractAddressRaw == "" {
				return fmt.Errorf("--terminus-admin-contract-address argument not specified")
			} else if !common.IsHexAddress(terminusAdminContractAddressRaw) {
				return fmt.Errorf("--terminus-admin-contract-address argument is not a valid Ethereum address")
			}
			terminusAdminContractAddress = common.HexToAddress(terminusAdminContractAddressRaw)

			if terminusAdminPoolIdRaw == "" {
				return fmt.Errorf("--terminus-admin-pool-id argument not specified")
			}
			terminusAdminPoolId = new(big.Int)
			terminusAdminPoolId.SetString(terminusAdminPoolIdRaw, 0)

			return nil
		},
		RunE: func(cmd *cobra.Command, args []string) error {
			client, clientErr := NewClient(rpc)
			if clientErr != nil {
				return clientErr
			}

			key, keyErr := KeyFromFile(keyfile, password)
			if keyErr != nil {
				return keyErr
			}

			chainIDCtx, cancelChainIDCtx := NewChainContext(timeout)
			defer cancelChainIDCtx()
			chainID, chainIDErr := client.ChainID(chainIDCtx)
			if chainIDErr != nil {
				return chainIDErr
			}

			transactionOpts, transactionOptsErr := bind.NewKeyedTransactorWithChainID(key.PrivateKey, chainID)
			if transactionOptsErr != nil {
				return transactionOptsErr
			}

			SetTransactionParametersFromArgs(transactionOpts, nonce, value, gasPrice, maxFeePerGas, maxPriorityFeePerGas, gasLimit, simulate)

			contract, contractErr := NewDropperV3Facet(contractAddress, client)
			if contractErr != nil {
				return contractErr
			}

			session := DropperV3FacetTransactorSession{
				Contract:     &contract.DropperV3FacetTransactor,
				TransactOpts: *transactionOpts,
			}

			transaction, transactionErr := session.Init(
				terminusAdminContractAddress,
				terminusAdminPoolId,
			)
			if transactionErr != nil {
				return transactionErr
			}

			cmd.Printf("Transaction hash: %s\n", transaction.Hash().Hex())
			if transactionOpts.NoSend {
				estimationMessage := ethereum.CallMsg{
					From: transactionOpts.From,
					To:   &contractAddress,
					Data: transaction.Data(),
				}

				gasEstimationCtx, cancelGasEstimationCtx := NewChainContext(timeout)
				defer cancelGasEstimationCtx()

				gasEstimate, gasEstimateErr := client.EstimateGas(gasEstimationCtx, estimationMessage)
				if gasEstimateErr != nil {
					return gasEstimateErr
				}

				transactionBinary, transactionBinaryErr := transaction.MarshalBinary()
				if transactionBinaryErr != nil {
					return transactionBinaryErr
				}
				transactionBinaryHex := hex.EncodeToString(transactionBinary)

				cmd.Printf("Transaction: %s\nEstimated gas: %d\n", transactionBinaryHex, gasEstimate)
			} else {
				cmd.Println("Transaction submitted")
			}

			return nil
		},
	}

	cmd.Flags().StringVar(&rpc, "rpc", "", "URL of the JSONRPC API to use")
	cmd.Flags().StringVar(&keyfile, "keyfile", "", "Path to the keystore file to use for the transaction")
	cmd.Flags().StringVar(&password, "password", "", "Password to use to unlock the keystore (if not specified, you will be prompted for the password when the command executes)")
	cmd.Flags().StringVar(&nonce, "nonce", "", "Nonce to use for the transaction")
	cmd.Flags().StringVar(&value, "value", "", "Value to send with the transaction")
	cmd.Flags().StringVar(&gasPrice, "gas-price", "", "Gas price to use for the transaction")
	cmd.Flags().StringVar(&maxFeePerGas, "max-fee-per-gas", "", "Maximum fee per gas to use for the (EIP-1559) transaction")
	cmd.Flags().StringVar(&maxPriorityFeePerGas, "max-priority-fee-per-gas", "", "Maximum priority fee per gas to use for the (EIP-1559) transaction")
	cmd.Flags().Uint64Var(&gasLimit, "gas-limit", 0, "Gas limit for the transaction")
	cmd.Flags().BoolVar(&simulate, "simulate", false, "Simulate the transaction without sending it")
	cmd.Flags().UintVar(&timeout, "timeout", 60, "Timeout (in seconds) for interactions with the JSONRPC API")
	cmd.Flags().StringVar(&contractAddressRaw, "contract", "", "Address of the contract to interact with")

	cmd.Flags().StringVar(&terminusAdminContractAddressRaw, "terminus-admin-contract-address", "", "terminus-admin-contract-address argument (common.Address)")
	cmd.Flags().StringVar(&terminusAdminPoolIdRaw, "terminus-admin-pool-id", "", "terminus-admin-pool-id argument")

	return cmd
}
func CreateOnErc1155BatchReceivedCommand() *cobra.Command {
	var keyfile, nonce, password, value, gasPrice, maxFeePerGas, maxPriorityFeePerGas, rpc, contractAddressRaw string
	var gasLimit uint64
	var simulate bool
	var timeout uint
	var contractAddress common.Address

	var arg0 common.Address
	var arg0Raw string
	var arg1 common.Address
	var arg1Raw string
	var arg2 []*big.Int
	var arg2Raw string
	var arg3 []*big.Int
	var arg3Raw string
	var arg4 []byte
	var arg4Raw string

	cmd := &cobra.Command{
		Use:   "on-erc-1155-batch-received",
		Short: "Execute the OnERC1155BatchReceived method on a DropperV3Facet contract",
		PreRunE: func(cmd *cobra.Command, args []string) error {
			if keyfile == "" {
				return fmt.Errorf("--keystore not specified")
			}

			if contractAddressRaw == "" {
				return fmt.Errorf("--contract not specified")
			} else if !common.IsHexAddress(contractAddressRaw) {
				return fmt.Errorf("--contract is not a valid Ethereum address")
			}
			contractAddress = common.HexToAddress(contractAddressRaw)

			if arg0Raw == "" {
				return fmt.Errorf("--arg-0 argument not specified")
			} else if !common.IsHexAddress(arg0Raw) {
				return fmt.Errorf("--arg-0 argument is not a valid Ethereum address")
			}
			arg0 = common.HexToAddress(arg0Raw)

			if arg1Raw == "" {
				return fmt.Errorf("--arg-1 argument not specified")
			} else if !common.IsHexAddress(arg1Raw) {
				return fmt.Errorf("--arg-1 argument is not a valid Ethereum address")
			}
			arg1 = common.HexToAddress(arg1Raw)

			if arg2Raw == "" {
				return fmt.Errorf("--arg-2 argument not specified")
			} else if strings.HasPrefix(arg2Raw, "@") {
				filename := strings.TrimPrefix(arg2Raw, "@")
				contents, readErr := os.ReadFile(filename)
				if readErr != nil {
					return readErr
				}
				unmarshalErr := json.Unmarshal(contents, &arg2)
				if unmarshalErr != nil {
					return unmarshalErr
				}
			} else {
				unmarshalErr := json.Unmarshal([]byte(arg2Raw), &arg2)
				if unmarshalErr != nil {
					return unmarshalErr
				}
			}

			if arg3Raw == "" {
				return fmt.Errorf("--arg-3 argument not specified")
			} else if strings.HasPrefix(arg3Raw, "@") {
				filename := strings.TrimPrefix(arg3Raw, "@")
				contents, readErr := os.ReadFile(filename)
				if readErr != nil {
					return readErr
				}
				unmarshalErr := json.Unmarshal(contents, &arg3)
				if unmarshalErr != nil {
					return unmarshalErr
				}
			} else {
				unmarshalErr := json.Unmarshal([]byte(arg3Raw), &arg3)
				if unmarshalErr != nil {
					return unmarshalErr
				}
			}

			var arg4Intermediate []byte

			var arg4IntermediateHexDecodeErr error
			arg4Intermediate, arg4IntermediateHexDecodeErr = hex.DecodeString(arg4Raw)
			if arg4IntermediateHexDecodeErr != nil {
				return arg4IntermediateHexDecodeErr
			}

			copy(arg4[:], arg4Intermediate)

			return nil
		},
		RunE: func(cmd *cobra.Command, args []string) error {
			client, clientErr := NewClient(rpc)
			if clientErr != nil {
				return clientErr
			}

			key, keyErr := KeyFromFile(keyfile, password)
			if keyErr != nil {
				return keyErr
			}

			chainIDCtx, cancelChainIDCtx := NewChainContext(timeout)
			defer cancelChainIDCtx()
			chainID, chainIDErr := client.ChainID(chainIDCtx)
			if chainIDErr != nil {
				return chainIDErr
			}

			transactionOpts, transactionOptsErr := bind.NewKeyedTransactorWithChainID(key.PrivateKey, chainID)
			if transactionOptsErr != nil {
				return transactionOptsErr
			}

			SetTransactionParametersFromArgs(transactionOpts, nonce, value, gasPrice, maxFeePerGas, maxPriorityFeePerGas, gasLimit, simulate)

			contract, contractErr := NewDropperV3Facet(contractAddress, client)
			if contractErr != nil {
				return contractErr
			}

			session := DropperV3FacetTransactorSession{
				Contract:     &contract.DropperV3FacetTransactor,
				TransactOpts: *transactionOpts,
			}

			transaction, transactionErr := session.OnERC1155BatchReceived(
				arg0,
				arg1,
				arg2,
				arg3,
				arg4,
			)
			if transactionErr != nil {
				return transactionErr
			}

			cmd.Printf("Transaction hash: %s\n", transaction.Hash().Hex())
			if transactionOpts.NoSend {
				estimationMessage := ethereum.CallMsg{
					From: transactionOpts.From,
					To:   &contractAddress,
					Data: transaction.Data(),
				}

				gasEstimationCtx, cancelGasEstimationCtx := NewChainContext(timeout)
				defer cancelGasEstimationCtx()

				gasEstimate, gasEstimateErr := client.EstimateGas(gasEstimationCtx, estimationMessage)
				if gasEstimateErr != nil {
					return gasEstimateErr
				}

				transactionBinary, transactionBinaryErr := transaction.MarshalBinary()
				if transactionBinaryErr != nil {
					return transactionBinaryErr
				}
				transactionBinaryHex := hex.EncodeToString(transactionBinary)

				cmd.Printf("Transaction: %s\nEstimated gas: %d\n", transactionBinaryHex, gasEstimate)
			} else {
				cmd.Println("Transaction submitted")
			}

			return nil
		},
	}

	cmd.Flags().StringVar(&rpc, "rpc", "", "URL of the JSONRPC API to use")
	cmd.Flags().StringVar(&keyfile, "keyfile", "", "Path to the keystore file to use for the transaction")
	cmd.Flags().StringVar(&password, "password", "", "Password to use to unlock the keystore (if not specified, you will be prompted for the password when the command executes)")
	cmd.Flags().StringVar(&nonce, "nonce", "", "Nonce to use for the transaction")
	cmd.Flags().StringVar(&value, "value", "", "Value to send with the transaction")
	cmd.Flags().StringVar(&gasPrice, "gas-price", "", "Gas price to use for the transaction")
	cmd.Flags().StringVar(&maxFeePerGas, "max-fee-per-gas", "", "Maximum fee per gas to use for the (EIP-1559) transaction")
	cmd.Flags().StringVar(&maxPriorityFeePerGas, "max-priority-fee-per-gas", "", "Maximum priority fee per gas to use for the (EIP-1559) transaction")
	cmd.Flags().Uint64Var(&gasLimit, "gas-limit", 0, "Gas limit for the transaction")
	cmd.Flags().BoolVar(&simulate, "simulate", false, "Simulate the transaction without sending it")
	cmd.Flags().UintVar(&timeout, "timeout", 60, "Timeout (in seconds) for interactions with the JSONRPC API")
	cmd.Flags().StringVar(&contractAddressRaw, "contract", "", "Address of the contract to interact with")

	cmd.Flags().StringVar(&arg0Raw, "arg-0", "", "arg-0 argument (common.Address)")
	cmd.Flags().StringVar(&arg1Raw, "arg-1", "", "arg-1 argument (common.Address)")
	cmd.Flags().StringVar(&arg2Raw, "arg-2", "", "arg-2 argument ([]*big.Int)")
	cmd.Flags().StringVar(&arg3Raw, "arg-3", "", "arg-3 argument ([]*big.Int)")
	cmd.Flags().StringVar(&arg4Raw, "arg-4", "", "arg-4 argument ([]byte)")

	return cmd
}
func CreateOnErc1155ReceivedCommand() *cobra.Command {
	var keyfile, nonce, password, value, gasPrice, maxFeePerGas, maxPriorityFeePerGas, rpc, contractAddressRaw string
	var gasLimit uint64
	var simulate bool
	var timeout uint
	var contractAddress common.Address

	var arg0 common.Address
	var arg0Raw string
	var arg1 common.Address
	var arg1Raw string
	var arg2 *big.Int
	var arg2Raw string
	var arg3 *big.Int
	var arg3Raw string
	var arg4 []byte
	var arg4Raw string

	cmd := &cobra.Command{
		Use:   "on-erc-1155-received",
		Short: "Execute the OnERC1155Received method on a DropperV3Facet contract",
		PreRunE: func(cmd *cobra.Command, args []string) error {
			if keyfile == "" {
				return fmt.Errorf("--keystore not specified")
			}

			if contractAddressRaw == "" {
				return fmt.Errorf("--contract not specified")
			} else if !common.IsHexAddress(contractAddressRaw) {
				return fmt.Errorf("--contract is not a valid Ethereum address")
			}
			contractAddress = common.HexToAddress(contractAddressRaw)

			if arg0Raw == "" {
				return fmt.Errorf("--arg-0 argument not specified")
			} else if !common.IsHexAddress(arg0Raw) {
				return fmt.Errorf("--arg-0 argument is not a valid Ethereum address")
			}
			arg0 = common.HexToAddress(arg0Raw)

			if arg1Raw == "" {
				return fmt.Errorf("--arg-1 argument not specified")
			} else if !common.IsHexAddress(arg1Raw) {
				return fmt.Errorf("--arg-1 argument is not a valid Ethereum address")
			}
			arg1 = common.HexToAddress(arg1Raw)

			if arg2Raw == "" {
				return fmt.Errorf("--arg-2 argument not specified")
			}
			arg2 = new(big.Int)
			arg2.SetString(arg2Raw, 0)

			if arg3Raw == "" {
				return fmt.Errorf("--arg-3 argument not specified")
			}
			arg3 = new(big.Int)
			arg3.SetString(arg3Raw, 0)

			var arg4Intermediate []byte

			var arg4IntermediateHexDecodeErr error
			arg4Intermediate, arg4IntermediateHexDecodeErr = hex.DecodeString(arg4Raw)
			if arg4IntermediateHexDecodeErr != nil {
				return arg4IntermediateHexDecodeErr
			}

			copy(arg4[:], arg4Intermediate)

			return nil
		},
		RunE: func(cmd *cobra.Command, args []string) error {
			client, clientErr := NewClient(rpc)
			if clientErr != nil {
				return clientErr
			}

			key, keyErr := KeyFromFile(keyfile, password)
			if keyErr != nil {
				return keyErr
			}

			chainIDCtx, cancelChainIDCtx := NewChainContext(timeout)
			defer cancelChainIDCtx()
			chainID, chainIDErr := client.ChainID(chainIDCtx)
			if chainIDErr != nil {
				return chainIDErr
			}

			transactionOpts, transactionOptsErr := bind.NewKeyedTransactorWithChainID(key.PrivateKey, chainID)
			if transactionOptsErr != nil {
				return transactionOptsErr
			}

			SetTransactionParametersFromArgs(transactionOpts, nonce, value, gasPrice, maxFeePerGas, maxPriorityFeePerGas, gasLimit, simulate)

			contract, contractErr := NewDropperV3Facet(contractAddress, client)
			if contractErr != nil {
				return contractErr
			}

			session := DropperV3FacetTransactorSession{
				Contract:     &contract.DropperV3FacetTransactor,
				TransactOpts: *transactionOpts,
			}

			transaction, transactionErr := session.OnERC1155Received(
				arg0,
				arg1,
				arg2,
				arg3,
				arg4,
			)
			if transactionErr != nil {
				return transactionErr
			}

			cmd.Printf("Transaction hash: %s\n", transaction.Hash().Hex())
			if transactionOpts.NoSend {
				estimationMessage := ethereum.CallMsg{
					From: transactionOpts.From,
					To:   &contractAddress,
					Data: transaction.Data(),
				}

				gasEstimationCtx, cancelGasEstimationCtx := NewChainContext(timeout)
				defer cancelGasEstimationCtx()

				gasEstimate, gasEstimateErr := client.EstimateGas(gasEstimationCtx, estimationMessage)
				if gasEstimateErr != nil {
					return gasEstimateErr
				}

				transactionBinary, transactionBinaryErr := transaction.MarshalBinary()
				if transactionBinaryErr != nil {
					return transactionBinaryErr
				}
				transactionBinaryHex := hex.EncodeToString(transactionBinary)

				cmd.Printf("Transaction: %s\nEstimated gas: %d\n", transactionBinaryHex, gasEstimate)
			} else {
				cmd.Println("Transaction submitted")
			}

			return nil
		},
	}

	cmd.Flags().StringVar(&rpc, "rpc", "", "URL of the JSONRPC API to use")
	cmd.Flags().StringVar(&keyfile, "keyfile", "", "Path to the keystore file to use for the transaction")
	cmd.Flags().StringVar(&password, "password", "", "Password to use to unlock the keystore (if not specified, you will be prompted for the password when the command executes)")
	cmd.Flags().StringVar(&nonce, "nonce", "", "Nonce to use for the transaction")
	cmd.Flags().StringVar(&value, "value", "", "Value to send with the transaction")
	cmd.Flags().StringVar(&gasPrice, "gas-price", "", "Gas price to use for the transaction")
	cmd.Flags().StringVar(&maxFeePerGas, "max-fee-per-gas", "", "Maximum fee per gas to use for the (EIP-1559) transaction")
	cmd.Flags().StringVar(&maxPriorityFeePerGas, "max-priority-fee-per-gas", "", "Maximum priority fee per gas to use for the (EIP-1559) transaction")
	cmd.Flags().Uint64Var(&gasLimit, "gas-limit", 0, "Gas limit for the transaction")
	cmd.Flags().BoolVar(&simulate, "simulate", false, "Simulate the transaction without sending it")
	cmd.Flags().UintVar(&timeout, "timeout", 60, "Timeout (in seconds) for interactions with the JSONRPC API")
	cmd.Flags().StringVar(&contractAddressRaw, "contract", "", "Address of the contract to interact with")

	cmd.Flags().StringVar(&arg0Raw, "arg-0", "", "arg-0 argument (common.Address)")
	cmd.Flags().StringVar(&arg1Raw, "arg-1", "", "arg-1 argument (common.Address)")
	cmd.Flags().StringVar(&arg2Raw, "arg-2", "", "arg-2 argument")
	cmd.Flags().StringVar(&arg3Raw, "arg-3", "", "arg-3 argument")
	cmd.Flags().StringVar(&arg4Raw, "arg-4", "", "arg-4 argument ([]byte)")

	return cmd
}
func CreateOnErc721ReceivedCommand() *cobra.Command {
	var keyfile, nonce, password, value, gasPrice, maxFeePerGas, maxPriorityFeePerGas, rpc, contractAddressRaw string
	var gasLimit uint64
	var simulate bool
	var timeout uint
	var contractAddress common.Address

	var arg0 common.Address
	var arg0Raw string
	var arg1 common.Address
	var arg1Raw string
	var arg2 *big.Int
	var arg2Raw string
	var arg3 []byte
	var arg3Raw string

	cmd := &cobra.Command{
		Use:   "on-erc-721-received",
		Short: "Execute the OnERC721Received method on a DropperV3Facet contract",
		PreRunE: func(cmd *cobra.Command, args []string) error {
			if keyfile == "" {
				return fmt.Errorf("--keystore not specified")
			}

			if contractAddressRaw == "" {
				return fmt.Errorf("--contract not specified")
			} else if !common.IsHexAddress(contractAddressRaw) {
				return fmt.Errorf("--contract is not a valid Ethereum address")
			}
			contractAddress = common.HexToAddress(contractAddressRaw)

			if arg0Raw == "" {
				return fmt.Errorf("--arg-0 argument not specified")
			} else if !common.IsHexAddress(arg0Raw) {
				return fmt.Errorf("--arg-0 argument is not a valid Ethereum address")
			}
			arg0 = common.HexToAddress(arg0Raw)

			if arg1Raw == "" {
				return fmt.Errorf("--arg-1 argument not specified")
			} else if !common.IsHexAddress(arg1Raw) {
				return fmt.Errorf("--arg-1 argument is not a valid Ethereum address")
			}
			arg1 = common.HexToAddress(arg1Raw)

			if arg2Raw == "" {
				return fmt.Errorf("--arg-2 argument not specified")
			}
			arg2 = new(big.Int)
			arg2.SetString(arg2Raw, 0)

			var arg3Intermediate []byte

			var arg3IntermediateHexDecodeErr error
			arg3Intermediate, arg3IntermediateHexDecodeErr = hex.DecodeString(arg3Raw)
			if arg3IntermediateHexDecodeErr != nil {
				return arg3IntermediateHexDecodeErr
			}

			copy(arg3[:], arg3Intermediate)

			return nil
		},
		RunE: func(cmd *cobra.Command, args []string) error {
			client, clientErr := NewClient(rpc)
			if clientErr != nil {
				return clientErr
			}

			key, keyErr := KeyFromFile(keyfile, password)
			if keyErr != nil {
				return keyErr
			}

			chainIDCtx, cancelChainIDCtx := NewChainContext(timeout)
			defer cancelChainIDCtx()
			chainID, chainIDErr := client.ChainID(chainIDCtx)
			if chainIDErr != nil {
				return chainIDErr
			}

			transactionOpts, transactionOptsErr := bind.NewKeyedTransactorWithChainID(key.PrivateKey, chainID)
			if transactionOptsErr != nil {
				return transactionOptsErr
			}

			SetTransactionParametersFromArgs(transactionOpts, nonce, value, gasPrice, maxFeePerGas, maxPriorityFeePerGas, gasLimit, simulate)

			contract, contractErr := NewDropperV3Facet(contractAddress, client)
			if contractErr != nil {
				return contractErr
			}

			session := DropperV3FacetTransactorSession{
				Contract:     &contract.DropperV3FacetTransactor,
				TransactOpts: *transactionOpts,
			}

			transaction, transactionErr := session.OnERC721Received(
				arg0,
				arg1,
				arg2,
				arg3,
			)
			if transactionErr != nil {
				return transactionErr
			}

			cmd.Printf("Transaction hash: %s\n", transaction.Hash().Hex())
			if transactionOpts.NoSend {
				estimationMessage := ethereum.CallMsg{
					From: transactionOpts.From,
					To:   &contractAddress,
					Data: transaction.Data(),
				}

				gasEstimationCtx, cancelGasEstimationCtx := NewChainContext(timeout)
				defer cancelGasEstimationCtx()

				gasEstimate, gasEstimateErr := client.EstimateGas(gasEstimationCtx, estimationMessage)
				if gasEstimateErr != nil {
					return gasEstimateErr
				}

				transactionBinary, transactionBinaryErr := transaction.MarshalBinary()
				if transactionBinaryErr != nil {
					return transactionBinaryErr
				}
				transactionBinaryHex := hex.EncodeToString(transactionBinary)

				cmd.Printf("Transaction: %s\nEstimated gas: %d\n", transactionBinaryHex, gasEstimate)
			} else {
				cmd.Println("Transaction submitted")
			}

			return nil
		},
	}

	cmd.Flags().StringVar(&rpc, "rpc", "", "URL of the JSONRPC API to use")
	cmd.Flags().StringVar(&keyfile, "keyfile", "", "Path to the keystore file to use for the transaction")
	cmd.Flags().StringVar(&password, "password", "", "Password to use to unlock the keystore (if not specified, you will be prompted for the password when the command executes)")
	cmd.Flags().StringVar(&nonce, "nonce", "", "Nonce to use for the transaction")
	cmd.Flags().StringVar(&value, "value", "", "Value to send with the transaction")
	cmd.Flags().StringVar(&gasPrice, "gas-price", "", "Gas price to use for the transaction")
	cmd.Flags().StringVar(&maxFeePerGas, "max-fee-per-gas", "", "Maximum fee per gas to use for the (EIP-1559) transaction")
	cmd.Flags().StringVar(&maxPriorityFeePerGas, "max-priority-fee-per-gas", "", "Maximum priority fee per gas to use for the (EIP-1559) transaction")
	cmd.Flags().Uint64Var(&gasLimit, "gas-limit", 0, "Gas limit for the transaction")
	cmd.Flags().BoolVar(&simulate, "simulate", false, "Simulate the transaction without sending it")
	cmd.Flags().UintVar(&timeout, "timeout", 60, "Timeout (in seconds) for interactions with the JSONRPC API")
	cmd.Flags().StringVar(&contractAddressRaw, "contract", "", "Address of the contract to interact with")

	cmd.Flags().StringVar(&arg0Raw, "arg-0", "", "arg-0 argument (common.Address)")
	cmd.Flags().StringVar(&arg1Raw, "arg-1", "", "arg-1 argument (common.Address)")
	cmd.Flags().StringVar(&arg2Raw, "arg-2", "", "arg-2 argument")
	cmd.Flags().StringVar(&arg3Raw, "arg-3", "", "arg-3 argument ([]byte)")

	return cmd
}
func CreateReceiveCommand() *cobra.Command {
	var keyfile, nonce, password, value, gasPrice, maxFeePerGas, maxPriorityFeePerGas, rpc, contractAddressRaw string
	var gasLimit uint64
	var simulate bool
	var timeout uint
	var contractAddress common.Address

	cmd := &cobra.Command{
		Use:   "receive",
		Short: "Execute the Receive method on a DropperV3Facet contract",
		PreRunE: func(cmd *cobra.Command, args []string) error {
			if keyfile == "" {
				return fmt.Errorf("--keystore not specified")
			}

			if contractAddressRaw == "" {
				return fmt.Errorf("--contract not specified")
			} else if !common.IsHexAddress(contractAddressRaw) {
				return fmt.Errorf("--contract is not a valid Ethereum address")
			}
			contractAddress = common.HexToAddress(contractAddressRaw)

			return nil
		},
		RunE: func(cmd *cobra.Command, args []string) error {
			client, clientErr := NewClient(rpc)
			if clientErr != nil {
				return clientErr
			}

			key, keyErr := KeyFromFile(keyfile, password)
			if keyErr != nil {
				return keyErr
			}

			chainIDCtx, cancelChainIDCtx := NewChainContext(timeout)
			defer cancelChainIDCtx()
			chainID, chainIDErr := client.ChainID(chainIDCtx)
			if chainIDErr != nil {
				return chainIDErr
			}

			transactionOpts, transactionOptsErr := bind.NewKeyedTransactorWithChainID(key.PrivateKey, chainID)
			if transactionOptsErr != nil {
				return transactionOptsErr
			}

			SetTransactionParametersFromArgs(transactionOpts, nonce, value, gasPrice, maxFeePerGas, maxPriorityFeePerGas, gasLimit, simulate)

			contract, contractErr := NewDropperV3Facet(contractAddress, client)
			if contractErr != nil {
				return contractErr
			}

			session := DropperV3FacetTransactorSession{
				Contract:     &contract.DropperV3FacetTransactor,
				TransactOpts: *transactionOpts,
			}

			transaction, transactionErr := session.Receive()
			if transactionErr != nil {
				return transactionErr
			}

			cmd.Printf("Transaction hash: %s\n", transaction.Hash().Hex())
			if transactionOpts.NoSend {
				estimationMessage := ethereum.CallMsg{
					From: transactionOpts.From,
					To:   &contractAddress,
					Data: transaction.Data(),
				}

				gasEstimationCtx, cancelGasEstimationCtx := NewChainContext(timeout)
				defer cancelGasEstimationCtx()

				gasEstimate, gasEstimateErr := client.EstimateGas(gasEstimationCtx, estimationMessage)
				if gasEstimateErr != nil {
					return gasEstimateErr
				}

				transactionBinary, transactionBinaryErr := transaction.MarshalBinary()
				if transactionBinaryErr != nil {
					return transactionBinaryErr
				}
				transactionBinaryHex := hex.EncodeToString(transactionBinary)

				cmd.Printf("Transaction: %s\nEstimated gas: %d\n", transactionBinaryHex, gasEstimate)
			} else {
				cmd.Println("Transaction submitted")
			}

			return nil
		},
	}

	cmd.Flags().StringVar(&rpc, "rpc", "", "URL of the JSONRPC API to use")
	cmd.Flags().StringVar(&keyfile, "keyfile", "", "Path to the keystore file to use for the transaction")
	cmd.Flags().StringVar(&password, "password", "", "Password to use to unlock the keystore (if not specified, you will be prompted for the password when the command executes)")
	cmd.Flags().StringVar(&nonce, "nonce", "", "Nonce to use for the transaction")
	cmd.Flags().StringVar(&value, "value", "", "Value to send with the transaction")
	cmd.Flags().StringVar(&gasPrice, "gas-price", "", "Gas price to use for the transaction")
	cmd.Flags().StringVar(&maxFeePerGas, "max-fee-per-gas", "", "Maximum fee per gas to use for the (EIP-1559) transaction")
	cmd.Flags().StringVar(&maxPriorityFeePerGas, "max-priority-fee-per-gas", "", "Maximum priority fee per gas to use for the (EIP-1559) transaction")
	cmd.Flags().Uint64Var(&gasLimit, "gas-limit", 0, "Gas limit for the transaction")
	cmd.Flags().BoolVar(&simulate, "simulate", false, "Simulate the transaction without sending it")
	cmd.Flags().UintVar(&timeout, "timeout", 60, "Timeout (in seconds) for interactions with the JSONRPC API")
	cmd.Flags().StringVar(&contractAddressRaw, "contract", "", "Address of the contract to interact with")

	return cmd
}
func CreateSetDropAuthorizationCommand() *cobra.Command {
	var keyfile, nonce, password, value, gasPrice, maxFeePerGas, maxPriorityFeePerGas, rpc, contractAddressRaw string
	var gasLimit uint64
	var simulate bool
	var timeout uint
	var contractAddress common.Address

	var dropId *big.Int
	var dropIdRaw string
	var terminusAddress common.Address
	var terminusAddressRaw string
	var poolId *big.Int
	var poolIdRaw string

	cmd := &cobra.Command{
		Use:   "set-drop-authorization",
		Short: "Execute the SetDropAuthorization method on a DropperV3Facet contract",
		PreRunE: func(cmd *cobra.Command, args []string) error {
			if keyfile == "" {
				return fmt.Errorf("--keystore not specified")
			}

			if contractAddressRaw == "" {
				return fmt.Errorf("--contract not specified")
			} else if !common.IsHexAddress(contractAddressRaw) {
				return fmt.Errorf("--contract is not a valid Ethereum address")
			}
			contractAddress = common.HexToAddress(contractAddressRaw)

			if dropIdRaw == "" {
				return fmt.Errorf("--drop-id argument not specified")
			}
			dropId = new(big.Int)
			dropId.SetString(dropIdRaw, 0)

			if terminusAddressRaw == "" {
				return fmt.Errorf("--terminus-address argument not specified")
			} else if !common.IsHexAddress(terminusAddressRaw) {
				return fmt.Errorf("--terminus-address argument is not a valid Ethereum address")
			}
			terminusAddress = common.HexToAddress(terminusAddressRaw)

			if poolIdRaw == "" {
				return fmt.Errorf("--pool-id argument not specified")
			}
			poolId = new(big.Int)
			poolId.SetString(poolIdRaw, 0)

			return nil
		},
		RunE: func(cmd *cobra.Command, args []string) error {
			client, clientErr := NewClient(rpc)
			if clientErr != nil {
				return clientErr
			}

			key, keyErr := KeyFromFile(keyfile, password)
			if keyErr != nil {
				return keyErr
			}

			chainIDCtx, cancelChainIDCtx := NewChainContext(timeout)
			defer cancelChainIDCtx()
			chainID, chainIDErr := client.ChainID(chainIDCtx)
			if chainIDErr != nil {
				return chainIDErr
			}

			transactionOpts, transactionOptsErr := bind.NewKeyedTransactorWithChainID(key.PrivateKey, chainID)
			if transactionOptsErr != nil {
				return transactionOptsErr
			}

			SetTransactionParametersFromArgs(transactionOpts, nonce, value, gasPrice, maxFeePerGas, maxPriorityFeePerGas, gasLimit, simulate)

			contract, contractErr := NewDropperV3Facet(contractAddress, client)
			if contractErr != nil {
				return contractErr
			}

			session := DropperV3FacetTransactorSession{
				Contract:     &contract.DropperV3FacetTransactor,
				TransactOpts: *transactionOpts,
			}

			transaction, transactionErr := session.SetDropAuthorization(
				dropId,
				terminusAddress,
				poolId,
			)
			if transactionErr != nil {
				return transactionErr
			}

			cmd.Printf("Transaction hash: %s\n", transaction.Hash().Hex())
			if transactionOpts.NoSend {
				estimationMessage := ethereum.CallMsg{
					From: transactionOpts.From,
					To:   &contractAddress,
					Data: transaction.Data(),
				}

				gasEstimationCtx, cancelGasEstimationCtx := NewChainContext(timeout)
				defer cancelGasEstimationCtx()

				gasEstimate, gasEstimateErr := client.EstimateGas(gasEstimationCtx, estimationMessage)
				if gasEstimateErr != nil {
					return gasEstimateErr
				}

				transactionBinary, transactionBinaryErr := transaction.MarshalBinary()
				if transactionBinaryErr != nil {
					return transactionBinaryErr
				}
				transactionBinaryHex := hex.EncodeToString(transactionBinary)

				cmd.Printf("Transaction: %s\nEstimated gas: %d\n", transactionBinaryHex, gasEstimate)
			} else {
				cmd.Println("Transaction submitted")
			}

			return nil
		},
	}

	cmd.Flags().StringVar(&rpc, "rpc", "", "URL of the JSONRPC API to use")
	cmd.Flags().StringVar(&keyfile, "keyfile", "", "Path to the keystore file to use for the transaction")
	cmd.Flags().StringVar(&password, "password", "", "Password to use to unlock the keystore (if not specified, you will be prompted for the password when the command executes)")
	cmd.Flags().StringVar(&nonce, "nonce", "", "Nonce to use for the transaction")
	cmd.Flags().StringVar(&value, "value", "", "Value to send with the transaction")
	cmd.Flags().StringVar(&gasPrice, "gas-price", "", "Gas price to use for the transaction")
	cmd.Flags().StringVar(&maxFeePerGas, "max-fee-per-gas", "", "Maximum fee per gas to use for the (EIP-1559) transaction")
	cmd.Flags().StringVar(&maxPriorityFeePerGas, "max-priority-fee-per-gas", "", "Maximum priority fee per gas to use for the (EIP-1559) transaction")
	cmd.Flags().Uint64Var(&gasLimit, "gas-limit", 0, "Gas limit for the transaction")
	cmd.Flags().BoolVar(&simulate, "simulate", false, "Simulate the transaction without sending it")
	cmd.Flags().UintVar(&timeout, "timeout", 60, "Timeout (in seconds) for interactions with the JSONRPC API")
	cmd.Flags().StringVar(&contractAddressRaw, "contract", "", "Address of the contract to interact with")

	cmd.Flags().StringVar(&dropIdRaw, "drop-id", "", "drop-id argument")
	cmd.Flags().StringVar(&terminusAddressRaw, "terminus-address", "", "terminus-address argument (common.Address)")
	cmd.Flags().StringVar(&poolIdRaw, "pool-id", "", "pool-id argument")

	return cmd
}
func CreateSetDropStatusCommand() *cobra.Command {
	var keyfile, nonce, password, value, gasPrice, maxFeePerGas, maxPriorityFeePerGas, rpc, contractAddressRaw string
	var gasLimit uint64
	var simulate bool
	var timeout uint
	var contractAddress common.Address

	var dropId *big.Int
	var dropIdRaw string
	var status bool
	var statusRaw string

	cmd := &cobra.Command{
		Use:   "set-drop-status",
		Short: "Execute the SetDropStatus method on a DropperV3Facet contract",
		PreRunE: func(cmd *cobra.Command, args []string) error {
			if keyfile == "" {
				return fmt.Errorf("--keystore not specified")
			}

			if contractAddressRaw == "" {
				return fmt.Errorf("--contract not specified")
			} else if !common.IsHexAddress(contractAddressRaw) {
				return fmt.Errorf("--contract is not a valid Ethereum address")
			}
			contractAddress = common.HexToAddress(contractAddressRaw)

			if dropIdRaw == "" {
				return fmt.Errorf("--drop-id argument not specified")
			}
			dropId = new(big.Int)
			dropId.SetString(dropIdRaw, 0)

			statusRawLower := strings.ToLower(statusRaw)
			switch statusRawLower {
			case "true", "t", "y", "yes", "1":
				status = true
			case "false", "f", "n", "no", "0":
				status = false
			default:
				return fmt.Errorf("--status argument is not valid (value: %s)", statusRaw)
			}

			return nil
		},
		RunE: func(cmd *cobra.Command, args []string) error {
			client, clientErr := NewClient(rpc)
			if clientErr != nil {
				return clientErr
			}

			key, keyErr := KeyFromFile(keyfile, password)
			if keyErr != nil {
				return keyErr
			}

			chainIDCtx, cancelChainIDCtx := NewChainContext(timeout)
			defer cancelChainIDCtx()
			chainID, chainIDErr := client.ChainID(chainIDCtx)
			if chainIDErr != nil {
				return chainIDErr
			}

			transactionOpts, transactionOptsErr := bind.NewKeyedTransactorWithChainID(key.PrivateKey, chainID)
			if transactionOptsErr != nil {
				return transactionOptsErr
			}

			SetTransactionParametersFromArgs(transactionOpts, nonce, value, gasPrice, maxFeePerGas, maxPriorityFeePerGas, gasLimit, simulate)

			contract, contractErr := NewDropperV3Facet(contractAddress, client)
			if contractErr != nil {
				return contractErr
			}

			session := DropperV3FacetTransactorSession{
				Contract:     &contract.DropperV3FacetTransactor,
				TransactOpts: *transactionOpts,
			}

			transaction, transactionErr := session.SetDropStatus(
				dropId,
				status,
			)
			if transactionErr != nil {
				return transactionErr
			}

			cmd.Printf("Transaction hash: %s\n", transaction.Hash().Hex())
			if transactionOpts.NoSend {
				estimationMessage := ethereum.CallMsg{
					From: transactionOpts.From,
					To:   &contractAddress,
					Data: transaction.Data(),
				}

				gasEstimationCtx, cancelGasEstimationCtx := NewChainContext(timeout)
				defer cancelGasEstimationCtx()

				gasEstimate, gasEstimateErr := client.EstimateGas(gasEstimationCtx, estimationMessage)
				if gasEstimateErr != nil {
					return gasEstimateErr
				}

				transactionBinary, transactionBinaryErr := transaction.MarshalBinary()
				if transactionBinaryErr != nil {
					return transactionBinaryErr
				}
				transactionBinaryHex := hex.EncodeToString(transactionBinary)

				cmd.Printf("Transaction: %s\nEstimated gas: %d\n", transactionBinaryHex, gasEstimate)
			} else {
				cmd.Println("Transaction submitted")
			}

			return nil
		},
	}

	cmd.Flags().StringVar(&rpc, "rpc", "", "URL of the JSONRPC API to use")
	cmd.Flags().StringVar(&keyfile, "keyfile", "", "Path to the keystore file to use for the transaction")
	cmd.Flags().StringVar(&password, "password", "", "Password to use to unlock the keystore (if not specified, you will be prompted for the password when the command executes)")
	cmd.Flags().StringVar(&nonce, "nonce", "", "Nonce to use for the transaction")
	cmd.Flags().StringVar(&value, "value", "", "Value to send with the transaction")
	cmd.Flags().StringVar(&gasPrice, "gas-price", "", "Gas price to use for the transaction")
	cmd.Flags().StringVar(&maxFeePerGas, "max-fee-per-gas", "", "Maximum fee per gas to use for the (EIP-1559) transaction")
	cmd.Flags().StringVar(&maxPriorityFeePerGas, "max-priority-fee-per-gas", "", "Maximum priority fee per gas to use for the (EIP-1559) transaction")
	cmd.Flags().Uint64Var(&gasLimit, "gas-limit", 0, "Gas limit for the transaction")
	cmd.Flags().BoolVar(&simulate, "simulate", false, "Simulate the transaction without sending it")
	cmd.Flags().UintVar(&timeout, "timeout", 60, "Timeout (in seconds) for interactions with the JSONRPC API")
	cmd.Flags().StringVar(&contractAddressRaw, "contract", "", "Address of the contract to interact with")

	cmd.Flags().StringVar(&dropIdRaw, "drop-id", "", "drop-id argument")
	cmd.Flags().StringVar(&statusRaw, "status", "", "status argument (true, t, y, yes, 1 OR false, f, n, no, 0)")

	return cmd
}
func CreateSetDropUriCommand() *cobra.Command {
	var keyfile, nonce, password, value, gasPrice, maxFeePerGas, maxPriorityFeePerGas, rpc, contractAddressRaw string
	var gasLimit uint64
	var simulate bool
	var timeout uint
	var contractAddress common.Address

	var dropId *big.Int
	var dropIdRaw string
	var uri string

	cmd := &cobra.Command{
		Use:   "set-drop-uri",
		Short: "Execute the SetDropUri method on a DropperV3Facet contract",
		PreRunE: func(cmd *cobra.Command, args []string) error {
			if keyfile == "" {
				return fmt.Errorf("--keystore not specified")
			}

			if contractAddressRaw == "" {
				return fmt.Errorf("--contract not specified")
			} else if !common.IsHexAddress(contractAddressRaw) {
				return fmt.Errorf("--contract is not a valid Ethereum address")
			}
			contractAddress = common.HexToAddress(contractAddressRaw)

			if dropIdRaw == "" {
				return fmt.Errorf("--drop-id argument not specified")
			}
			dropId = new(big.Int)
			dropId.SetString(dropIdRaw, 0)

			return nil
		},
		RunE: func(cmd *cobra.Command, args []string) error {
			client, clientErr := NewClient(rpc)
			if clientErr != nil {
				return clientErr
			}

			key, keyErr := KeyFromFile(keyfile, password)
			if keyErr != nil {
				return keyErr
			}

			chainIDCtx, cancelChainIDCtx := NewChainContext(timeout)
			defer cancelChainIDCtx()
			chainID, chainIDErr := client.ChainID(chainIDCtx)
			if chainIDErr != nil {
				return chainIDErr
			}

			transactionOpts, transactionOptsErr := bind.NewKeyedTransactorWithChainID(key.PrivateKey, chainID)
			if transactionOptsErr != nil {
				return transactionOptsErr
			}

			SetTransactionParametersFromArgs(transactionOpts, nonce, value, gasPrice, maxFeePerGas, maxPriorityFeePerGas, gasLimit, simulate)

			contract, contractErr := NewDropperV3Facet(contractAddress, client)
			if contractErr != nil {
				return contractErr
			}

			session := DropperV3FacetTransactorSession{
				Contract:     &contract.DropperV3FacetTransactor,
				TransactOpts: *transactionOpts,
			}

			transaction, transactionErr := session.SetDropUri(
				dropId,
				uri,
			)
			if transactionErr != nil {
				return transactionErr
			}

			cmd.Printf("Transaction hash: %s\n", transaction.Hash().Hex())
			if transactionOpts.NoSend {
				estimationMessage := ethereum.CallMsg{
					From: transactionOpts.From,
					To:   &contractAddress,
					Data: transaction.Data(),
				}

				gasEstimationCtx, cancelGasEstimationCtx := NewChainContext(timeout)
				defer cancelGasEstimationCtx()

				gasEstimate, gasEstimateErr := client.EstimateGas(gasEstimationCtx, estimationMessage)
				if gasEstimateErr != nil {
					return gasEstimateErr
				}

				transactionBinary, transactionBinaryErr := transaction.MarshalBinary()
				if transactionBinaryErr != nil {
					return transactionBinaryErr
				}
				transactionBinaryHex := hex.EncodeToString(transactionBinary)

				cmd.Printf("Transaction: %s\nEstimated gas: %d\n", transactionBinaryHex, gasEstimate)
			} else {
				cmd.Println("Transaction submitted")
			}

			return nil
		},
	}

	cmd.Flags().StringVar(&rpc, "rpc", "", "URL of the JSONRPC API to use")
	cmd.Flags().StringVar(&keyfile, "keyfile", "", "Path to the keystore file to use for the transaction")
	cmd.Flags().StringVar(&password, "password", "", "Password to use to unlock the keystore (if not specified, you will be prompted for the password when the command executes)")
	cmd.Flags().StringVar(&nonce, "nonce", "", "Nonce to use for the transaction")
	cmd.Flags().StringVar(&value, "value", "", "Value to send with the transaction")
	cmd.Flags().StringVar(&gasPrice, "gas-price", "", "Gas price to use for the transaction")
	cmd.Flags().StringVar(&maxFeePerGas, "max-fee-per-gas", "", "Maximum fee per gas to use for the (EIP-1559) transaction")
	cmd.Flags().StringVar(&maxPriorityFeePerGas, "max-priority-fee-per-gas", "", "Maximum priority fee per gas to use for the (EIP-1559) transaction")
	cmd.Flags().Uint64Var(&gasLimit, "gas-limit", 0, "Gas limit for the transaction")
	cmd.Flags().BoolVar(&simulate, "simulate", false, "Simulate the transaction without sending it")
	cmd.Flags().UintVar(&timeout, "timeout", 60, "Timeout (in seconds) for interactions with the JSONRPC API")
	cmd.Flags().StringVar(&contractAddressRaw, "contract", "", "Address of the contract to interact with")

	cmd.Flags().StringVar(&dropIdRaw, "drop-id", "", "drop-id argument")
	cmd.Flags().StringVar(&uri, "uri", "", "uri argument")

	return cmd
}
func CreateSetMaxNumberOfTokensCommand() *cobra.Command {
	var keyfile, nonce, password, value, gasPrice, maxFeePerGas, maxPriorityFeePerGas, rpc, contractAddressRaw string
	var gasLimit uint64
	var simulate bool
	var timeout uint
	var contractAddress common.Address

	var dropId *big.Int
	var dropIdRaw string
	var maxNumberOfTokens *big.Int
	var maxNumberOfTokensRaw string

	cmd := &cobra.Command{
		Use:   "set-max-number-of-tokens",
		Short: "Execute the SetMaxNumberOfTokens method on a DropperV3Facet contract",
		PreRunE: func(cmd *cobra.Command, args []string) error {
			if keyfile == "" {
				return fmt.Errorf("--keystore not specified")
			}

			if contractAddressRaw == "" {
				return fmt.Errorf("--contract not specified")
			} else if !common.IsHexAddress(contractAddressRaw) {
				return fmt.Errorf("--contract is not a valid Ethereum address")
			}
			contractAddress = common.HexToAddress(contractAddressRaw)

			if dropIdRaw == "" {
				return fmt.Errorf("--drop-id argument not specified")
			}
			dropId = new(big.Int)
			dropId.SetString(dropIdRaw, 0)

			if maxNumberOfTokensRaw == "" {
				return fmt.Errorf("--max-number-of-tokens argument not specified")
			}
			maxNumberOfTokens = new(big.Int)
			maxNumberOfTokens.SetString(maxNumberOfTokensRaw, 0)

			return nil
		},
		RunE: func(cmd *cobra.Command, args []string) error {
			client, clientErr := NewClient(rpc)
			if clientErr != nil {
				return clientErr
			}

			key, keyErr := KeyFromFile(keyfile, password)
			if keyErr != nil {
				return keyErr
			}

			chainIDCtx, cancelChainIDCtx := NewChainContext(timeout)
			defer cancelChainIDCtx()
			chainID, chainIDErr := client.ChainID(chainIDCtx)
			if chainIDErr != nil {
				return chainIDErr
			}

			transactionOpts, transactionOptsErr := bind.NewKeyedTransactorWithChainID(key.PrivateKey, chainID)
			if transactionOptsErr != nil {
				return transactionOptsErr
			}

			SetTransactionParametersFromArgs(transactionOpts, nonce, value, gasPrice, maxFeePerGas, maxPriorityFeePerGas, gasLimit, simulate)

			contract, contractErr := NewDropperV3Facet(contractAddress, client)
			if contractErr != nil {
				return contractErr
			}

			session := DropperV3FacetTransactorSession{
				Contract:     &contract.DropperV3FacetTransactor,
				TransactOpts: *transactionOpts,
			}

			transaction, transactionErr := session.SetMaxNumberOfTokens(
				dropId,
				maxNumberOfTokens,
			)
			if transactionErr != nil {
				return transactionErr
			}

			cmd.Printf("Transaction hash: %s\n", transaction.Hash().Hex())
			if transactionOpts.NoSend {
				estimationMessage := ethereum.CallMsg{
					From: transactionOpts.From,
					To:   &contractAddress,
					Data: transaction.Data(),
				}

				gasEstimationCtx, cancelGasEstimationCtx := NewChainContext(timeout)
				defer cancelGasEstimationCtx()

				gasEstimate, gasEstimateErr := client.EstimateGas(gasEstimationCtx, estimationMessage)
				if gasEstimateErr != nil {
					return gasEstimateErr
				}

				transactionBinary, transactionBinaryErr := transaction.MarshalBinary()
				if transactionBinaryErr != nil {
					return transactionBinaryErr
				}
				transactionBinaryHex := hex.EncodeToString(transactionBinary)

				cmd.Printf("Transaction: %s\nEstimated gas: %d\n", transactionBinaryHex, gasEstimate)
			} else {
				cmd.Println("Transaction submitted")
			}

			return nil
		},
	}

	cmd.Flags().StringVar(&rpc, "rpc", "", "URL of the JSONRPC API to use")
	cmd.Flags().StringVar(&keyfile, "keyfile", "", "Path to the keystore file to use for the transaction")
	cmd.Flags().StringVar(&password, "password", "", "Password to use to unlock the keystore (if not specified, you will be prompted for the password when the command executes)")
	cmd.Flags().StringVar(&nonce, "nonce", "", "Nonce to use for the transaction")
	cmd.Flags().StringVar(&value, "value", "", "Value to send with the transaction")
	cmd.Flags().StringVar(&gasPrice, "gas-price", "", "Gas price to use for the transaction")
	cmd.Flags().StringVar(&maxFeePerGas, "max-fee-per-gas", "", "Maximum fee per gas to use for the (EIP-1559) transaction")
	cmd.Flags().StringVar(&maxPriorityFeePerGas, "max-priority-fee-per-gas", "", "Maximum priority fee per gas to use for the (EIP-1559) transaction")
	cmd.Flags().Uint64Var(&gasLimit, "gas-limit", 0, "Gas limit for the transaction")
	cmd.Flags().BoolVar(&simulate, "simulate", false, "Simulate the transaction without sending it")
	cmd.Flags().UintVar(&timeout, "timeout", 60, "Timeout (in seconds) for interactions with the JSONRPC API")
	cmd.Flags().StringVar(&contractAddressRaw, "contract", "", "Address of the contract to interact with")

	cmd.Flags().StringVar(&dropIdRaw, "drop-id", "", "drop-id argument")
	cmd.Flags().StringVar(&maxNumberOfTokensRaw, "max-number-of-tokens", "", "max-number-of-tokens argument")

	return cmd
}
func CreateSurrenderPoolControlCommand() *cobra.Command {
	var keyfile, nonce, password, value, gasPrice, maxFeePerGas, maxPriorityFeePerGas, rpc, contractAddressRaw string
	var gasLimit uint64
	var simulate bool
	var timeout uint
	var contractAddress common.Address

	var poolId *big.Int
	var poolIdRaw string
	var terminusAddress common.Address
	var terminusAddressRaw string
	var newPoolController common.Address
	var newPoolControllerRaw string

	cmd := &cobra.Command{
		Use:   "surrender-pool-control",
		Short: "Execute the SurrenderPoolControl method on a DropperV3Facet contract",
		PreRunE: func(cmd *cobra.Command, args []string) error {
			if keyfile == "" {
				return fmt.Errorf("--keystore not specified")
			}

			if contractAddressRaw == "" {
				return fmt.Errorf("--contract not specified")
			} else if !common.IsHexAddress(contractAddressRaw) {
				return fmt.Errorf("--contract is not a valid Ethereum address")
			}
			contractAddress = common.HexToAddress(contractAddressRaw)

			if poolIdRaw == "" {
				return fmt.Errorf("--pool-id argument not specified")
			}
			poolId = new(big.Int)
			poolId.SetString(poolIdRaw, 0)

			if terminusAddressRaw == "" {
				return fmt.Errorf("--terminus-address argument not specified")
			} else if !common.IsHexAddress(terminusAddressRaw) {
				return fmt.Errorf("--terminus-address argument is not a valid Ethereum address")
			}
			terminusAddress = common.HexToAddress(terminusAddressRaw)

			if newPoolControllerRaw == "" {
				return fmt.Errorf("--new-pool-controller argument not specified")
			} else if !common.IsHexAddress(newPoolControllerRaw) {
				return fmt.Errorf("--new-pool-controller argument is not a valid Ethereum address")
			}
			newPoolController = common.HexToAddress(newPoolControllerRaw)

			return nil
		},
		RunE: func(cmd *cobra.Command, args []string) error {
			client, clientErr := NewClient(rpc)
			if clientErr != nil {
				return clientErr
			}

			key, keyErr := KeyFromFile(keyfile, password)
			if keyErr != nil {
				return keyErr
			}

			chainIDCtx, cancelChainIDCtx := NewChainContext(timeout)
			defer cancelChainIDCtx()
			chainID, chainIDErr := client.ChainID(chainIDCtx)
			if chainIDErr != nil {
				return chainIDErr
			}

			transactionOpts, transactionOptsErr := bind.NewKeyedTransactorWithChainID(key.PrivateKey, chainID)
			if transactionOptsErr != nil {
				return transactionOptsErr
			}

			SetTransactionParametersFromArgs(transactionOpts, nonce, value, gasPrice, maxFeePerGas, maxPriorityFeePerGas, gasLimit, simulate)

			contract, contractErr := NewDropperV3Facet(contractAddress, client)
			if contractErr != nil {
				return contractErr
			}

			session := DropperV3FacetTransactorSession{
				Contract:     &contract.DropperV3FacetTransactor,
				TransactOpts: *transactionOpts,
			}

			transaction, transactionErr := session.SurrenderPoolControl(
				poolId,
				terminusAddress,
				newPoolController,
			)
			if transactionErr != nil {
				return transactionErr
			}

			cmd.Printf("Transaction hash: %s\n", transaction.Hash().Hex())
			if transactionOpts.NoSend {
				estimationMessage := ethereum.CallMsg{
					From: transactionOpts.From,
					To:   &contractAddress,
					Data: transaction.Data(),
				}

				gasEstimationCtx, cancelGasEstimationCtx := NewChainContext(timeout)
				defer cancelGasEstimationCtx()

				gasEstimate, gasEstimateErr := client.EstimateGas(gasEstimationCtx, estimationMessage)
				if gasEstimateErr != nil {
					return gasEstimateErr
				}

				transactionBinary, transactionBinaryErr := transaction.MarshalBinary()
				if transactionBinaryErr != nil {
					return transactionBinaryErr
				}
				transactionBinaryHex := hex.EncodeToString(transactionBinary)

				cmd.Printf("Transaction: %s\nEstimated gas: %d\n", transactionBinaryHex, gasEstimate)
			} else {
				cmd.Println("Transaction submitted")
			}

			return nil
		},
	}

	cmd.Flags().StringVar(&rpc, "rpc", "", "URL of the JSONRPC API to use")
	cmd.Flags().StringVar(&keyfile, "keyfile", "", "Path to the keystore file to use for the transaction")
	cmd.Flags().StringVar(&password, "password", "", "Password to use to unlock the keystore (if not specified, you will be prompted for the password when the command executes)")
	cmd.Flags().StringVar(&nonce, "nonce", "", "Nonce to use for the transaction")
	cmd.Flags().StringVar(&value, "value", "", "Value to send with the transaction")
	cmd.Flags().StringVar(&gasPrice, "gas-price", "", "Gas price to use for the transaction")
	cmd.Flags().StringVar(&maxFeePerGas, "max-fee-per-gas", "", "Maximum fee per gas to use for the (EIP-1559) transaction")
	cmd.Flags().StringVar(&maxPriorityFeePerGas, "max-priority-fee-per-gas", "", "Maximum priority fee per gas to use for the (EIP-1559) transaction")
	cmd.Flags().Uint64Var(&gasLimit, "gas-limit", 0, "Gas limit for the transaction")
	cmd.Flags().BoolVar(&simulate, "simulate", false, "Simulate the transaction without sending it")
	cmd.Flags().UintVar(&timeout, "timeout", 60, "Timeout (in seconds) for interactions with the JSONRPC API")
	cmd.Flags().StringVar(&contractAddressRaw, "contract", "", "Address of the contract to interact with")

	cmd.Flags().StringVar(&poolIdRaw, "pool-id", "", "pool-id argument")
	cmd.Flags().StringVar(&terminusAddressRaw, "terminus-address", "", "terminus-address argument (common.Address)")
	cmd.Flags().StringVar(&newPoolControllerRaw, "new-pool-controller", "", "new-pool-controller argument (common.Address)")

	return cmd
}
func CreateWithdrawErc1155Command() *cobra.Command {
	var keyfile, nonce, password, value, gasPrice, maxFeePerGas, maxPriorityFeePerGas, rpc, contractAddressRaw string
	var gasLimit uint64
	var simulate bool
	var timeout uint
	var contractAddress common.Address

	var tokenAddress common.Address
	var tokenAddressRaw string
	var tokenId *big.Int
	var tokenIdRaw string
	var amount *big.Int
	var amountRaw string

	cmd := &cobra.Command{
		Use:   "withdraw-erc-1155",
		Short: "Execute the WithdrawERC1155 method on a DropperV3Facet contract",
		PreRunE: func(cmd *cobra.Command, args []string) error {
			if keyfile == "" {
				return fmt.Errorf("--keystore not specified")
			}

			if contractAddressRaw == "" {
				return fmt.Errorf("--contract not specified")
			} else if !common.IsHexAddress(contractAddressRaw) {
				return fmt.Errorf("--contract is not a valid Ethereum address")
			}
			contractAddress = common.HexToAddress(contractAddressRaw)

			if tokenAddressRaw == "" {
				return fmt.Errorf("--token-address argument not specified")
			} else if !common.IsHexAddress(tokenAddressRaw) {
				return fmt.Errorf("--token-address argument is not a valid Ethereum address")
			}
			tokenAddress = common.HexToAddress(tokenAddressRaw)

			if tokenIdRaw == "" {
				return fmt.Errorf("--token-id argument not specified")
			}
			tokenId = new(big.Int)
			tokenId.SetString(tokenIdRaw, 0)

			if amountRaw == "" {
				return fmt.Errorf("--amount argument not specified")
			}
			amount = new(big.Int)
			amount.SetString(amountRaw, 0)

			return nil
		},
		RunE: func(cmd *cobra.Command, args []string) error {
			client, clientErr := NewClient(rpc)
			if clientErr != nil {
				return clientErr
			}

			key, keyErr := KeyFromFile(keyfile, password)
			if keyErr != nil {
				return keyErr
			}

			chainIDCtx, cancelChainIDCtx := NewChainContext(timeout)
			defer cancelChainIDCtx()
			chainID, chainIDErr := client.ChainID(chainIDCtx)
			if chainIDErr != nil {
				return chainIDErr
			}

			transactionOpts, transactionOptsErr := bind.NewKeyedTransactorWithChainID(key.PrivateKey, chainID)
			if transactionOptsErr != nil {
				return transactionOptsErr
			}

			SetTransactionParametersFromArgs(transactionOpts, nonce, value, gasPrice, maxFeePerGas, maxPriorityFeePerGas, gasLimit, simulate)

			contract, contractErr := NewDropperV3Facet(contractAddress, client)
			if contractErr != nil {
				return contractErr
			}

			session := DropperV3FacetTransactorSession{
				Contract:     &contract.DropperV3FacetTransactor,
				TransactOpts: *transactionOpts,
			}

			transaction, transactionErr := session.WithdrawERC1155(
				tokenAddress,
				tokenId,
				amount,
			)
			if transactionErr != nil {
				return transactionErr
			}

			cmd.Printf("Transaction hash: %s\n", transaction.Hash().Hex())
			if transactionOpts.NoSend {
				estimationMessage := ethereum.CallMsg{
					From: transactionOpts.From,
					To:   &contractAddress,
					Data: transaction.Data(),
				}

				gasEstimationCtx, cancelGasEstimationCtx := NewChainContext(timeout)
				defer cancelGasEstimationCtx()

				gasEstimate, gasEstimateErr := client.EstimateGas(gasEstimationCtx, estimationMessage)
				if gasEstimateErr != nil {
					return gasEstimateErr
				}

				transactionBinary, transactionBinaryErr := transaction.MarshalBinary()
				if transactionBinaryErr != nil {
					return transactionBinaryErr
				}
				transactionBinaryHex := hex.EncodeToString(transactionBinary)

				cmd.Printf("Transaction: %s\nEstimated gas: %d\n", transactionBinaryHex, gasEstimate)
			} else {
				cmd.Println("Transaction submitted")
			}

			return nil
		},
	}

	cmd.Flags().StringVar(&rpc, "rpc", "", "URL of the JSONRPC API to use")
	cmd.Flags().StringVar(&keyfile, "keyfile", "", "Path to the keystore file to use for the transaction")
	cmd.Flags().StringVar(&password, "password", "", "Password to use to unlock the keystore (if not specified, you will be prompted for the password when the command executes)")
	cmd.Flags().StringVar(&nonce, "nonce", "", "Nonce to use for the transaction")
	cmd.Flags().StringVar(&value, "value", "", "Value to send with the transaction")
	cmd.Flags().StringVar(&gasPrice, "gas-price", "", "Gas price to use for the transaction")
	cmd.Flags().StringVar(&maxFeePerGas, "max-fee-per-gas", "", "Maximum fee per gas to use for the (EIP-1559) transaction")
	cmd.Flags().StringVar(&maxPriorityFeePerGas, "max-priority-fee-per-gas", "", "Maximum priority fee per gas to use for the (EIP-1559) transaction")
	cmd.Flags().Uint64Var(&gasLimit, "gas-limit", 0, "Gas limit for the transaction")
	cmd.Flags().BoolVar(&simulate, "simulate", false, "Simulate the transaction without sending it")
	cmd.Flags().UintVar(&timeout, "timeout", 60, "Timeout (in seconds) for interactions with the JSONRPC API")
	cmd.Flags().StringVar(&contractAddressRaw, "contract", "", "Address of the contract to interact with")

	cmd.Flags().StringVar(&tokenAddressRaw, "token-address", "", "token-address argument (common.Address)")
	cmd.Flags().StringVar(&tokenIdRaw, "token-id", "", "token-id argument")
	cmd.Flags().StringVar(&amountRaw, "amount", "", "amount argument")

	return cmd
}
func CreateWithdrawErc20Command() *cobra.Command {
	var keyfile, nonce, password, value, gasPrice, maxFeePerGas, maxPriorityFeePerGas, rpc, contractAddressRaw string
	var gasLimit uint64
	var simulate bool
	var timeout uint
	var contractAddress common.Address

	var tokenAddress common.Address
	var tokenAddressRaw string
	var amount *big.Int
	var amountRaw string

	cmd := &cobra.Command{
		Use:   "withdraw-erc-20",
		Short: "Execute the WithdrawERC20 method on a DropperV3Facet contract",
		PreRunE: func(cmd *cobra.Command, args []string) error {
			if keyfile == "" {
				return fmt.Errorf("--keystore not specified")
			}

			if contractAddressRaw == "" {
				return fmt.Errorf("--contract not specified")
			} else if !common.IsHexAddress(contractAddressRaw) {
				return fmt.Errorf("--contract is not a valid Ethereum address")
			}
			contractAddress = common.HexToAddress(contractAddressRaw)

			if tokenAddressRaw == "" {
				return fmt.Errorf("--token-address argument not specified")
			} else if !common.IsHexAddress(tokenAddressRaw) {
				return fmt.Errorf("--token-address argument is not a valid Ethereum address")
			}
			tokenAddress = common.HexToAddress(tokenAddressRaw)

			if amountRaw == "" {
				return fmt.Errorf("--amount argument not specified")
			}
			amount = new(big.Int)
			amount.SetString(amountRaw, 0)

			return nil
		},
		RunE: func(cmd *cobra.Command, args []string) error {
			client, clientErr := NewClient(rpc)
			if clientErr != nil {
				return clientErr
			}

			key, keyErr := KeyFromFile(keyfile, password)
			if keyErr != nil {
				return keyErr
			}

			chainIDCtx, cancelChainIDCtx := NewChainContext(timeout)
			defer cancelChainIDCtx()
			chainID, chainIDErr := client.ChainID(chainIDCtx)
			if chainIDErr != nil {
				return chainIDErr
			}

			transactionOpts, transactionOptsErr := bind.NewKeyedTransactorWithChainID(key.PrivateKey, chainID)
			if transactionOptsErr != nil {
				return transactionOptsErr
			}

			SetTransactionParametersFromArgs(transactionOpts, nonce, value, gasPrice, maxFeePerGas, maxPriorityFeePerGas, gasLimit, simulate)

			contract, contractErr := NewDropperV3Facet(contractAddress, client)
			if contractErr != nil {
				return contractErr
			}

			session := DropperV3FacetTransactorSession{
				Contract:     &contract.DropperV3FacetTransactor,
				TransactOpts: *transactionOpts,
			}

			transaction, transactionErr := session.WithdrawERC20(
				tokenAddress,
				amount,
			)
			if transactionErr != nil {
				return transactionErr
			}

			cmd.Printf("Transaction hash: %s\n", transaction.Hash().Hex())
			if transactionOpts.NoSend {
				estimationMessage := ethereum.CallMsg{
					From: transactionOpts.From,
					To:   &contractAddress,
					Data: transaction.Data(),
				}

				gasEstimationCtx, cancelGasEstimationCtx := NewChainContext(timeout)
				defer cancelGasEstimationCtx()

				gasEstimate, gasEstimateErr := client.EstimateGas(gasEstimationCtx, estimationMessage)
				if gasEstimateErr != nil {
					return gasEstimateErr
				}

				transactionBinary, transactionBinaryErr := transaction.MarshalBinary()
				if transactionBinaryErr != nil {
					return transactionBinaryErr
				}
				transactionBinaryHex := hex.EncodeToString(transactionBinary)

				cmd.Printf("Transaction: %s\nEstimated gas: %d\n", transactionBinaryHex, gasEstimate)
			} else {
				cmd.Println("Transaction submitted")
			}

			return nil
		},
	}

	cmd.Flags().StringVar(&rpc, "rpc", "", "URL of the JSONRPC API to use")
	cmd.Flags().StringVar(&keyfile, "keyfile", "", "Path to the keystore file to use for the transaction")
	cmd.Flags().StringVar(&password, "password", "", "Password to use to unlock the keystore (if not specified, you will be prompted for the password when the command executes)")
	cmd.Flags().StringVar(&nonce, "nonce", "", "Nonce to use for the transaction")
	cmd.Flags().StringVar(&value, "value", "", "Value to send with the transaction")
	cmd.Flags().StringVar(&gasPrice, "gas-price", "", "Gas price to use for the transaction")
	cmd.Flags().StringVar(&maxFeePerGas, "max-fee-per-gas", "", "Maximum fee per gas to use for the (EIP-1559) transaction")
	cmd.Flags().StringVar(&maxPriorityFeePerGas, "max-priority-fee-per-gas", "", "Maximum priority fee per gas to use for the (EIP-1559) transaction")
	cmd.Flags().Uint64Var(&gasLimit, "gas-limit", 0, "Gas limit for the transaction")
	cmd.Flags().BoolVar(&simulate, "simulate", false, "Simulate the transaction without sending it")
	cmd.Flags().UintVar(&timeout, "timeout", 60, "Timeout (in seconds) for interactions with the JSONRPC API")
	cmd.Flags().StringVar(&contractAddressRaw, "contract", "", "Address of the contract to interact with")

	cmd.Flags().StringVar(&tokenAddressRaw, "token-address", "", "token-address argument (common.Address)")
	cmd.Flags().StringVar(&amountRaw, "amount", "", "amount argument")

	return cmd
}
func CreateWithdrawErc721Command() *cobra.Command {
	var keyfile, nonce, password, value, gasPrice, maxFeePerGas, maxPriorityFeePerGas, rpc, contractAddressRaw string
	var gasLimit uint64
	var simulate bool
	var timeout uint
	var contractAddress common.Address

	var tokenAddress common.Address
	var tokenAddressRaw string
	var tokenId *big.Int
	var tokenIdRaw string

	cmd := &cobra.Command{
		Use:   "withdraw-erc-721",
		Short: "Execute the WithdrawERC721 method on a DropperV3Facet contract",
		PreRunE: func(cmd *cobra.Command, args []string) error {
			if keyfile == "" {
				return fmt.Errorf("--keystore not specified")
			}

			if contractAddressRaw == "" {
				return fmt.Errorf("--contract not specified")
			} else if !common.IsHexAddress(contractAddressRaw) {
				return fmt.Errorf("--contract is not a valid Ethereum address")
			}
			contractAddress = common.HexToAddress(contractAddressRaw)

			if tokenAddressRaw == "" {
				return fmt.Errorf("--token-address argument not specified")
			} else if !common.IsHexAddress(tokenAddressRaw) {
				return fmt.Errorf("--token-address argument is not a valid Ethereum address")
			}
			tokenAddress = common.HexToAddress(tokenAddressRaw)

			if tokenIdRaw == "" {
				return fmt.Errorf("--token-id argument not specified")
			}
			tokenId = new(big.Int)
			tokenId.SetString(tokenIdRaw, 0)

			return nil
		},
		RunE: func(cmd *cobra.Command, args []string) error {
			client, clientErr := NewClient(rpc)
			if clientErr != nil {
				return clientErr
			}

			key, keyErr := KeyFromFile(keyfile, password)
			if keyErr != nil {
				return keyErr
			}

			chainIDCtx, cancelChainIDCtx := NewChainContext(timeout)
			defer cancelChainIDCtx()
			chainID, chainIDErr := client.ChainID(chainIDCtx)
			if chainIDErr != nil {
				return chainIDErr
			}

			transactionOpts, transactionOptsErr := bind.NewKeyedTransactorWithChainID(key.PrivateKey, chainID)
			if transactionOptsErr != nil {
				return transactionOptsErr
			}

			SetTransactionParametersFromArgs(transactionOpts, nonce, value, gasPrice, maxFeePerGas, maxPriorityFeePerGas, gasLimit, simulate)

			contract, contractErr := NewDropperV3Facet(contractAddress, client)
			if contractErr != nil {
				return contractErr
			}

			session := DropperV3FacetTransactorSession{
				Contract:     &contract.DropperV3FacetTransactor,
				TransactOpts: *transactionOpts,
			}

			transaction, transactionErr := session.WithdrawERC721(
				tokenAddress,
				tokenId,
			)
			if transactionErr != nil {
				return transactionErr
			}

			cmd.Printf("Transaction hash: %s\n", transaction.Hash().Hex())
			if transactionOpts.NoSend {
				estimationMessage := ethereum.CallMsg{
					From: transactionOpts.From,
					To:   &contractAddress,
					Data: transaction.Data(),
				}

				gasEstimationCtx, cancelGasEstimationCtx := NewChainContext(timeout)
				defer cancelGasEstimationCtx()

				gasEstimate, gasEstimateErr := client.EstimateGas(gasEstimationCtx, estimationMessage)
				if gasEstimateErr != nil {
					return gasEstimateErr
				}

				transactionBinary, transactionBinaryErr := transaction.MarshalBinary()
				if transactionBinaryErr != nil {
					return transactionBinaryErr
				}
				transactionBinaryHex := hex.EncodeToString(transactionBinary)

				cmd.Printf("Transaction: %s\nEstimated gas: %d\n", transactionBinaryHex, gasEstimate)
			} else {
				cmd.Println("Transaction submitted")
			}

			return nil
		},
	}

	cmd.Flags().StringVar(&rpc, "rpc", "", "URL of the JSONRPC API to use")
	cmd.Flags().StringVar(&keyfile, "keyfile", "", "Path to the keystore file to use for the transaction")
	cmd.Flags().StringVar(&password, "password", "", "Password to use to unlock the keystore (if not specified, you will be prompted for the password when the command executes)")
	cmd.Flags().StringVar(&nonce, "nonce", "", "Nonce to use for the transaction")
	cmd.Flags().StringVar(&value, "value", "", "Value to send with the transaction")
	cmd.Flags().StringVar(&gasPrice, "gas-price", "", "Gas price to use for the transaction")
	cmd.Flags().StringVar(&maxFeePerGas, "max-fee-per-gas", "", "Maximum fee per gas to use for the (EIP-1559) transaction")
	cmd.Flags().StringVar(&maxPriorityFeePerGas, "max-priority-fee-per-gas", "", "Maximum priority fee per gas to use for the (EIP-1559) transaction")
	cmd.Flags().Uint64Var(&gasLimit, "gas-limit", 0, "Gas limit for the transaction")
	cmd.Flags().BoolVar(&simulate, "simulate", false, "Simulate the transaction without sending it")
	cmd.Flags().UintVar(&timeout, "timeout", 60, "Timeout (in seconds) for interactions with the JSONRPC API")
	cmd.Flags().StringVar(&contractAddressRaw, "contract", "", "Address of the contract to interact with")

	cmd.Flags().StringVar(&tokenAddressRaw, "token-address", "", "token-address argument (common.Address)")
	cmd.Flags().StringVar(&tokenIdRaw, "token-id", "", "token-id argument")

	return cmd
}
func CreateWithdrawNativeTokenCommand() *cobra.Command {
	var keyfile, nonce, password, value, gasPrice, maxFeePerGas, maxPriorityFeePerGas, rpc, contractAddressRaw string
	var gasLimit uint64
	var simulate bool
	var timeout uint
	var contractAddress common.Address

	var amount *big.Int
	var amountRaw string

	cmd := &cobra.Command{
		Use:   "withdraw-native-token",
		Short: "Execute the WithdrawNativeToken method on a DropperV3Facet contract",
		PreRunE: func(cmd *cobra.Command, args []string) error {
			if keyfile == "" {
				return fmt.Errorf("--keystore not specified")
			}

			if contractAddressRaw == "" {
				return fmt.Errorf("--contract not specified")
			} else if !common.IsHexAddress(contractAddressRaw) {
				return fmt.Errorf("--contract is not a valid Ethereum address")
			}
			contractAddress = common.HexToAddress(contractAddressRaw)

			if amountRaw == "" {
				return fmt.Errorf("--amount argument not specified")
			}
			amount = new(big.Int)
			amount.SetString(amountRaw, 0)

			return nil
		},
		RunE: func(cmd *cobra.Command, args []string) error {
			client, clientErr := NewClient(rpc)
			if clientErr != nil {
				return clientErr
			}

			key, keyErr := KeyFromFile(keyfile, password)
			if keyErr != nil {
				return keyErr
			}

			chainIDCtx, cancelChainIDCtx := NewChainContext(timeout)
			defer cancelChainIDCtx()
			chainID, chainIDErr := client.ChainID(chainIDCtx)
			if chainIDErr != nil {
				return chainIDErr
			}

			transactionOpts, transactionOptsErr := bind.NewKeyedTransactorWithChainID(key.PrivateKey, chainID)
			if transactionOptsErr != nil {
				return transactionOptsErr
			}

			SetTransactionParametersFromArgs(transactionOpts, nonce, value, gasPrice, maxFeePerGas, maxPriorityFeePerGas, gasLimit, simulate)

			contract, contractErr := NewDropperV3Facet(contractAddress, client)
			if contractErr != nil {
				return contractErr
			}

			session := DropperV3FacetTransactorSession{
				Contract:     &contract.DropperV3FacetTransactor,
				TransactOpts: *transactionOpts,
			}

			transaction, transactionErr := session.WithdrawNativeToken(
				amount,
			)
			if transactionErr != nil {
				return transactionErr
			}

			cmd.Printf("Transaction hash: %s\n", transaction.Hash().Hex())
			if transactionOpts.NoSend {
				estimationMessage := ethereum.CallMsg{
					From: transactionOpts.From,
					To:   &contractAddress,
					Data: transaction.Data(),
				}

				gasEstimationCtx, cancelGasEstimationCtx := NewChainContext(timeout)
				defer cancelGasEstimationCtx()

				gasEstimate, gasEstimateErr := client.EstimateGas(gasEstimationCtx, estimationMessage)
				if gasEstimateErr != nil {
					return gasEstimateErr
				}

				transactionBinary, transactionBinaryErr := transaction.MarshalBinary()
				if transactionBinaryErr != nil {
					return transactionBinaryErr
				}
				transactionBinaryHex := hex.EncodeToString(transactionBinary)

				cmd.Printf("Transaction: %s\nEstimated gas: %d\n", transactionBinaryHex, gasEstimate)
			} else {
				cmd.Println("Transaction submitted")
			}

			return nil
		},
	}

	cmd.Flags().StringVar(&rpc, "rpc", "", "URL of the JSONRPC API to use")
	cmd.Flags().StringVar(&keyfile, "keyfile", "", "Path to the keystore file to use for the transaction")
	cmd.Flags().StringVar(&password, "password", "", "Password to use to unlock the keystore (if not specified, you will be prompted for the password when the command executes)")
	cmd.Flags().StringVar(&nonce, "nonce", "", "Nonce to use for the transaction")
	cmd.Flags().StringVar(&value, "value", "", "Value to send with the transaction")
	cmd.Flags().StringVar(&gasPrice, "gas-price", "", "Gas price to use for the transaction")
	cmd.Flags().StringVar(&maxFeePerGas, "max-fee-per-gas", "", "Maximum fee per gas to use for the (EIP-1559) transaction")
	cmd.Flags().StringVar(&maxPriorityFeePerGas, "max-priority-fee-per-gas", "", "Maximum priority fee per gas to use for the (EIP-1559) transaction")
	cmd.Flags().Uint64Var(&gasLimit, "gas-limit", 0, "Gas limit for the transaction")
	cmd.Flags().BoolVar(&simulate, "simulate", false, "Simulate the transaction without sending it")
	cmd.Flags().UintVar(&timeout, "timeout", 60, "Timeout (in seconds) for interactions with the JSONRPC API")
	cmd.Flags().StringVar(&contractAddressRaw, "contract", "", "Address of the contract to interact with")

	cmd.Flags().StringVar(&amountRaw, "amount", "", "amount argument")

	return cmd
}

var ErrNoRPCURL error = errors.New("no RPC URL provided -- please pass an RPC URL from the command line or set the DROPPER_V_3_FACET_RPC_URL environment variable")

// Generates an Ethereum client to the JSONRPC API at the given URL. If rpcURL is empty, then it
// attempts to read the RPC URL from the DROPPER_V_3_FACET_RPC_URL environment variable. If that is empty,
// too, then it returns an error.
func NewClient(rpcURL string) (*ethclient.Client, error) {
	if rpcURL == "" {
		rpcURL = os.Getenv("DROPPER_V_3_FACET_RPC_URL")
	}

	if rpcURL == "" {
		return nil, ErrNoRPCURL
	}

	client, err := ethclient.Dial(rpcURL)
	return client, err
}

// Creates a new context to be used when interacting with the chain client.
func NewChainContext(timeout uint) (context.Context, context.CancelFunc) {
	baseCtx := context.Background()
	parsedTimeout := time.Duration(timeout) * time.Second
	ctx, cancel := context.WithTimeout(baseCtx, parsedTimeout)
	return ctx, cancel
}

// Unlocks a key from a keystore (byte contents of a keystore file) with the given password.
func UnlockKeystore(keystoreData []byte, password string) (*keystore.Key, error) {
	key, err := keystore.DecryptKey(keystoreData, password)
	return key, err
}

// Loads a key from file, prompting the user for the password if it is not provided as a function argument.
func KeyFromFile(keystoreFile string, password string) (*keystore.Key, error) {
	var emptyKey *keystore.Key
	keystoreContent, readErr := os.ReadFile(keystoreFile)
	if readErr != nil {
		return emptyKey, readErr
	}

	// If password is "", prompt user for password.
	if password == "" {
		fmt.Printf("Please provide a password for keystore (%s): ", keystoreFile)
		passwordRaw, inputErr := term.ReadPassword(int(os.Stdin.Fd()))
		if inputErr != nil {
			return emptyKey, fmt.Errorf("error reading password: %s", inputErr.Error())
		}
		fmt.Print("\n")
		password = string(passwordRaw)
	}

	key, err := UnlockKeystore(keystoreContent, password)
	return key, err
}

// This method is used to set the parameters on a view call from command line arguments (represented mostly as
// strings).
func SetCallParametersFromArgs(opts *bind.CallOpts, pending bool, fromAddress, blockNumber string) {
	if pending {
		opts.Pending = true
	}

	if fromAddress != "" {
		opts.From = common.HexToAddress(fromAddress)
	}

	if blockNumber != "" {
		opts.BlockNumber = new(big.Int)
		opts.BlockNumber.SetString(blockNumber, 0)
	}
}

// This method is used to set the parameters on a transaction from command line arguments (represented mostly as
// strings).
func SetTransactionParametersFromArgs(opts *bind.TransactOpts, nonce, value, gasPrice, maxFeePerGas, maxPriorityFeePerGas string, gasLimit uint64, noSend bool) {
	if nonce != "" {
		opts.Nonce = new(big.Int)
		opts.Nonce.SetString(nonce, 0)
	}

	if value != "" {
		opts.Value = new(big.Int)
		opts.Value.SetString(value, 0)
	}

	if gasPrice != "" {
		opts.GasPrice = new(big.Int)
		opts.GasPrice.SetString(gasPrice, 0)
	}

	if maxFeePerGas != "" {
		opts.GasFeeCap = new(big.Int)
		opts.GasFeeCap.SetString(maxFeePerGas, 0)
	}

	if maxPriorityFeePerGas != "" {
		opts.GasTipCap = new(big.Int)
		opts.GasTipCap.SetString(maxPriorityFeePerGas, 0)
	}

	if gasLimit != 0 {
		opts.GasLimit = gasLimit
	}

	opts.NoSend = noSend
}

func CreateDropperV3FacetCommand() *cobra.Command {
	cmd := &cobra.Command{
		Use:   "dropper-v-3-facet",
		Short: "Interact with the DropperV3Facet contract",
		Run: func(cmd *cobra.Command, args []string) {
			cmd.Help()
		},
	}

	cmd.SetOut(os.Stdout)

	DeployGroup := &cobra.Group{
		ID: "deploy", Title: "Commands which deploy contracts",
	}
	cmd.AddGroup(DeployGroup)
	ViewGroup := &cobra.Group{
		ID: "view", Title: "Commands which view contract state",
	}
	TransactGroup := &cobra.Group{
		ID: "transact", Title: "Commands which submit transactions",
	}
	cmd.AddGroup(ViewGroup, TransactGroup)

	cmdDeployDropperV3Facet := CreateDropperV3FacetDeploymentCommand()
	cmdDeployDropperV3Facet.GroupID = DeployGroup.ID
	cmd.AddCommand(cmdDeployDropperV3Facet)

	cmdViewAdminTerminusInfo := CreateAdminTerminusInfoCommand()
	cmdViewAdminTerminusInfo.GroupID = ViewGroup.ID
	cmd.AddCommand(cmdViewAdminTerminusInfo)
	cmdViewClaimMessageHash := CreateClaimMessageHashCommand()
	cmdViewClaimMessageHash.GroupID = ViewGroup.ID
	cmd.AddCommand(cmdViewClaimMessageHash)
	cmdViewClaimStatus := CreateClaimStatusCommand()
	cmdViewClaimStatus.GroupID = ViewGroup.ID
	cmd.AddCommand(cmdViewClaimStatus)
	cmdViewDropStatus := CreateDropStatusCommand()
	cmdViewDropStatus.GroupID = ViewGroup.ID
	cmd.AddCommand(cmdViewDropStatus)
	cmdViewDropUri := CreateDropUriCommand()
	cmdViewDropUri.GroupID = ViewGroup.ID
	cmd.AddCommand(cmdViewDropUri)
	cmdViewDropperVersion := CreateDropperVersionCommand()
	cmdViewDropperVersion.GroupID = ViewGroup.ID
	cmd.AddCommand(cmdViewDropperVersion)
	cmdViewGetDrop := CreateGetDropCommand()
	cmdViewGetDrop.GroupID = ViewGroup.ID
	cmd.AddCommand(cmdViewGetDrop)
	cmdViewGetDropAuthorization := CreateGetDropAuthorizationCommand()
	cmdViewGetDropAuthorization.GroupID = ViewGroup.ID
	cmd.AddCommand(cmdViewGetDropAuthorization)
	cmdViewNumDrops := CreateNumDropsCommand()
	cmdViewNumDrops.GroupID = ViewGroup.ID
	cmd.AddCommand(cmdViewNumDrops)
	cmdViewSupportsInterface := CreateSupportsInterfaceCommand()
	cmdViewSupportsInterface.GroupID = ViewGroup.ID
	cmd.AddCommand(cmdViewSupportsInterface)

	cmdTransactBatchClaim := CreateBatchClaimCommand()
	cmdTransactBatchClaim.GroupID = TransactGroup.ID
	cmd.AddCommand(cmdTransactBatchClaim)
	cmdTransactBatchClaimFor := CreateBatchClaimForCommand()
	cmdTransactBatchClaimFor.GroupID = TransactGroup.ID
	cmd.AddCommand(cmdTransactBatchClaimFor)
	cmdTransactClaim := CreateClaimCommand()
	cmdTransactClaim.GroupID = TransactGroup.ID
	cmd.AddCommand(cmdTransactClaim)
	cmdTransactClaimFor := CreateClaimForCommand()
	cmdTransactClaimFor.GroupID = TransactGroup.ID
	cmd.AddCommand(cmdTransactClaimFor)
	cmdTransactCreateDrop := CreateCreateDropCommand()
	cmdTransactCreateDrop.GroupID = TransactGroup.ID
	cmd.AddCommand(cmdTransactCreateDrop)
	cmdTransactFallback := CreateFallbackCommand()
	cmdTransactFallback.GroupID = TransactGroup.ID
	cmd.AddCommand(cmdTransactFallback)
	cmdTransactInit := CreateInitCommand()
	cmdTransactInit.GroupID = TransactGroup.ID
	cmd.AddCommand(cmdTransactInit)
	cmdTransactOnERC1155BatchReceived := CreateOnErc1155BatchReceivedCommand()
	cmdTransactOnERC1155BatchReceived.GroupID = TransactGroup.ID
	cmd.AddCommand(cmdTransactOnERC1155BatchReceived)
	cmdTransactOnERC1155Received := CreateOnErc1155ReceivedCommand()
	cmdTransactOnERC1155Received.GroupID = TransactGroup.ID
	cmd.AddCommand(cmdTransactOnERC1155Received)
	cmdTransactOnERC721Received := CreateOnErc721ReceivedCommand()
	cmdTransactOnERC721Received.GroupID = TransactGroup.ID
	cmd.AddCommand(cmdTransactOnERC721Received)
	cmdTransactReceive := CreateReceiveCommand()
	cmdTransactReceive.GroupID = TransactGroup.ID
	cmd.AddCommand(cmdTransactReceive)
	cmdTransactSetDropAuthorization := CreateSetDropAuthorizationCommand()
	cmdTransactSetDropAuthorization.GroupID = TransactGroup.ID
	cmd.AddCommand(cmdTransactSetDropAuthorization)
	cmdTransactSetDropStatus := CreateSetDropStatusCommand()
	cmdTransactSetDropStatus.GroupID = TransactGroup.ID
	cmd.AddCommand(cmdTransactSetDropStatus)
	cmdTransactSetDropUri := CreateSetDropUriCommand()
	cmdTransactSetDropUri.GroupID = TransactGroup.ID
	cmd.AddCommand(cmdTransactSetDropUri)
	cmdTransactSetMaxNumberOfTokens := CreateSetMaxNumberOfTokensCommand()
	cmdTransactSetMaxNumberOfTokens.GroupID = TransactGroup.ID
	cmd.AddCommand(cmdTransactSetMaxNumberOfTokens)
	cmdTransactSurrenderPoolControl := CreateSurrenderPoolControlCommand()
	cmdTransactSurrenderPoolControl.GroupID = TransactGroup.ID
	cmd.AddCommand(cmdTransactSurrenderPoolControl)
	cmdTransactWithdrawERC1155 := CreateWithdrawErc1155Command()
	cmdTransactWithdrawERC1155.GroupID = TransactGroup.ID
	cmd.AddCommand(cmdTransactWithdrawERC1155)
	cmdTransactWithdrawERC20 := CreateWithdrawErc20Command()
	cmdTransactWithdrawERC20.GroupID = TransactGroup.ID
	cmd.AddCommand(cmdTransactWithdrawERC20)
	cmdTransactWithdrawERC721 := CreateWithdrawErc721Command()
	cmdTransactWithdrawERC721.GroupID = TransactGroup.ID
	cmd.AddCommand(cmdTransactWithdrawERC721)
	cmdTransactWithdrawNativeToken := CreateWithdrawNativeTokenCommand()
	cmdTransactWithdrawNativeToken.GroupID = TransactGroup.ID
	cmd.AddCommand(cmdTransactWithdrawNativeToken)

	return cmd
}
