// This file was generated by seer: https://github.com/moonstream-to/seer.
// seer version: 0.1.15
// seer command: seer evm generate --package TokenFaucet --cli --struct TokenFaucet --output bindings/TokenFaucet/TokenFaucet.go
// Code generated - DO NOT EDIT.
// This file is a generated binding and any manual changes will be lost.

package TokenFaucet

import (
	"errors"
	"math/big"
	"strings"

	"context"

	ethereum "github.com/ethereum/go-ethereum"
	"github.com/ethereum/go-ethereum/accounts/abi"
	"github.com/ethereum/go-ethereum/accounts/abi/bind"
	"github.com/ethereum/go-ethereum/common"
	"github.com/ethereum/go-ethereum/core/types"
	"github.com/ethereum/go-ethereum/event"

	// Reference imports to suppress errors if they are not otherwise used.
	"encoding/hex"
	"fmt"
	"os"
	"time"

	"github.com/ethereum/go-ethereum/accounts/keystore"
	"github.com/ethereum/go-ethereum/ethclient"
	"github.com/spf13/cobra"
	"golang.org/x/term"
)

var (
	_ = errors.New
	_ = big.NewInt
	_ = strings.NewReader
	_ = ethereum.NotFound
	_ = bind.Bind
	_ = common.Big1
	_ = types.BloomLookup
	_ = event.NewSubscription
	_ = abi.ConvertType
)

// TokenFaucetMetaData contains all meta data concerning the TokenFaucet contract.
var TokenFaucetMetaData = &bind.MetaData{
	ABI: "[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_tokenAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_inboxAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_faucetAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_faucetTimeInterval\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"OwnableInvalidOwner\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"OwnableUnauthorizedAccount\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"TokenFaucetClaimIntervalNotPassed\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"DEFAULT_GAS_LIMIT\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"claim\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"claimL3\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"faucetAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"faucetTimeInterval\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"inboxAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"lastClaimedL2Timestamp\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"lastClaimedL3Timestamp\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"rescueTokens\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_faucetAmount\",\"type\":\"uint256\"}],\"name\":\"setFaucetAmount\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_faucetTimeInterval\",\"type\":\"uint256\"}],\"name\":\"setFaucetTimeInterval\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_inboxAddress\",\"type\":\"address\"}],\"name\":\"setInboxAddress\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_tokenAddress\",\"type\":\"address\"}],\"name\":\"setTokenAddress\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"tokenAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]",
	Bin: "0x6080346100e357601f610ddb38819003918201601f19168301916001600160401b038311848410176100e85780849260a0946040528339810103126100e357610047816100fe565b90610054602082016100fe565b91610061604083016100fe565b91608060608201519101519161007685610112565b61520860055560018060a01b0380948160018060a01b03199316836001541617600155169060025416176002556003556004556000541633036100cb576100bc90610112565b604051610c6390816101788239f35b60405163118cdaa760e01b8152336004820152602490fd5b600080fd5b634e487b7160e01b600052604160045260246000fd5b51906001600160a01b03821682036100e357565b6001600160a01b0390811690811561015e576000548260018060a01b0319821617600055167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0600080a3565b604051631e4fbdf760e01b815260006004820152602490fdfe6040608081526004908136101561001557600080fd5b600091823560e01c8063020c324e14610ab057806326a4e8d214610a2e57806331c32cbe146109cc5780634e71d92d14610892578063706bb59a1461064d578063715018a6146105b157806371559c751461054f57806381d2fd9c1461050f5780638da5cb5b146104be5780639c281430146104815780639d76ea581461042e578063a42532ad146103f3578063b8dbe3f5146103a0578063cdffca3a1461031b57838163cea9d26f1461020457508063d6be695a146101c35763f2fde38b146100de57600080fd5b346101bf5760207ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc3601126101bf57610115610af0565b9061011e610bdc565b73ffffffffffffffffffffffffffffffffffffffff8092169283156101905750508254827fffffffffffffffffffffffff00000000000000000000000000000000000000008216178455167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e08380a380f35b908460249251917f1e4fbdf7000000000000000000000000000000000000000000000000000000008352820152fd5b8280fd5b50503461020057817ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc360112610200576020906005549051908152f35b5080fd5b808484346103175760607ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc3601126103175761023e610af0565b73ffffffffffffffffffffffffffffffffffffffff91906024358381168103610313576102c995602094610270610bdc565b86518098819682957fa9059cbb0000000000000000000000000000000000000000000000000000000084526044359184016020909392919373ffffffffffffffffffffffffffffffffffffffff60408201951681520152565b0393165af190811561030a57506102de575080f35b6102ff9060203d602011610303575b6102f78183610b54565b810190610bc4565b5080f35b503d6102ed565b513d84823e3d90fd5b8580fd5b5050fd5b833461039d5760207ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc36011261039d5773ffffffffffffffffffffffffffffffffffffffff610368610af0565b610370610bdc565b167fffffffffffffffffffffffff0000000000000000000000000000000000000000600254161760025580f35b80fd5b50503461020057817ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc3601126102005760209073ffffffffffffffffffffffffffffffffffffffff600254169051908152f35b50346101bf57827ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc3601126101bf5760209250549051908152f35b50503461020057817ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc3601126102005760209073ffffffffffffffffffffffffffffffffffffffff600154169051908152f35b50503461020057817ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc360112610200576020906003549051908152f35b50503461020057817ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc3601126102005773ffffffffffffffffffffffffffffffffffffffff60209254169051908152f35b8382346102005760207ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc36011261020057610548610bdc565b3560035580f35b5050346102005760207ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc360112610200578060209273ffffffffffffffffffffffffffffffffffffffff6105a1610af0565b1681526007845220549051908152f35b833461039d57807ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc36011261039d576105e8610bdc565b8073ffffffffffffffffffffffffffffffffffffffff81547fffffffffffffffffffffffff000000000000000000000000000000000000000081168355167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e08280a380f35b50346101bf57827ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc3601126101bf573383526020906007825261069583852054825490610b18565b42111561086b576005544881029080820448149015171561083f576106c06107399160035490610b18565b9173ffffffffffffffffffffffffffffffffffffffff8484826001541683600254168a8a518098819582947f095ea7b30000000000000000000000000000000000000000000000000000000084528a84016020909392919373ffffffffffffffffffffffffffffffffffffffff60408201951681520152565b03925af190811561083557859361014492610818575b506002541691876003549360055496895197889687957f549e84260000000000000000000000000000000000000000000000000000000087523390870152602486015283604486015230606486015230608486015260a48501524860c485015260e4840152610120610104840152816101248401525af1801561080b576107e1575b5060079033845252429082205580f35b8190813d8311610804575b6107f68183610b54565b810103126101bf57386107d1565b503d6107ec565b50505051903d90823e3d90fd5b61082e90853d8711610303576102f78183610b54565b503861074f565b86513d89823e3d90fd5b6024856011847f4e487b7100000000000000000000000000000000000000000000000000000000835252fd5b82517f6fab3959000000000000000000000000000000000000000000000000000000008152fd5b50346101bf57827ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc3601126101bf5733835260066020526108d882842054825490610b18565b4211156109a557602061095a9173ffffffffffffffffffffffffffffffffffffffff60015416600354918686518096819582947fa9059cbb000000000000000000000000000000000000000000000000000000008452339084016020909392919373ffffffffffffffffffffffffffffffffffffffff60408201951681520152565b03925af180156109995761097a575b503382526006602052429082205580f35b6109929060203d602011610303576102f78183610b54565b5038610969565b505051903d90823e3d90fd5b90517f6fab3959000000000000000000000000000000000000000000000000000000008152fd5b5050346102005760207ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc360112610200578060209273ffffffffffffffffffffffffffffffffffffffff610a1e610af0565b1681526006845220549051908152f35b833461039d5760207ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc36011261039d5773ffffffffffffffffffffffffffffffffffffffff610a7b610af0565b610a83610bdc565b167fffffffffffffffffffffffff0000000000000000000000000000000000000000600154161760015580f35b8382346102005760207ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc36011261020057610ae9610bdc565b8035905580f35b6004359073ffffffffffffffffffffffffffffffffffffffff82168203610b1357565b600080fd5b91908201809211610b2557565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b90601f7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0910116810190811067ffffffffffffffff821117610b9557604052565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b90816020910312610b1357518015158103610b135790565b73ffffffffffffffffffffffffffffffffffffffff600054163303610bfd57565b60246040517f118cdaa7000000000000000000000000000000000000000000000000000000008152336004820152fdfea264697066735822122026b0fd18dc30be2cd996f944f84bccf1c1085ea705f42bdb69f18f3a8eb2661964736f6c63430008180033",
}

// TokenFaucetABI is the input ABI used to generate the binding from.
// Deprecated: Use TokenFaucetMetaData.ABI instead.
var TokenFaucetABI = TokenFaucetMetaData.ABI

// TokenFaucetBin is the compiled bytecode used for deploying new contracts.
// Deprecated: Use TokenFaucetMetaData.Bin instead.
var TokenFaucetBin = TokenFaucetMetaData.Bin

// DeployTokenFaucet deploys a new Ethereum contract, binding an instance of TokenFaucet to it.
func DeployTokenFaucet(auth *bind.TransactOpts, backend bind.ContractBackend, _tokenAddress common.Address, _owner common.Address, _inboxAddress common.Address, _faucetAmount *big.Int, _faucetTimeInterval *big.Int) (common.Address, *types.Transaction, *TokenFaucet, error) {
	parsed, err := TokenFaucetMetaData.GetAbi()
	if err != nil {
		return common.Address{}, nil, nil, err
	}
	if parsed == nil {
		return common.Address{}, nil, nil, errors.New("GetABI returned nil")
	}

	address, tx, contract, err := bind.DeployContract(auth, *parsed, common.FromHex(TokenFaucetBin), backend, _tokenAddress, _owner, _inboxAddress, _faucetAmount, _faucetTimeInterval)
	if err != nil {
		return common.Address{}, nil, nil, err
	}
	return address, tx, &TokenFaucet{TokenFaucetCaller: TokenFaucetCaller{contract: contract}, TokenFaucetTransactor: TokenFaucetTransactor{contract: contract}, TokenFaucetFilterer: TokenFaucetFilterer{contract: contract}}, nil
}

// TokenFaucet is an auto generated Go binding around an Ethereum contract.
type TokenFaucet struct {
	TokenFaucetCaller     // Read-only binding to the contract
	TokenFaucetTransactor // Write-only binding to the contract
	TokenFaucetFilterer   // Log filterer for contract events
}

// TokenFaucetCaller is an auto generated read-only Go binding around an Ethereum contract.
type TokenFaucetCaller struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// TokenFaucetTransactor is an auto generated write-only Go binding around an Ethereum contract.
type TokenFaucetTransactor struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// TokenFaucetFilterer is an auto generated log filtering Go binding around an Ethereum contract events.
type TokenFaucetFilterer struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// TokenFaucetSession is an auto generated Go binding around an Ethereum contract,
// with pre-set call and transact options.
type TokenFaucetSession struct {
	Contract     *TokenFaucet      // Generic contract binding to set the session for
	CallOpts     bind.CallOpts     // Call options to use throughout this session
	TransactOpts bind.TransactOpts // Transaction auth options to use throughout this session
}

// TokenFaucetCallerSession is an auto generated read-only Go binding around an Ethereum contract,
// with pre-set call options.
type TokenFaucetCallerSession struct {
	Contract *TokenFaucetCaller // Generic contract caller binding to set the session for
	CallOpts bind.CallOpts      // Call options to use throughout this session
}

// TokenFaucetTransactorSession is an auto generated write-only Go binding around an Ethereum contract,
// with pre-set transact options.
type TokenFaucetTransactorSession struct {
	Contract     *TokenFaucetTransactor // Generic contract transactor binding to set the session for
	TransactOpts bind.TransactOpts      // Transaction auth options to use throughout this session
}

// TokenFaucetRaw is an auto generated low-level Go binding around an Ethereum contract.
type TokenFaucetRaw struct {
	Contract *TokenFaucet // Generic contract binding to access the raw methods on
}

// TokenFaucetCallerRaw is an auto generated low-level read-only Go binding around an Ethereum contract.
type TokenFaucetCallerRaw struct {
	Contract *TokenFaucetCaller // Generic read-only contract binding to access the raw methods on
}

// TokenFaucetTransactorRaw is an auto generated low-level write-only Go binding around an Ethereum contract.
type TokenFaucetTransactorRaw struct {
	Contract *TokenFaucetTransactor // Generic write-only contract binding to access the raw methods on
}

// NewTokenFaucet creates a new instance of TokenFaucet, bound to a specific deployed contract.
func NewTokenFaucet(address common.Address, backend bind.ContractBackend) (*TokenFaucet, error) {
	contract, err := bindTokenFaucet(address, backend, backend, backend)
	if err != nil {
		return nil, err
	}
	return &TokenFaucet{TokenFaucetCaller: TokenFaucetCaller{contract: contract}, TokenFaucetTransactor: TokenFaucetTransactor{contract: contract}, TokenFaucetFilterer: TokenFaucetFilterer{contract: contract}}, nil
}

// NewTokenFaucetCaller creates a new read-only instance of TokenFaucet, bound to a specific deployed contract.
func NewTokenFaucetCaller(address common.Address, caller bind.ContractCaller) (*TokenFaucetCaller, error) {
	contract, err := bindTokenFaucet(address, caller, nil, nil)
	if err != nil {
		return nil, err
	}
	return &TokenFaucetCaller{contract: contract}, nil
}

// NewTokenFaucetTransactor creates a new write-only instance of TokenFaucet, bound to a specific deployed contract.
func NewTokenFaucetTransactor(address common.Address, transactor bind.ContractTransactor) (*TokenFaucetTransactor, error) {
	contract, err := bindTokenFaucet(address, nil, transactor, nil)
	if err != nil {
		return nil, err
	}
	return &TokenFaucetTransactor{contract: contract}, nil
}

// NewTokenFaucetFilterer creates a new log filterer instance of TokenFaucet, bound to a specific deployed contract.
func NewTokenFaucetFilterer(address common.Address, filterer bind.ContractFilterer) (*TokenFaucetFilterer, error) {
	contract, err := bindTokenFaucet(address, nil, nil, filterer)
	if err != nil {
		return nil, err
	}
	return &TokenFaucetFilterer{contract: contract}, nil
}

// bindTokenFaucet binds a generic wrapper to an already deployed contract.
func bindTokenFaucet(address common.Address, caller bind.ContractCaller, transactor bind.ContractTransactor, filterer bind.ContractFilterer) (*bind.BoundContract, error) {
	parsed, err := TokenFaucetMetaData.GetAbi()
	if err != nil {
		return nil, err
	}
	return bind.NewBoundContract(address, *parsed, caller, transactor, filterer), nil
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_TokenFaucet *TokenFaucetRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _TokenFaucet.Contract.TokenFaucetCaller.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_TokenFaucet *TokenFaucetRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _TokenFaucet.Contract.TokenFaucetTransactor.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_TokenFaucet *TokenFaucetRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _TokenFaucet.Contract.TokenFaucetTransactor.contract.Transact(opts, method, params...)
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_TokenFaucet *TokenFaucetCallerRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _TokenFaucet.Contract.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_TokenFaucet *TokenFaucetTransactorRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _TokenFaucet.Contract.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_TokenFaucet *TokenFaucetTransactorRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _TokenFaucet.Contract.contract.Transact(opts, method, params...)
}

// DEFAULTGASLIMIT is a free data retrieval call binding the contract method 0xd6be695a.
//
// Solidity: function DEFAULT_GAS_LIMIT() view returns(uint256)
func (_TokenFaucet *TokenFaucetCaller) DEFAULTGASLIMIT(opts *bind.CallOpts) (*big.Int, error) {
	var out []interface{}
	err := _TokenFaucet.contract.Call(opts, &out, "DEFAULT_GAS_LIMIT")

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// DEFAULTGASLIMIT is a free data retrieval call binding the contract method 0xd6be695a.
//
// Solidity: function DEFAULT_GAS_LIMIT() view returns(uint256)
func (_TokenFaucet *TokenFaucetSession) DEFAULTGASLIMIT() (*big.Int, error) {
	return _TokenFaucet.Contract.DEFAULTGASLIMIT(&_TokenFaucet.CallOpts)
}

// DEFAULTGASLIMIT is a free data retrieval call binding the contract method 0xd6be695a.
//
// Solidity: function DEFAULT_GAS_LIMIT() view returns(uint256)
func (_TokenFaucet *TokenFaucetCallerSession) DEFAULTGASLIMIT() (*big.Int, error) {
	return _TokenFaucet.Contract.DEFAULTGASLIMIT(&_TokenFaucet.CallOpts)
}

// FaucetAmount is a free data retrieval call binding the contract method 0x9c281430.
//
// Solidity: function faucetAmount() view returns(uint256)
func (_TokenFaucet *TokenFaucetCaller) FaucetAmount(opts *bind.CallOpts) (*big.Int, error) {
	var out []interface{}
	err := _TokenFaucet.contract.Call(opts, &out, "faucetAmount")

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// FaucetAmount is a free data retrieval call binding the contract method 0x9c281430.
//
// Solidity: function faucetAmount() view returns(uint256)
func (_TokenFaucet *TokenFaucetSession) FaucetAmount() (*big.Int, error) {
	return _TokenFaucet.Contract.FaucetAmount(&_TokenFaucet.CallOpts)
}

// FaucetAmount is a free data retrieval call binding the contract method 0x9c281430.
//
// Solidity: function faucetAmount() view returns(uint256)
func (_TokenFaucet *TokenFaucetCallerSession) FaucetAmount() (*big.Int, error) {
	return _TokenFaucet.Contract.FaucetAmount(&_TokenFaucet.CallOpts)
}

// FaucetTimeInterval is a free data retrieval call binding the contract method 0xa42532ad.
//
// Solidity: function faucetTimeInterval() view returns(uint256)
func (_TokenFaucet *TokenFaucetCaller) FaucetTimeInterval(opts *bind.CallOpts) (*big.Int, error) {
	var out []interface{}
	err := _TokenFaucet.contract.Call(opts, &out, "faucetTimeInterval")

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// FaucetTimeInterval is a free data retrieval call binding the contract method 0xa42532ad.
//
// Solidity: function faucetTimeInterval() view returns(uint256)
func (_TokenFaucet *TokenFaucetSession) FaucetTimeInterval() (*big.Int, error) {
	return _TokenFaucet.Contract.FaucetTimeInterval(&_TokenFaucet.CallOpts)
}

// FaucetTimeInterval is a free data retrieval call binding the contract method 0xa42532ad.
//
// Solidity: function faucetTimeInterval() view returns(uint256)
func (_TokenFaucet *TokenFaucetCallerSession) FaucetTimeInterval() (*big.Int, error) {
	return _TokenFaucet.Contract.FaucetTimeInterval(&_TokenFaucet.CallOpts)
}

// InboxAddress is a free data retrieval call binding the contract method 0xb8dbe3f5.
//
// Solidity: function inboxAddress() view returns(address)
func (_TokenFaucet *TokenFaucetCaller) InboxAddress(opts *bind.CallOpts) (common.Address, error) {
	var out []interface{}
	err := _TokenFaucet.contract.Call(opts, &out, "inboxAddress")

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// InboxAddress is a free data retrieval call binding the contract method 0xb8dbe3f5.
//
// Solidity: function inboxAddress() view returns(address)
func (_TokenFaucet *TokenFaucetSession) InboxAddress() (common.Address, error) {
	return _TokenFaucet.Contract.InboxAddress(&_TokenFaucet.CallOpts)
}

// InboxAddress is a free data retrieval call binding the contract method 0xb8dbe3f5.
//
// Solidity: function inboxAddress() view returns(address)
func (_TokenFaucet *TokenFaucetCallerSession) InboxAddress() (common.Address, error) {
	return _TokenFaucet.Contract.InboxAddress(&_TokenFaucet.CallOpts)
}

// LastClaimedL2Timestamp is a free data retrieval call binding the contract method 0x31c32cbe.
//
// Solidity: function lastClaimedL2Timestamp(address ) view returns(uint256)
func (_TokenFaucet *TokenFaucetCaller) LastClaimedL2Timestamp(opts *bind.CallOpts, arg0 common.Address) (*big.Int, error) {
	var out []interface{}
	err := _TokenFaucet.contract.Call(opts, &out, "lastClaimedL2Timestamp", arg0)

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// LastClaimedL2Timestamp is a free data retrieval call binding the contract method 0x31c32cbe.
//
// Solidity: function lastClaimedL2Timestamp(address ) view returns(uint256)
func (_TokenFaucet *TokenFaucetSession) LastClaimedL2Timestamp(arg0 common.Address) (*big.Int, error) {
	return _TokenFaucet.Contract.LastClaimedL2Timestamp(&_TokenFaucet.CallOpts, arg0)
}

// LastClaimedL2Timestamp is a free data retrieval call binding the contract method 0x31c32cbe.
//
// Solidity: function lastClaimedL2Timestamp(address ) view returns(uint256)
func (_TokenFaucet *TokenFaucetCallerSession) LastClaimedL2Timestamp(arg0 common.Address) (*big.Int, error) {
	return _TokenFaucet.Contract.LastClaimedL2Timestamp(&_TokenFaucet.CallOpts, arg0)
}

// LastClaimedL3Timestamp is a free data retrieval call binding the contract method 0x71559c75.
//
// Solidity: function lastClaimedL3Timestamp(address ) view returns(uint256)
func (_TokenFaucet *TokenFaucetCaller) LastClaimedL3Timestamp(opts *bind.CallOpts, arg0 common.Address) (*big.Int, error) {
	var out []interface{}
	err := _TokenFaucet.contract.Call(opts, &out, "lastClaimedL3Timestamp", arg0)

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// LastClaimedL3Timestamp is a free data retrieval call binding the contract method 0x71559c75.
//
// Solidity: function lastClaimedL3Timestamp(address ) view returns(uint256)
func (_TokenFaucet *TokenFaucetSession) LastClaimedL3Timestamp(arg0 common.Address) (*big.Int, error) {
	return _TokenFaucet.Contract.LastClaimedL3Timestamp(&_TokenFaucet.CallOpts, arg0)
}

// LastClaimedL3Timestamp is a free data retrieval call binding the contract method 0x71559c75.
//
// Solidity: function lastClaimedL3Timestamp(address ) view returns(uint256)
func (_TokenFaucet *TokenFaucetCallerSession) LastClaimedL3Timestamp(arg0 common.Address) (*big.Int, error) {
	return _TokenFaucet.Contract.LastClaimedL3Timestamp(&_TokenFaucet.CallOpts, arg0)
}

// Owner is a free data retrieval call binding the contract method 0x8da5cb5b.
//
// Solidity: function owner() view returns(address)
func (_TokenFaucet *TokenFaucetCaller) Owner(opts *bind.CallOpts) (common.Address, error) {
	var out []interface{}
	err := _TokenFaucet.contract.Call(opts, &out, "owner")

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// Owner is a free data retrieval call binding the contract method 0x8da5cb5b.
//
// Solidity: function owner() view returns(address)
func (_TokenFaucet *TokenFaucetSession) Owner() (common.Address, error) {
	return _TokenFaucet.Contract.Owner(&_TokenFaucet.CallOpts)
}

// Owner is a free data retrieval call binding the contract method 0x8da5cb5b.
//
// Solidity: function owner() view returns(address)
func (_TokenFaucet *TokenFaucetCallerSession) Owner() (common.Address, error) {
	return _TokenFaucet.Contract.Owner(&_TokenFaucet.CallOpts)
}

// TokenAddress is a free data retrieval call binding the contract method 0x9d76ea58.
//
// Solidity: function tokenAddress() view returns(address)
func (_TokenFaucet *TokenFaucetCaller) TokenAddress(opts *bind.CallOpts) (common.Address, error) {
	var out []interface{}
	err := _TokenFaucet.contract.Call(opts, &out, "tokenAddress")

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// TokenAddress is a free data retrieval call binding the contract method 0x9d76ea58.
//
// Solidity: function tokenAddress() view returns(address)
func (_TokenFaucet *TokenFaucetSession) TokenAddress() (common.Address, error) {
	return _TokenFaucet.Contract.TokenAddress(&_TokenFaucet.CallOpts)
}

// TokenAddress is a free data retrieval call binding the contract method 0x9d76ea58.
//
// Solidity: function tokenAddress() view returns(address)
func (_TokenFaucet *TokenFaucetCallerSession) TokenAddress() (common.Address, error) {
	return _TokenFaucet.Contract.TokenAddress(&_TokenFaucet.CallOpts)
}

// Claim is a paid mutator transaction binding the contract method 0x4e71d92d.
//
// Solidity: function claim() returns()
func (_TokenFaucet *TokenFaucetTransactor) Claim(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _TokenFaucet.contract.Transact(opts, "claim")
}

// Claim is a paid mutator transaction binding the contract method 0x4e71d92d.
//
// Solidity: function claim() returns()
func (_TokenFaucet *TokenFaucetSession) Claim() (*types.Transaction, error) {
	return _TokenFaucet.Contract.Claim(&_TokenFaucet.TransactOpts)
}

// Claim is a paid mutator transaction binding the contract method 0x4e71d92d.
//
// Solidity: function claim() returns()
func (_TokenFaucet *TokenFaucetTransactorSession) Claim() (*types.Transaction, error) {
	return _TokenFaucet.Contract.Claim(&_TokenFaucet.TransactOpts)
}

// ClaimL3 is a paid mutator transaction binding the contract method 0x706bb59a.
//
// Solidity: function claimL3() returns()
func (_TokenFaucet *TokenFaucetTransactor) ClaimL3(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _TokenFaucet.contract.Transact(opts, "claimL3")
}

// ClaimL3 is a paid mutator transaction binding the contract method 0x706bb59a.
//
// Solidity: function claimL3() returns()
func (_TokenFaucet *TokenFaucetSession) ClaimL3() (*types.Transaction, error) {
	return _TokenFaucet.Contract.ClaimL3(&_TokenFaucet.TransactOpts)
}

// ClaimL3 is a paid mutator transaction binding the contract method 0x706bb59a.
//
// Solidity: function claimL3() returns()
func (_TokenFaucet *TokenFaucetTransactorSession) ClaimL3() (*types.Transaction, error) {
	return _TokenFaucet.Contract.ClaimL3(&_TokenFaucet.TransactOpts)
}

// RenounceOwnership is a paid mutator transaction binding the contract method 0x715018a6.
//
// Solidity: function renounceOwnership() returns()
func (_TokenFaucet *TokenFaucetTransactor) RenounceOwnership(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _TokenFaucet.contract.Transact(opts, "renounceOwnership")
}

// RenounceOwnership is a paid mutator transaction binding the contract method 0x715018a6.
//
// Solidity: function renounceOwnership() returns()
func (_TokenFaucet *TokenFaucetSession) RenounceOwnership() (*types.Transaction, error) {
	return _TokenFaucet.Contract.RenounceOwnership(&_TokenFaucet.TransactOpts)
}

// RenounceOwnership is a paid mutator transaction binding the contract method 0x715018a6.
//
// Solidity: function renounceOwnership() returns()
func (_TokenFaucet *TokenFaucetTransactorSession) RenounceOwnership() (*types.Transaction, error) {
	return _TokenFaucet.Contract.RenounceOwnership(&_TokenFaucet.TransactOpts)
}

// RescueTokens is a paid mutator transaction binding the contract method 0xcea9d26f.
//
// Solidity: function rescueTokens(address _token, address _to, uint256 _amount) returns()
func (_TokenFaucet *TokenFaucetTransactor) RescueTokens(opts *bind.TransactOpts, _token common.Address, _to common.Address, _amount *big.Int) (*types.Transaction, error) {
	return _TokenFaucet.contract.Transact(opts, "rescueTokens", _token, _to, _amount)
}

// RescueTokens is a paid mutator transaction binding the contract method 0xcea9d26f.
//
// Solidity: function rescueTokens(address _token, address _to, uint256 _amount) returns()
func (_TokenFaucet *TokenFaucetSession) RescueTokens(_token common.Address, _to common.Address, _amount *big.Int) (*types.Transaction, error) {
	return _TokenFaucet.Contract.RescueTokens(&_TokenFaucet.TransactOpts, _token, _to, _amount)
}

// RescueTokens is a paid mutator transaction binding the contract method 0xcea9d26f.
//
// Solidity: function rescueTokens(address _token, address _to, uint256 _amount) returns()
func (_TokenFaucet *TokenFaucetTransactorSession) RescueTokens(_token common.Address, _to common.Address, _amount *big.Int) (*types.Transaction, error) {
	return _TokenFaucet.Contract.RescueTokens(&_TokenFaucet.TransactOpts, _token, _to, _amount)
}

// SetFaucetAmount is a paid mutator transaction binding the contract method 0x81d2fd9c.
//
// Solidity: function setFaucetAmount(uint256 _faucetAmount) returns()
func (_TokenFaucet *TokenFaucetTransactor) SetFaucetAmount(opts *bind.TransactOpts, _faucetAmount *big.Int) (*types.Transaction, error) {
	return _TokenFaucet.contract.Transact(opts, "setFaucetAmount", _faucetAmount)
}

// SetFaucetAmount is a paid mutator transaction binding the contract method 0x81d2fd9c.
//
// Solidity: function setFaucetAmount(uint256 _faucetAmount) returns()
func (_TokenFaucet *TokenFaucetSession) SetFaucetAmount(_faucetAmount *big.Int) (*types.Transaction, error) {
	return _TokenFaucet.Contract.SetFaucetAmount(&_TokenFaucet.TransactOpts, _faucetAmount)
}

// SetFaucetAmount is a paid mutator transaction binding the contract method 0x81d2fd9c.
//
// Solidity: function setFaucetAmount(uint256 _faucetAmount) returns()
func (_TokenFaucet *TokenFaucetTransactorSession) SetFaucetAmount(_faucetAmount *big.Int) (*types.Transaction, error) {
	return _TokenFaucet.Contract.SetFaucetAmount(&_TokenFaucet.TransactOpts, _faucetAmount)
}

// SetFaucetTimeInterval is a paid mutator transaction binding the contract method 0x020c324e.
//
// Solidity: function setFaucetTimeInterval(uint256 _faucetTimeInterval) returns()
func (_TokenFaucet *TokenFaucetTransactor) SetFaucetTimeInterval(opts *bind.TransactOpts, _faucetTimeInterval *big.Int) (*types.Transaction, error) {
	return _TokenFaucet.contract.Transact(opts, "setFaucetTimeInterval", _faucetTimeInterval)
}

// SetFaucetTimeInterval is a paid mutator transaction binding the contract method 0x020c324e.
//
// Solidity: function setFaucetTimeInterval(uint256 _faucetTimeInterval) returns()
func (_TokenFaucet *TokenFaucetSession) SetFaucetTimeInterval(_faucetTimeInterval *big.Int) (*types.Transaction, error) {
	return _TokenFaucet.Contract.SetFaucetTimeInterval(&_TokenFaucet.TransactOpts, _faucetTimeInterval)
}

// SetFaucetTimeInterval is a paid mutator transaction binding the contract method 0x020c324e.
//
// Solidity: function setFaucetTimeInterval(uint256 _faucetTimeInterval) returns()
func (_TokenFaucet *TokenFaucetTransactorSession) SetFaucetTimeInterval(_faucetTimeInterval *big.Int) (*types.Transaction, error) {
	return _TokenFaucet.Contract.SetFaucetTimeInterval(&_TokenFaucet.TransactOpts, _faucetTimeInterval)
}

// SetInboxAddress is a paid mutator transaction binding the contract method 0xcdffca3a.
//
// Solidity: function setInboxAddress(address _inboxAddress) returns()
func (_TokenFaucet *TokenFaucetTransactor) SetInboxAddress(opts *bind.TransactOpts, _inboxAddress common.Address) (*types.Transaction, error) {
	return _TokenFaucet.contract.Transact(opts, "setInboxAddress", _inboxAddress)
}

// SetInboxAddress is a paid mutator transaction binding the contract method 0xcdffca3a.
//
// Solidity: function setInboxAddress(address _inboxAddress) returns()
func (_TokenFaucet *TokenFaucetSession) SetInboxAddress(_inboxAddress common.Address) (*types.Transaction, error) {
	return _TokenFaucet.Contract.SetInboxAddress(&_TokenFaucet.TransactOpts, _inboxAddress)
}

// SetInboxAddress is a paid mutator transaction binding the contract method 0xcdffca3a.
//
// Solidity: function setInboxAddress(address _inboxAddress) returns()
func (_TokenFaucet *TokenFaucetTransactorSession) SetInboxAddress(_inboxAddress common.Address) (*types.Transaction, error) {
	return _TokenFaucet.Contract.SetInboxAddress(&_TokenFaucet.TransactOpts, _inboxAddress)
}

// SetTokenAddress is a paid mutator transaction binding the contract method 0x26a4e8d2.
//
// Solidity: function setTokenAddress(address _tokenAddress) returns()
func (_TokenFaucet *TokenFaucetTransactor) SetTokenAddress(opts *bind.TransactOpts, _tokenAddress common.Address) (*types.Transaction, error) {
	return _TokenFaucet.contract.Transact(opts, "setTokenAddress", _tokenAddress)
}

// SetTokenAddress is a paid mutator transaction binding the contract method 0x26a4e8d2.
//
// Solidity: function setTokenAddress(address _tokenAddress) returns()
func (_TokenFaucet *TokenFaucetSession) SetTokenAddress(_tokenAddress common.Address) (*types.Transaction, error) {
	return _TokenFaucet.Contract.SetTokenAddress(&_TokenFaucet.TransactOpts, _tokenAddress)
}

// SetTokenAddress is a paid mutator transaction binding the contract method 0x26a4e8d2.
//
// Solidity: function setTokenAddress(address _tokenAddress) returns()
func (_TokenFaucet *TokenFaucetTransactorSession) SetTokenAddress(_tokenAddress common.Address) (*types.Transaction, error) {
	return _TokenFaucet.Contract.SetTokenAddress(&_TokenFaucet.TransactOpts, _tokenAddress)
}

// TransferOwnership is a paid mutator transaction binding the contract method 0xf2fde38b.
//
// Solidity: function transferOwnership(address newOwner) returns()
func (_TokenFaucet *TokenFaucetTransactor) TransferOwnership(opts *bind.TransactOpts, newOwner common.Address) (*types.Transaction, error) {
	return _TokenFaucet.contract.Transact(opts, "transferOwnership", newOwner)
}

// TransferOwnership is a paid mutator transaction binding the contract method 0xf2fde38b.
//
// Solidity: function transferOwnership(address newOwner) returns()
func (_TokenFaucet *TokenFaucetSession) TransferOwnership(newOwner common.Address) (*types.Transaction, error) {
	return _TokenFaucet.Contract.TransferOwnership(&_TokenFaucet.TransactOpts, newOwner)
}

// TransferOwnership is a paid mutator transaction binding the contract method 0xf2fde38b.
//
// Solidity: function transferOwnership(address newOwner) returns()
func (_TokenFaucet *TokenFaucetTransactorSession) TransferOwnership(newOwner common.Address) (*types.Transaction, error) {
	return _TokenFaucet.Contract.TransferOwnership(&_TokenFaucet.TransactOpts, newOwner)
}

// TokenFaucetOwnershipTransferredIterator is returned from FilterOwnershipTransferred and is used to iterate over the raw logs and unpacked data for OwnershipTransferred events raised by the TokenFaucet contract.
type TokenFaucetOwnershipTransferredIterator struct {
	Event *TokenFaucetOwnershipTransferred // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *TokenFaucetOwnershipTransferredIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(TokenFaucetOwnershipTransferred)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(TokenFaucetOwnershipTransferred)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *TokenFaucetOwnershipTransferredIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *TokenFaucetOwnershipTransferredIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// TokenFaucetOwnershipTransferred represents a OwnershipTransferred event raised by the TokenFaucet contract.
type TokenFaucetOwnershipTransferred struct {
	PreviousOwner common.Address
	NewOwner      common.Address
	Raw           types.Log // Blockchain specific contextual infos
}

// FilterOwnershipTransferred is a free log retrieval operation binding the contract event 0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0.
//
// Solidity: event OwnershipTransferred(address indexed previousOwner, address indexed newOwner)
func (_TokenFaucet *TokenFaucetFilterer) FilterOwnershipTransferred(opts *bind.FilterOpts, previousOwner []common.Address, newOwner []common.Address) (*TokenFaucetOwnershipTransferredIterator, error) {

	var previousOwnerRule []interface{}
	for _, previousOwnerItem := range previousOwner {
		previousOwnerRule = append(previousOwnerRule, previousOwnerItem)
	}
	var newOwnerRule []interface{}
	for _, newOwnerItem := range newOwner {
		newOwnerRule = append(newOwnerRule, newOwnerItem)
	}

	logs, sub, err := _TokenFaucet.contract.FilterLogs(opts, "OwnershipTransferred", previousOwnerRule, newOwnerRule)
	if err != nil {
		return nil, err
	}
	return &TokenFaucetOwnershipTransferredIterator{contract: _TokenFaucet.contract, event: "OwnershipTransferred", logs: logs, sub: sub}, nil
}

// WatchOwnershipTransferred is a free log subscription operation binding the contract event 0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0.
//
// Solidity: event OwnershipTransferred(address indexed previousOwner, address indexed newOwner)
func (_TokenFaucet *TokenFaucetFilterer) WatchOwnershipTransferred(opts *bind.WatchOpts, sink chan<- *TokenFaucetOwnershipTransferred, previousOwner []common.Address, newOwner []common.Address) (event.Subscription, error) {

	var previousOwnerRule []interface{}
	for _, previousOwnerItem := range previousOwner {
		previousOwnerRule = append(previousOwnerRule, previousOwnerItem)
	}
	var newOwnerRule []interface{}
	for _, newOwnerItem := range newOwner {
		newOwnerRule = append(newOwnerRule, newOwnerItem)
	}

	logs, sub, err := _TokenFaucet.contract.WatchLogs(opts, "OwnershipTransferred", previousOwnerRule, newOwnerRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(TokenFaucetOwnershipTransferred)
				if err := _TokenFaucet.contract.UnpackLog(event, "OwnershipTransferred", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseOwnershipTransferred is a log parse operation binding the contract event 0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0.
//
// Solidity: event OwnershipTransferred(address indexed previousOwner, address indexed newOwner)
func (_TokenFaucet *TokenFaucetFilterer) ParseOwnershipTransferred(log types.Log) (*TokenFaucetOwnershipTransferred, error) {
	event := new(TokenFaucetOwnershipTransferred)
	if err := _TokenFaucet.contract.UnpackLog(event, "OwnershipTransferred", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

func CreateTokenFaucetDeploymentCommand() *cobra.Command {
	var keyfile, nonce, password, value, gasPrice, maxFeePerGas, maxPriorityFeePerGas, rpc string
	var gasLimit uint64
	var simulate bool
	var timeout uint

	var tokenAddress common.Address
	var tokenAddressRaw string
	var owner common.Address
	var ownerRaw string
	var inboxAddress common.Address
	var inboxAddressRaw string
	var faucetAmount *big.Int
	var faucetAmountRaw string
	var faucetTimeInterval *big.Int
	var faucetTimeIntervalRaw string

	cmd := &cobra.Command{
		Use:   "deploy",
		Short: "Deploy a new TokenFaucet contract",
		PreRunE: func(cmd *cobra.Command, args []string) error {
			if keyfile == "" {
				return fmt.Errorf("--keystore not specified (this should be a path to an Ethereum account keystore file)")
			}

			if tokenAddressRaw == "" {
				return fmt.Errorf("--token-address argument not specified")
			} else if !common.IsHexAddress(tokenAddressRaw) {
				return fmt.Errorf("--token-address argument is not a valid Ethereum address")
			}
			tokenAddress = common.HexToAddress(tokenAddressRaw)

			if ownerRaw == "" {
				return fmt.Errorf("--owner argument not specified")
			} else if !common.IsHexAddress(ownerRaw) {
				return fmt.Errorf("--owner argument is not a valid Ethereum address")
			}
			owner = common.HexToAddress(ownerRaw)

			if inboxAddressRaw == "" {
				return fmt.Errorf("--inbox-address argument not specified")
			} else if !common.IsHexAddress(inboxAddressRaw) {
				return fmt.Errorf("--inbox-address argument is not a valid Ethereum address")
			}
			inboxAddress = common.HexToAddress(inboxAddressRaw)

			if faucetAmountRaw == "" {
				return fmt.Errorf("--faucet-amount argument not specified")
			}
			faucetAmount = new(big.Int)
			faucetAmount.SetString(faucetAmountRaw, 0)

			if faucetTimeIntervalRaw == "" {
				return fmt.Errorf("--faucet-time-interval argument not specified")
			}
			faucetTimeInterval = new(big.Int)
			faucetTimeInterval.SetString(faucetTimeIntervalRaw, 0)

			return nil
		},
		RunE: func(cmd *cobra.Command, args []string) error {
			client, clientErr := NewClient(rpc)
			if clientErr != nil {
				return clientErr
			}

			key, keyErr := KeyFromFile(keyfile, password)
			if keyErr != nil {
				return keyErr
			}

			chainIDCtx, cancelChainIDCtx := NewChainContext(timeout)
			defer cancelChainIDCtx()
			chainID, chainIDErr := client.ChainID(chainIDCtx)
			if chainIDErr != nil {
				return chainIDErr
			}

			transactionOpts, transactionOptsErr := bind.NewKeyedTransactorWithChainID(key.PrivateKey, chainID)
			if transactionOptsErr != nil {
				return transactionOptsErr
			}

			SetTransactionParametersFromArgs(transactionOpts, nonce, value, gasPrice, maxFeePerGas, maxPriorityFeePerGas, gasLimit, simulate)

			address, deploymentTransaction, _, deploymentErr := DeployTokenFaucet(
				transactionOpts,
				client,
				tokenAddress,
				owner,
				inboxAddress,
				faucetAmount,
				faucetTimeInterval,
			)
			if deploymentErr != nil {
				return deploymentErr
			}

			cmd.Printf("Transaction hash: %s\nContract address: %s\n", deploymentTransaction.Hash().Hex(), address.Hex())
			if transactionOpts.NoSend {
				estimationMessage := ethereum.CallMsg{
					From: transactionOpts.From,
					Data: deploymentTransaction.Data(),
				}

				gasEstimationCtx, cancelGasEstimationCtx := NewChainContext(timeout)
				defer cancelGasEstimationCtx()

				gasEstimate, gasEstimateErr := client.EstimateGas(gasEstimationCtx, estimationMessage)
				if gasEstimateErr != nil {
					return gasEstimateErr
				}

				transactionBinary, transactionBinaryErr := deploymentTransaction.MarshalBinary()
				if transactionBinaryErr != nil {
					return transactionBinaryErr
				}
				transactionBinaryHex := hex.EncodeToString(transactionBinary)

				cmd.Printf("Transaction: %s\nEstimated gas: %d\n", transactionBinaryHex, gasEstimate)
			} else {
				cmd.Println("Transaction submitted")
			}

			return nil
		},
	}

	cmd.Flags().StringVar(&rpc, "rpc", "", "URL of the JSONRPC API to use")
	cmd.Flags().StringVar(&keyfile, "keyfile", "", "Path to the keystore file to use for the transaction")
	cmd.Flags().StringVar(&password, "password", "", "Password to use to unlock the keystore (if not specified, you will be prompted for the password when the command executes)")
	cmd.Flags().StringVar(&nonce, "nonce", "", "Nonce to use for the transaction")
	cmd.Flags().StringVar(&value, "value", "", "Value to send with the transaction")
	cmd.Flags().StringVar(&gasPrice, "gas-price", "", "Gas price to use for the transaction")
	cmd.Flags().StringVar(&maxFeePerGas, "max-fee-per-gas", "", "Maximum fee per gas to use for the (EIP-1559) transaction")
	cmd.Flags().StringVar(&maxPriorityFeePerGas, "max-priority-fee-per-gas", "", "Maximum priority fee per gas to use for the (EIP-1559) transaction")
	cmd.Flags().Uint64Var(&gasLimit, "gas-limit", 0, "Gas limit for the transaction")
	cmd.Flags().BoolVar(&simulate, "simulate", false, "Simulate the transaction without sending it")
	cmd.Flags().UintVar(&timeout, "timeout", 60, "Timeout (in seconds) for interactions with the JSONRPC API")

	cmd.Flags().StringVar(&tokenAddressRaw, "token-address", "", "token-address argument (common.Address)")
	cmd.Flags().StringVar(&ownerRaw, "owner", "", "owner argument (common.Address)")
	cmd.Flags().StringVar(&inboxAddressRaw, "inbox-address", "", "inbox-address argument (common.Address)")
	cmd.Flags().StringVar(&faucetAmountRaw, "faucet-amount", "", "faucet-amount argument")
	cmd.Flags().StringVar(&faucetTimeIntervalRaw, "faucet-time-interval", "", "faucet-time-interval argument")

	return cmd
}

func CreateOwnerCommand() *cobra.Command {
	var contractAddressRaw, rpc string
	var contractAddress common.Address
	var timeout uint

	var blockNumberRaw, fromAddressRaw string
	var pending bool

	var capture0 common.Address

	cmd := &cobra.Command{
		Use:   "owner",
		Short: "Call the Owner view method on a TokenFaucet contract",
		PreRunE: func(cmd *cobra.Command, args []string) error {
			if contractAddressRaw == "" {
				return fmt.Errorf("--contract not specified")
			} else if !common.IsHexAddress(contractAddressRaw) {
				return fmt.Errorf("--contract is not a valid Ethereum address")
			}
			contractAddress = common.HexToAddress(contractAddressRaw)

			return nil
		},
		RunE: func(cmd *cobra.Command, args []string) error {
			client, clientErr := NewClient(rpc)
			if clientErr != nil {
				return clientErr
			}

			contract, contractErr := NewTokenFaucet(contractAddress, client)
			if contractErr != nil {
				return contractErr
			}

			callOpts := bind.CallOpts{}
			SetCallParametersFromArgs(&callOpts, pending, fromAddressRaw, blockNumberRaw)

			session := TokenFaucetCallerSession{
				Contract: &contract.TokenFaucetCaller,
				CallOpts: callOpts,
			}

			var callErr error
			capture0, callErr = session.Owner()
			if callErr != nil {
				return callErr
			}

			cmd.Printf("0: %s\n", capture0.Hex())

			return nil
		},
	}

	cmd.Flags().StringVar(&rpc, "rpc", "", "URL of the JSONRPC API to use")
	cmd.Flags().StringVar(&blockNumberRaw, "block", "", "Block number at which to call the view method")
	cmd.Flags().BoolVar(&pending, "pending", false, "Set this flag if it's ok to call the view method against pending state")
	cmd.Flags().UintVar(&timeout, "timeout", 60, "Timeout (in seconds) for interactions with the JSONRPC API")
	cmd.Flags().StringVar(&contractAddressRaw, "contract", "", "Address of the contract to interact with")
	cmd.Flags().StringVar(&fromAddressRaw, "from", "", "Optional address for caller of the view method")

	return cmd
}
func CreateTokenAddressCommand() *cobra.Command {
	var contractAddressRaw, rpc string
	var contractAddress common.Address
	var timeout uint

	var blockNumberRaw, fromAddressRaw string
	var pending bool

	var capture0 common.Address

	cmd := &cobra.Command{
		Use:   "token-address",
		Short: "Call the TokenAddress view method on a TokenFaucet contract",
		PreRunE: func(cmd *cobra.Command, args []string) error {
			if contractAddressRaw == "" {
				return fmt.Errorf("--contract not specified")
			} else if !common.IsHexAddress(contractAddressRaw) {
				return fmt.Errorf("--contract is not a valid Ethereum address")
			}
			contractAddress = common.HexToAddress(contractAddressRaw)

			return nil
		},
		RunE: func(cmd *cobra.Command, args []string) error {
			client, clientErr := NewClient(rpc)
			if clientErr != nil {
				return clientErr
			}

			contract, contractErr := NewTokenFaucet(contractAddress, client)
			if contractErr != nil {
				return contractErr
			}

			callOpts := bind.CallOpts{}
			SetCallParametersFromArgs(&callOpts, pending, fromAddressRaw, blockNumberRaw)

			session := TokenFaucetCallerSession{
				Contract: &contract.TokenFaucetCaller,
				CallOpts: callOpts,
			}

			var callErr error
			capture0, callErr = session.TokenAddress()
			if callErr != nil {
				return callErr
			}

			cmd.Printf("0: %s\n", capture0.Hex())

			return nil
		},
	}

	cmd.Flags().StringVar(&rpc, "rpc", "", "URL of the JSONRPC API to use")
	cmd.Flags().StringVar(&blockNumberRaw, "block", "", "Block number at which to call the view method")
	cmd.Flags().BoolVar(&pending, "pending", false, "Set this flag if it's ok to call the view method against pending state")
	cmd.Flags().UintVar(&timeout, "timeout", 60, "Timeout (in seconds) for interactions with the JSONRPC API")
	cmd.Flags().StringVar(&contractAddressRaw, "contract", "", "Address of the contract to interact with")
	cmd.Flags().StringVar(&fromAddressRaw, "from", "", "Optional address for caller of the view method")

	return cmd
}
func CreateDefaultgaslimitCommand() *cobra.Command {
	var contractAddressRaw, rpc string
	var contractAddress common.Address
	var timeout uint

	var blockNumberRaw, fromAddressRaw string
	var pending bool

	var capture0 *big.Int

	cmd := &cobra.Command{
		Use:   "defaultgaslimit",
		Short: "Call the DEFAULTGASLIMIT view method on a TokenFaucet contract",
		PreRunE: func(cmd *cobra.Command, args []string) error {
			if contractAddressRaw == "" {
				return fmt.Errorf("--contract not specified")
			} else if !common.IsHexAddress(contractAddressRaw) {
				return fmt.Errorf("--contract is not a valid Ethereum address")
			}
			contractAddress = common.HexToAddress(contractAddressRaw)

			return nil
		},
		RunE: func(cmd *cobra.Command, args []string) error {
			client, clientErr := NewClient(rpc)
			if clientErr != nil {
				return clientErr
			}

			contract, contractErr := NewTokenFaucet(contractAddress, client)
			if contractErr != nil {
				return contractErr
			}

			callOpts := bind.CallOpts{}
			SetCallParametersFromArgs(&callOpts, pending, fromAddressRaw, blockNumberRaw)

			session := TokenFaucetCallerSession{
				Contract: &contract.TokenFaucetCaller,
				CallOpts: callOpts,
			}

			var callErr error
			capture0, callErr = session.DEFAULTGASLIMIT()
			if callErr != nil {
				return callErr
			}

			cmd.Printf("0: %s\n", capture0.String())

			return nil
		},
	}

	cmd.Flags().StringVar(&rpc, "rpc", "", "URL of the JSONRPC API to use")
	cmd.Flags().StringVar(&blockNumberRaw, "block", "", "Block number at which to call the view method")
	cmd.Flags().BoolVar(&pending, "pending", false, "Set this flag if it's ok to call the view method against pending state")
	cmd.Flags().UintVar(&timeout, "timeout", 60, "Timeout (in seconds) for interactions with the JSONRPC API")
	cmd.Flags().StringVar(&contractAddressRaw, "contract", "", "Address of the contract to interact with")
	cmd.Flags().StringVar(&fromAddressRaw, "from", "", "Optional address for caller of the view method")

	return cmd
}
func CreateFaucetAmountCommand() *cobra.Command {
	var contractAddressRaw, rpc string
	var contractAddress common.Address
	var timeout uint

	var blockNumberRaw, fromAddressRaw string
	var pending bool

	var capture0 *big.Int

	cmd := &cobra.Command{
		Use:   "faucet-amount",
		Short: "Call the FaucetAmount view method on a TokenFaucet contract",
		PreRunE: func(cmd *cobra.Command, args []string) error {
			if contractAddressRaw == "" {
				return fmt.Errorf("--contract not specified")
			} else if !common.IsHexAddress(contractAddressRaw) {
				return fmt.Errorf("--contract is not a valid Ethereum address")
			}
			contractAddress = common.HexToAddress(contractAddressRaw)

			return nil
		},
		RunE: func(cmd *cobra.Command, args []string) error {
			client, clientErr := NewClient(rpc)
			if clientErr != nil {
				return clientErr
			}

			contract, contractErr := NewTokenFaucet(contractAddress, client)
			if contractErr != nil {
				return contractErr
			}

			callOpts := bind.CallOpts{}
			SetCallParametersFromArgs(&callOpts, pending, fromAddressRaw, blockNumberRaw)

			session := TokenFaucetCallerSession{
				Contract: &contract.TokenFaucetCaller,
				CallOpts: callOpts,
			}

			var callErr error
			capture0, callErr = session.FaucetAmount()
			if callErr != nil {
				return callErr
			}

			cmd.Printf("0: %s\n", capture0.String())

			return nil
		},
	}

	cmd.Flags().StringVar(&rpc, "rpc", "", "URL of the JSONRPC API to use")
	cmd.Flags().StringVar(&blockNumberRaw, "block", "", "Block number at which to call the view method")
	cmd.Flags().BoolVar(&pending, "pending", false, "Set this flag if it's ok to call the view method against pending state")
	cmd.Flags().UintVar(&timeout, "timeout", 60, "Timeout (in seconds) for interactions with the JSONRPC API")
	cmd.Flags().StringVar(&contractAddressRaw, "contract", "", "Address of the contract to interact with")
	cmd.Flags().StringVar(&fromAddressRaw, "from", "", "Optional address for caller of the view method")

	return cmd
}
func CreateFaucetTimeIntervalCommand() *cobra.Command {
	var contractAddressRaw, rpc string
	var contractAddress common.Address
	var timeout uint

	var blockNumberRaw, fromAddressRaw string
	var pending bool

	var capture0 *big.Int

	cmd := &cobra.Command{
		Use:   "faucet-time-interval",
		Short: "Call the FaucetTimeInterval view method on a TokenFaucet contract",
		PreRunE: func(cmd *cobra.Command, args []string) error {
			if contractAddressRaw == "" {
				return fmt.Errorf("--contract not specified")
			} else if !common.IsHexAddress(contractAddressRaw) {
				return fmt.Errorf("--contract is not a valid Ethereum address")
			}
			contractAddress = common.HexToAddress(contractAddressRaw)

			return nil
		},
		RunE: func(cmd *cobra.Command, args []string) error {
			client, clientErr := NewClient(rpc)
			if clientErr != nil {
				return clientErr
			}

			contract, contractErr := NewTokenFaucet(contractAddress, client)
			if contractErr != nil {
				return contractErr
			}

			callOpts := bind.CallOpts{}
			SetCallParametersFromArgs(&callOpts, pending, fromAddressRaw, blockNumberRaw)

			session := TokenFaucetCallerSession{
				Contract: &contract.TokenFaucetCaller,
				CallOpts: callOpts,
			}

			var callErr error
			capture0, callErr = session.FaucetTimeInterval()
			if callErr != nil {
				return callErr
			}

			cmd.Printf("0: %s\n", capture0.String())

			return nil
		},
	}

	cmd.Flags().StringVar(&rpc, "rpc", "", "URL of the JSONRPC API to use")
	cmd.Flags().StringVar(&blockNumberRaw, "block", "", "Block number at which to call the view method")
	cmd.Flags().BoolVar(&pending, "pending", false, "Set this flag if it's ok to call the view method against pending state")
	cmd.Flags().UintVar(&timeout, "timeout", 60, "Timeout (in seconds) for interactions with the JSONRPC API")
	cmd.Flags().StringVar(&contractAddressRaw, "contract", "", "Address of the contract to interact with")
	cmd.Flags().StringVar(&fromAddressRaw, "from", "", "Optional address for caller of the view method")

	return cmd
}
func CreateInboxAddressCommand() *cobra.Command {
	var contractAddressRaw, rpc string
	var contractAddress common.Address
	var timeout uint

	var blockNumberRaw, fromAddressRaw string
	var pending bool

	var capture0 common.Address

	cmd := &cobra.Command{
		Use:   "inbox-address",
		Short: "Call the InboxAddress view method on a TokenFaucet contract",
		PreRunE: func(cmd *cobra.Command, args []string) error {
			if contractAddressRaw == "" {
				return fmt.Errorf("--contract not specified")
			} else if !common.IsHexAddress(contractAddressRaw) {
				return fmt.Errorf("--contract is not a valid Ethereum address")
			}
			contractAddress = common.HexToAddress(contractAddressRaw)

			return nil
		},
		RunE: func(cmd *cobra.Command, args []string) error {
			client, clientErr := NewClient(rpc)
			if clientErr != nil {
				return clientErr
			}

			contract, contractErr := NewTokenFaucet(contractAddress, client)
			if contractErr != nil {
				return contractErr
			}

			callOpts := bind.CallOpts{}
			SetCallParametersFromArgs(&callOpts, pending, fromAddressRaw, blockNumberRaw)

			session := TokenFaucetCallerSession{
				Contract: &contract.TokenFaucetCaller,
				CallOpts: callOpts,
			}

			var callErr error
			capture0, callErr = session.InboxAddress()
			if callErr != nil {
				return callErr
			}

			cmd.Printf("0: %s\n", capture0.Hex())

			return nil
		},
	}

	cmd.Flags().StringVar(&rpc, "rpc", "", "URL of the JSONRPC API to use")
	cmd.Flags().StringVar(&blockNumberRaw, "block", "", "Block number at which to call the view method")
	cmd.Flags().BoolVar(&pending, "pending", false, "Set this flag if it's ok to call the view method against pending state")
	cmd.Flags().UintVar(&timeout, "timeout", 60, "Timeout (in seconds) for interactions with the JSONRPC API")
	cmd.Flags().StringVar(&contractAddressRaw, "contract", "", "Address of the contract to interact with")
	cmd.Flags().StringVar(&fromAddressRaw, "from", "", "Optional address for caller of the view method")

	return cmd
}
func CreateLastClaimedL2TimestampCommand() *cobra.Command {
	var contractAddressRaw, rpc string
	var contractAddress common.Address
	var timeout uint

	var blockNumberRaw, fromAddressRaw string
	var pending bool

	var arg0 common.Address
	var arg0Raw string

	var capture0 *big.Int

	cmd := &cobra.Command{
		Use:   "last-claimed-l-2-timestamp",
		Short: "Call the LastClaimedL2Timestamp view method on a TokenFaucet contract",
		PreRunE: func(cmd *cobra.Command, args []string) error {
			if contractAddressRaw == "" {
				return fmt.Errorf("--contract not specified")
			} else if !common.IsHexAddress(contractAddressRaw) {
				return fmt.Errorf("--contract is not a valid Ethereum address")
			}
			contractAddress = common.HexToAddress(contractAddressRaw)

			if arg0Raw == "" {
				return fmt.Errorf("--arg-0 argument not specified")
			} else if !common.IsHexAddress(arg0Raw) {
				return fmt.Errorf("--arg-0 argument is not a valid Ethereum address")
			}
			arg0 = common.HexToAddress(arg0Raw)

			return nil
		},
		RunE: func(cmd *cobra.Command, args []string) error {
			client, clientErr := NewClient(rpc)
			if clientErr != nil {
				return clientErr
			}

			contract, contractErr := NewTokenFaucet(contractAddress, client)
			if contractErr != nil {
				return contractErr
			}

			callOpts := bind.CallOpts{}
			SetCallParametersFromArgs(&callOpts, pending, fromAddressRaw, blockNumberRaw)

			session := TokenFaucetCallerSession{
				Contract: &contract.TokenFaucetCaller,
				CallOpts: callOpts,
			}

			var callErr error
			capture0, callErr = session.LastClaimedL2Timestamp(
				arg0,
			)
			if callErr != nil {
				return callErr
			}

			cmd.Printf("0: %s\n", capture0.String())

			return nil
		},
	}

	cmd.Flags().StringVar(&rpc, "rpc", "", "URL of the JSONRPC API to use")
	cmd.Flags().StringVar(&blockNumberRaw, "block", "", "Block number at which to call the view method")
	cmd.Flags().BoolVar(&pending, "pending", false, "Set this flag if it's ok to call the view method against pending state")
	cmd.Flags().UintVar(&timeout, "timeout", 60, "Timeout (in seconds) for interactions with the JSONRPC API")
	cmd.Flags().StringVar(&contractAddressRaw, "contract", "", "Address of the contract to interact with")
	cmd.Flags().StringVar(&fromAddressRaw, "from", "", "Optional address for caller of the view method")

	cmd.Flags().StringVar(&arg0Raw, "arg-0", "", "arg-0 argument (common.Address)")

	return cmd
}
func CreateLastClaimedL3TimestampCommand() *cobra.Command {
	var contractAddressRaw, rpc string
	var contractAddress common.Address
	var timeout uint

	var blockNumberRaw, fromAddressRaw string
	var pending bool

	var arg0 common.Address
	var arg0Raw string

	var capture0 *big.Int

	cmd := &cobra.Command{
		Use:   "last-claimed-l-3-timestamp",
		Short: "Call the LastClaimedL3Timestamp view method on a TokenFaucet contract",
		PreRunE: func(cmd *cobra.Command, args []string) error {
			if contractAddressRaw == "" {
				return fmt.Errorf("--contract not specified")
			} else if !common.IsHexAddress(contractAddressRaw) {
				return fmt.Errorf("--contract is not a valid Ethereum address")
			}
			contractAddress = common.HexToAddress(contractAddressRaw)

			if arg0Raw == "" {
				return fmt.Errorf("--arg-0 argument not specified")
			} else if !common.IsHexAddress(arg0Raw) {
				return fmt.Errorf("--arg-0 argument is not a valid Ethereum address")
			}
			arg0 = common.HexToAddress(arg0Raw)

			return nil
		},
		RunE: func(cmd *cobra.Command, args []string) error {
			client, clientErr := NewClient(rpc)
			if clientErr != nil {
				return clientErr
			}

			contract, contractErr := NewTokenFaucet(contractAddress, client)
			if contractErr != nil {
				return contractErr
			}

			callOpts := bind.CallOpts{}
			SetCallParametersFromArgs(&callOpts, pending, fromAddressRaw, blockNumberRaw)

			session := TokenFaucetCallerSession{
				Contract: &contract.TokenFaucetCaller,
				CallOpts: callOpts,
			}

			var callErr error
			capture0, callErr = session.LastClaimedL3Timestamp(
				arg0,
			)
			if callErr != nil {
				return callErr
			}

			cmd.Printf("0: %s\n", capture0.String())

			return nil
		},
	}

	cmd.Flags().StringVar(&rpc, "rpc", "", "URL of the JSONRPC API to use")
	cmd.Flags().StringVar(&blockNumberRaw, "block", "", "Block number at which to call the view method")
	cmd.Flags().BoolVar(&pending, "pending", false, "Set this flag if it's ok to call the view method against pending state")
	cmd.Flags().UintVar(&timeout, "timeout", 60, "Timeout (in seconds) for interactions with the JSONRPC API")
	cmd.Flags().StringVar(&contractAddressRaw, "contract", "", "Address of the contract to interact with")
	cmd.Flags().StringVar(&fromAddressRaw, "from", "", "Optional address for caller of the view method")

	cmd.Flags().StringVar(&arg0Raw, "arg-0", "", "arg-0 argument (common.Address)")

	return cmd
}

func CreateClaimL3Command() *cobra.Command {
	var keyfile, nonce, password, value, gasPrice, maxFeePerGas, maxPriorityFeePerGas, rpc, contractAddressRaw string
	var gasLimit uint64
	var simulate bool
	var timeout uint
	var contractAddress common.Address

	cmd := &cobra.Command{
		Use:   "claim-l-3",
		Short: "Execute the ClaimL3 method on a TokenFaucet contract",
		PreRunE: func(cmd *cobra.Command, args []string) error {
			if keyfile == "" {
				return fmt.Errorf("--keystore not specified")
			}

			if contractAddressRaw == "" {
				return fmt.Errorf("--contract not specified")
			} else if !common.IsHexAddress(contractAddressRaw) {
				return fmt.Errorf("--contract is not a valid Ethereum address")
			}
			contractAddress = common.HexToAddress(contractAddressRaw)

			return nil
		},
		RunE: func(cmd *cobra.Command, args []string) error {
			client, clientErr := NewClient(rpc)
			if clientErr != nil {
				return clientErr
			}

			key, keyErr := KeyFromFile(keyfile, password)
			if keyErr != nil {
				return keyErr
			}

			chainIDCtx, cancelChainIDCtx := NewChainContext(timeout)
			defer cancelChainIDCtx()
			chainID, chainIDErr := client.ChainID(chainIDCtx)
			if chainIDErr != nil {
				return chainIDErr
			}

			transactionOpts, transactionOptsErr := bind.NewKeyedTransactorWithChainID(key.PrivateKey, chainID)
			if transactionOptsErr != nil {
				return transactionOptsErr
			}

			SetTransactionParametersFromArgs(transactionOpts, nonce, value, gasPrice, maxFeePerGas, maxPriorityFeePerGas, gasLimit, simulate)

			contract, contractErr := NewTokenFaucet(contractAddress, client)
			if contractErr != nil {
				return contractErr
			}

			session := TokenFaucetTransactorSession{
				Contract:     &contract.TokenFaucetTransactor,
				TransactOpts: *transactionOpts,
			}

			transaction, transactionErr := session.ClaimL3()
			if transactionErr != nil {
				return transactionErr
			}

			cmd.Printf("Transaction hash: %s\n", transaction.Hash().Hex())
			if transactionOpts.NoSend {
				estimationMessage := ethereum.CallMsg{
					From: transactionOpts.From,
					To:   &contractAddress,
					Data: transaction.Data(),
				}

				gasEstimationCtx, cancelGasEstimationCtx := NewChainContext(timeout)
				defer cancelGasEstimationCtx()

				gasEstimate, gasEstimateErr := client.EstimateGas(gasEstimationCtx, estimationMessage)
				if gasEstimateErr != nil {
					return gasEstimateErr
				}

				transactionBinary, transactionBinaryErr := transaction.MarshalBinary()
				if transactionBinaryErr != nil {
					return transactionBinaryErr
				}
				transactionBinaryHex := hex.EncodeToString(transactionBinary)

				cmd.Printf("Transaction: %s\nEstimated gas: %d\n", transactionBinaryHex, gasEstimate)
			} else {
				cmd.Println("Transaction submitted")
			}

			return nil
		},
	}

	cmd.Flags().StringVar(&rpc, "rpc", "", "URL of the JSONRPC API to use")
	cmd.Flags().StringVar(&keyfile, "keyfile", "", "Path to the keystore file to use for the transaction")
	cmd.Flags().StringVar(&password, "password", "", "Password to use to unlock the keystore (if not specified, you will be prompted for the password when the command executes)")
	cmd.Flags().StringVar(&nonce, "nonce", "", "Nonce to use for the transaction")
	cmd.Flags().StringVar(&value, "value", "", "Value to send with the transaction")
	cmd.Flags().StringVar(&gasPrice, "gas-price", "", "Gas price to use for the transaction")
	cmd.Flags().StringVar(&maxFeePerGas, "max-fee-per-gas", "", "Maximum fee per gas to use for the (EIP-1559) transaction")
	cmd.Flags().StringVar(&maxPriorityFeePerGas, "max-priority-fee-per-gas", "", "Maximum priority fee per gas to use for the (EIP-1559) transaction")
	cmd.Flags().Uint64Var(&gasLimit, "gas-limit", 0, "Gas limit for the transaction")
	cmd.Flags().BoolVar(&simulate, "simulate", false, "Simulate the transaction without sending it")
	cmd.Flags().UintVar(&timeout, "timeout", 60, "Timeout (in seconds) for interactions with the JSONRPC API")
	cmd.Flags().StringVar(&contractAddressRaw, "contract", "", "Address of the contract to interact with")

	return cmd
}
func CreateRescueTokensCommand() *cobra.Command {
	var keyfile, nonce, password, value, gasPrice, maxFeePerGas, maxPriorityFeePerGas, rpc, contractAddressRaw string
	var gasLimit uint64
	var simulate bool
	var timeout uint
	var contractAddress common.Address

	var token common.Address
	var tokenRaw string
	var _to0 common.Address
	var _to0Raw string
	var amount *big.Int
	var amountRaw string

	cmd := &cobra.Command{
		Use:   "rescue-tokens",
		Short: "Execute the RescueTokens method on a TokenFaucet contract",
		PreRunE: func(cmd *cobra.Command, args []string) error {
			if keyfile == "" {
				return fmt.Errorf("--keystore not specified")
			}

			if contractAddressRaw == "" {
				return fmt.Errorf("--contract not specified")
			} else if !common.IsHexAddress(contractAddressRaw) {
				return fmt.Errorf("--contract is not a valid Ethereum address")
			}
			contractAddress = common.HexToAddress(contractAddressRaw)

			if tokenRaw == "" {
				return fmt.Errorf("--token argument not specified")
			} else if !common.IsHexAddress(tokenRaw) {
				return fmt.Errorf("--token argument is not a valid Ethereum address")
			}
			token = common.HexToAddress(tokenRaw)

			if _to0Raw == "" {
				return fmt.Errorf("---to-0 argument not specified")
			} else if !common.IsHexAddress(_to0Raw) {
				return fmt.Errorf("---to-0 argument is not a valid Ethereum address")
			}
			_to0 = common.HexToAddress(_to0Raw)

			if amountRaw == "" {
				return fmt.Errorf("--amount argument not specified")
			}
			amount = new(big.Int)
			amount.SetString(amountRaw, 0)

			return nil
		},
		RunE: func(cmd *cobra.Command, args []string) error {
			client, clientErr := NewClient(rpc)
			if clientErr != nil {
				return clientErr
			}

			key, keyErr := KeyFromFile(keyfile, password)
			if keyErr != nil {
				return keyErr
			}

			chainIDCtx, cancelChainIDCtx := NewChainContext(timeout)
			defer cancelChainIDCtx()
			chainID, chainIDErr := client.ChainID(chainIDCtx)
			if chainIDErr != nil {
				return chainIDErr
			}

			transactionOpts, transactionOptsErr := bind.NewKeyedTransactorWithChainID(key.PrivateKey, chainID)
			if transactionOptsErr != nil {
				return transactionOptsErr
			}

			SetTransactionParametersFromArgs(transactionOpts, nonce, value, gasPrice, maxFeePerGas, maxPriorityFeePerGas, gasLimit, simulate)

			contract, contractErr := NewTokenFaucet(contractAddress, client)
			if contractErr != nil {
				return contractErr
			}

			session := TokenFaucetTransactorSession{
				Contract:     &contract.TokenFaucetTransactor,
				TransactOpts: *transactionOpts,
			}

			transaction, transactionErr := session.RescueTokens(
				token,
				_to0,
				amount,
			)
			if transactionErr != nil {
				return transactionErr
			}

			cmd.Printf("Transaction hash: %s\n", transaction.Hash().Hex())
			if transactionOpts.NoSend {
				estimationMessage := ethereum.CallMsg{
					From: transactionOpts.From,
					To:   &contractAddress,
					Data: transaction.Data(),
				}

				gasEstimationCtx, cancelGasEstimationCtx := NewChainContext(timeout)
				defer cancelGasEstimationCtx()

				gasEstimate, gasEstimateErr := client.EstimateGas(gasEstimationCtx, estimationMessage)
				if gasEstimateErr != nil {
					return gasEstimateErr
				}

				transactionBinary, transactionBinaryErr := transaction.MarshalBinary()
				if transactionBinaryErr != nil {
					return transactionBinaryErr
				}
				transactionBinaryHex := hex.EncodeToString(transactionBinary)

				cmd.Printf("Transaction: %s\nEstimated gas: %d\n", transactionBinaryHex, gasEstimate)
			} else {
				cmd.Println("Transaction submitted")
			}

			return nil
		},
	}

	cmd.Flags().StringVar(&rpc, "rpc", "", "URL of the JSONRPC API to use")
	cmd.Flags().StringVar(&keyfile, "keyfile", "", "Path to the keystore file to use for the transaction")
	cmd.Flags().StringVar(&password, "password", "", "Password to use to unlock the keystore (if not specified, you will be prompted for the password when the command executes)")
	cmd.Flags().StringVar(&nonce, "nonce", "", "Nonce to use for the transaction")
	cmd.Flags().StringVar(&value, "value", "", "Value to send with the transaction")
	cmd.Flags().StringVar(&gasPrice, "gas-price", "", "Gas price to use for the transaction")
	cmd.Flags().StringVar(&maxFeePerGas, "max-fee-per-gas", "", "Maximum fee per gas to use for the (EIP-1559) transaction")
	cmd.Flags().StringVar(&maxPriorityFeePerGas, "max-priority-fee-per-gas", "", "Maximum priority fee per gas to use for the (EIP-1559) transaction")
	cmd.Flags().Uint64Var(&gasLimit, "gas-limit", 0, "Gas limit for the transaction")
	cmd.Flags().BoolVar(&simulate, "simulate", false, "Simulate the transaction without sending it")
	cmd.Flags().UintVar(&timeout, "timeout", 60, "Timeout (in seconds) for interactions with the JSONRPC API")
	cmd.Flags().StringVar(&contractAddressRaw, "contract", "", "Address of the contract to interact with")

	cmd.Flags().StringVar(&tokenRaw, "token", "", "token argument (common.Address)")
	cmd.Flags().StringVar(&_to0Raw, "-to-0", "", "-to-0 argument (common.Address)")
	cmd.Flags().StringVar(&amountRaw, "amount", "", "amount argument")

	return cmd
}
func CreateSetFaucetAmountCommand() *cobra.Command {
	var keyfile, nonce, password, value, gasPrice, maxFeePerGas, maxPriorityFeePerGas, rpc, contractAddressRaw string
	var gasLimit uint64
	var simulate bool
	var timeout uint
	var contractAddress common.Address

	var faucetAmount *big.Int
	var faucetAmountRaw string

	cmd := &cobra.Command{
		Use:   "set-faucet-amount",
		Short: "Execute the SetFaucetAmount method on a TokenFaucet contract",
		PreRunE: func(cmd *cobra.Command, args []string) error {
			if keyfile == "" {
				return fmt.Errorf("--keystore not specified")
			}

			if contractAddressRaw == "" {
				return fmt.Errorf("--contract not specified")
			} else if !common.IsHexAddress(contractAddressRaw) {
				return fmt.Errorf("--contract is not a valid Ethereum address")
			}
			contractAddress = common.HexToAddress(contractAddressRaw)

			if faucetAmountRaw == "" {
				return fmt.Errorf("--faucet-amount argument not specified")
			}
			faucetAmount = new(big.Int)
			faucetAmount.SetString(faucetAmountRaw, 0)

			return nil
		},
		RunE: func(cmd *cobra.Command, args []string) error {
			client, clientErr := NewClient(rpc)
			if clientErr != nil {
				return clientErr
			}

			key, keyErr := KeyFromFile(keyfile, password)
			if keyErr != nil {
				return keyErr
			}

			chainIDCtx, cancelChainIDCtx := NewChainContext(timeout)
			defer cancelChainIDCtx()
			chainID, chainIDErr := client.ChainID(chainIDCtx)
			if chainIDErr != nil {
				return chainIDErr
			}

			transactionOpts, transactionOptsErr := bind.NewKeyedTransactorWithChainID(key.PrivateKey, chainID)
			if transactionOptsErr != nil {
				return transactionOptsErr
			}

			SetTransactionParametersFromArgs(transactionOpts, nonce, value, gasPrice, maxFeePerGas, maxPriorityFeePerGas, gasLimit, simulate)

			contract, contractErr := NewTokenFaucet(contractAddress, client)
			if contractErr != nil {
				return contractErr
			}

			session := TokenFaucetTransactorSession{
				Contract:     &contract.TokenFaucetTransactor,
				TransactOpts: *transactionOpts,
			}

			transaction, transactionErr := session.SetFaucetAmount(
				faucetAmount,
			)
			if transactionErr != nil {
				return transactionErr
			}

			cmd.Printf("Transaction hash: %s\n", transaction.Hash().Hex())
			if transactionOpts.NoSend {
				estimationMessage := ethereum.CallMsg{
					From: transactionOpts.From,
					To:   &contractAddress,
					Data: transaction.Data(),
				}

				gasEstimationCtx, cancelGasEstimationCtx := NewChainContext(timeout)
				defer cancelGasEstimationCtx()

				gasEstimate, gasEstimateErr := client.EstimateGas(gasEstimationCtx, estimationMessage)
				if gasEstimateErr != nil {
					return gasEstimateErr
				}

				transactionBinary, transactionBinaryErr := transaction.MarshalBinary()
				if transactionBinaryErr != nil {
					return transactionBinaryErr
				}
				transactionBinaryHex := hex.EncodeToString(transactionBinary)

				cmd.Printf("Transaction: %s\nEstimated gas: %d\n", transactionBinaryHex, gasEstimate)
			} else {
				cmd.Println("Transaction submitted")
			}

			return nil
		},
	}

	cmd.Flags().StringVar(&rpc, "rpc", "", "URL of the JSONRPC API to use")
	cmd.Flags().StringVar(&keyfile, "keyfile", "", "Path to the keystore file to use for the transaction")
	cmd.Flags().StringVar(&password, "password", "", "Password to use to unlock the keystore (if not specified, you will be prompted for the password when the command executes)")
	cmd.Flags().StringVar(&nonce, "nonce", "", "Nonce to use for the transaction")
	cmd.Flags().StringVar(&value, "value", "", "Value to send with the transaction")
	cmd.Flags().StringVar(&gasPrice, "gas-price", "", "Gas price to use for the transaction")
	cmd.Flags().StringVar(&maxFeePerGas, "max-fee-per-gas", "", "Maximum fee per gas to use for the (EIP-1559) transaction")
	cmd.Flags().StringVar(&maxPriorityFeePerGas, "max-priority-fee-per-gas", "", "Maximum priority fee per gas to use for the (EIP-1559) transaction")
	cmd.Flags().Uint64Var(&gasLimit, "gas-limit", 0, "Gas limit for the transaction")
	cmd.Flags().BoolVar(&simulate, "simulate", false, "Simulate the transaction without sending it")
	cmd.Flags().UintVar(&timeout, "timeout", 60, "Timeout (in seconds) for interactions with the JSONRPC API")
	cmd.Flags().StringVar(&contractAddressRaw, "contract", "", "Address of the contract to interact with")

	cmd.Flags().StringVar(&faucetAmountRaw, "faucet-amount", "", "faucet-amount argument")

	return cmd
}
func CreateSetFaucetTimeIntervalCommand() *cobra.Command {
	var keyfile, nonce, password, value, gasPrice, maxFeePerGas, maxPriorityFeePerGas, rpc, contractAddressRaw string
	var gasLimit uint64
	var simulate bool
	var timeout uint
	var contractAddress common.Address

	var faucetTimeInterval *big.Int
	var faucetTimeIntervalRaw string

	cmd := &cobra.Command{
		Use:   "set-faucet-time-interval",
		Short: "Execute the SetFaucetTimeInterval method on a TokenFaucet contract",
		PreRunE: func(cmd *cobra.Command, args []string) error {
			if keyfile == "" {
				return fmt.Errorf("--keystore not specified")
			}

			if contractAddressRaw == "" {
				return fmt.Errorf("--contract not specified")
			} else if !common.IsHexAddress(contractAddressRaw) {
				return fmt.Errorf("--contract is not a valid Ethereum address")
			}
			contractAddress = common.HexToAddress(contractAddressRaw)

			if faucetTimeIntervalRaw == "" {
				return fmt.Errorf("--faucet-time-interval argument not specified")
			}
			faucetTimeInterval = new(big.Int)
			faucetTimeInterval.SetString(faucetTimeIntervalRaw, 0)

			return nil
		},
		RunE: func(cmd *cobra.Command, args []string) error {
			client, clientErr := NewClient(rpc)
			if clientErr != nil {
				return clientErr
			}

			key, keyErr := KeyFromFile(keyfile, password)
			if keyErr != nil {
				return keyErr
			}

			chainIDCtx, cancelChainIDCtx := NewChainContext(timeout)
			defer cancelChainIDCtx()
			chainID, chainIDErr := client.ChainID(chainIDCtx)
			if chainIDErr != nil {
				return chainIDErr
			}

			transactionOpts, transactionOptsErr := bind.NewKeyedTransactorWithChainID(key.PrivateKey, chainID)
			if transactionOptsErr != nil {
				return transactionOptsErr
			}

			SetTransactionParametersFromArgs(transactionOpts, nonce, value, gasPrice, maxFeePerGas, maxPriorityFeePerGas, gasLimit, simulate)

			contract, contractErr := NewTokenFaucet(contractAddress, client)
			if contractErr != nil {
				return contractErr
			}

			session := TokenFaucetTransactorSession{
				Contract:     &contract.TokenFaucetTransactor,
				TransactOpts: *transactionOpts,
			}

			transaction, transactionErr := session.SetFaucetTimeInterval(
				faucetTimeInterval,
			)
			if transactionErr != nil {
				return transactionErr
			}

			cmd.Printf("Transaction hash: %s\n", transaction.Hash().Hex())
			if transactionOpts.NoSend {
				estimationMessage := ethereum.CallMsg{
					From: transactionOpts.From,
					To:   &contractAddress,
					Data: transaction.Data(),
				}

				gasEstimationCtx, cancelGasEstimationCtx := NewChainContext(timeout)
				defer cancelGasEstimationCtx()

				gasEstimate, gasEstimateErr := client.EstimateGas(gasEstimationCtx, estimationMessage)
				if gasEstimateErr != nil {
					return gasEstimateErr
				}

				transactionBinary, transactionBinaryErr := transaction.MarshalBinary()
				if transactionBinaryErr != nil {
					return transactionBinaryErr
				}
				transactionBinaryHex := hex.EncodeToString(transactionBinary)

				cmd.Printf("Transaction: %s\nEstimated gas: %d\n", transactionBinaryHex, gasEstimate)
			} else {
				cmd.Println("Transaction submitted")
			}

			return nil
		},
	}

	cmd.Flags().StringVar(&rpc, "rpc", "", "URL of the JSONRPC API to use")
	cmd.Flags().StringVar(&keyfile, "keyfile", "", "Path to the keystore file to use for the transaction")
	cmd.Flags().StringVar(&password, "password", "", "Password to use to unlock the keystore (if not specified, you will be prompted for the password when the command executes)")
	cmd.Flags().StringVar(&nonce, "nonce", "", "Nonce to use for the transaction")
	cmd.Flags().StringVar(&value, "value", "", "Value to send with the transaction")
	cmd.Flags().StringVar(&gasPrice, "gas-price", "", "Gas price to use for the transaction")
	cmd.Flags().StringVar(&maxFeePerGas, "max-fee-per-gas", "", "Maximum fee per gas to use for the (EIP-1559) transaction")
	cmd.Flags().StringVar(&maxPriorityFeePerGas, "max-priority-fee-per-gas", "", "Maximum priority fee per gas to use for the (EIP-1559) transaction")
	cmd.Flags().Uint64Var(&gasLimit, "gas-limit", 0, "Gas limit for the transaction")
	cmd.Flags().BoolVar(&simulate, "simulate", false, "Simulate the transaction without sending it")
	cmd.Flags().UintVar(&timeout, "timeout", 60, "Timeout (in seconds) for interactions with the JSONRPC API")
	cmd.Flags().StringVar(&contractAddressRaw, "contract", "", "Address of the contract to interact with")

	cmd.Flags().StringVar(&faucetTimeIntervalRaw, "faucet-time-interval", "", "faucet-time-interval argument")

	return cmd
}
func CreateClaimCommand() *cobra.Command {
	var keyfile, nonce, password, value, gasPrice, maxFeePerGas, maxPriorityFeePerGas, rpc, contractAddressRaw string
	var gasLimit uint64
	var simulate bool
	var timeout uint
	var contractAddress common.Address

	cmd := &cobra.Command{
		Use:   "claim",
		Short: "Execute the Claim method on a TokenFaucet contract",
		PreRunE: func(cmd *cobra.Command, args []string) error {
			if keyfile == "" {
				return fmt.Errorf("--keystore not specified")
			}

			if contractAddressRaw == "" {
				return fmt.Errorf("--contract not specified")
			} else if !common.IsHexAddress(contractAddressRaw) {
				return fmt.Errorf("--contract is not a valid Ethereum address")
			}
			contractAddress = common.HexToAddress(contractAddressRaw)

			return nil
		},
		RunE: func(cmd *cobra.Command, args []string) error {
			client, clientErr := NewClient(rpc)
			if clientErr != nil {
				return clientErr
			}

			key, keyErr := KeyFromFile(keyfile, password)
			if keyErr != nil {
				return keyErr
			}

			chainIDCtx, cancelChainIDCtx := NewChainContext(timeout)
			defer cancelChainIDCtx()
			chainID, chainIDErr := client.ChainID(chainIDCtx)
			if chainIDErr != nil {
				return chainIDErr
			}

			transactionOpts, transactionOptsErr := bind.NewKeyedTransactorWithChainID(key.PrivateKey, chainID)
			if transactionOptsErr != nil {
				return transactionOptsErr
			}

			SetTransactionParametersFromArgs(transactionOpts, nonce, value, gasPrice, maxFeePerGas, maxPriorityFeePerGas, gasLimit, simulate)

			contract, contractErr := NewTokenFaucet(contractAddress, client)
			if contractErr != nil {
				return contractErr
			}

			session := TokenFaucetTransactorSession{
				Contract:     &contract.TokenFaucetTransactor,
				TransactOpts: *transactionOpts,
			}

			transaction, transactionErr := session.Claim()
			if transactionErr != nil {
				return transactionErr
			}

			cmd.Printf("Transaction hash: %s\n", transaction.Hash().Hex())
			if transactionOpts.NoSend {
				estimationMessage := ethereum.CallMsg{
					From: transactionOpts.From,
					To:   &contractAddress,
					Data: transaction.Data(),
				}

				gasEstimationCtx, cancelGasEstimationCtx := NewChainContext(timeout)
				defer cancelGasEstimationCtx()

				gasEstimate, gasEstimateErr := client.EstimateGas(gasEstimationCtx, estimationMessage)
				if gasEstimateErr != nil {
					return gasEstimateErr
				}

				transactionBinary, transactionBinaryErr := transaction.MarshalBinary()
				if transactionBinaryErr != nil {
					return transactionBinaryErr
				}
				transactionBinaryHex := hex.EncodeToString(transactionBinary)

				cmd.Printf("Transaction: %s\nEstimated gas: %d\n", transactionBinaryHex, gasEstimate)
			} else {
				cmd.Println("Transaction submitted")
			}

			return nil
		},
	}

	cmd.Flags().StringVar(&rpc, "rpc", "", "URL of the JSONRPC API to use")
	cmd.Flags().StringVar(&keyfile, "keyfile", "", "Path to the keystore file to use for the transaction")
	cmd.Flags().StringVar(&password, "password", "", "Password to use to unlock the keystore (if not specified, you will be prompted for the password when the command executes)")
	cmd.Flags().StringVar(&nonce, "nonce", "", "Nonce to use for the transaction")
	cmd.Flags().StringVar(&value, "value", "", "Value to send with the transaction")
	cmd.Flags().StringVar(&gasPrice, "gas-price", "", "Gas price to use for the transaction")
	cmd.Flags().StringVar(&maxFeePerGas, "max-fee-per-gas", "", "Maximum fee per gas to use for the (EIP-1559) transaction")
	cmd.Flags().StringVar(&maxPriorityFeePerGas, "max-priority-fee-per-gas", "", "Maximum priority fee per gas to use for the (EIP-1559) transaction")
	cmd.Flags().Uint64Var(&gasLimit, "gas-limit", 0, "Gas limit for the transaction")
	cmd.Flags().BoolVar(&simulate, "simulate", false, "Simulate the transaction without sending it")
	cmd.Flags().UintVar(&timeout, "timeout", 60, "Timeout (in seconds) for interactions with the JSONRPC API")
	cmd.Flags().StringVar(&contractAddressRaw, "contract", "", "Address of the contract to interact with")

	return cmd
}
func CreateRenounceOwnershipCommand() *cobra.Command {
	var keyfile, nonce, password, value, gasPrice, maxFeePerGas, maxPriorityFeePerGas, rpc, contractAddressRaw string
	var gasLimit uint64
	var simulate bool
	var timeout uint
	var contractAddress common.Address

	cmd := &cobra.Command{
		Use:   "renounce-ownership",
		Short: "Execute the RenounceOwnership method on a TokenFaucet contract",
		PreRunE: func(cmd *cobra.Command, args []string) error {
			if keyfile == "" {
				return fmt.Errorf("--keystore not specified")
			}

			if contractAddressRaw == "" {
				return fmt.Errorf("--contract not specified")
			} else if !common.IsHexAddress(contractAddressRaw) {
				return fmt.Errorf("--contract is not a valid Ethereum address")
			}
			contractAddress = common.HexToAddress(contractAddressRaw)

			return nil
		},
		RunE: func(cmd *cobra.Command, args []string) error {
			client, clientErr := NewClient(rpc)
			if clientErr != nil {
				return clientErr
			}

			key, keyErr := KeyFromFile(keyfile, password)
			if keyErr != nil {
				return keyErr
			}

			chainIDCtx, cancelChainIDCtx := NewChainContext(timeout)
			defer cancelChainIDCtx()
			chainID, chainIDErr := client.ChainID(chainIDCtx)
			if chainIDErr != nil {
				return chainIDErr
			}

			transactionOpts, transactionOptsErr := bind.NewKeyedTransactorWithChainID(key.PrivateKey, chainID)
			if transactionOptsErr != nil {
				return transactionOptsErr
			}

			SetTransactionParametersFromArgs(transactionOpts, nonce, value, gasPrice, maxFeePerGas, maxPriorityFeePerGas, gasLimit, simulate)

			contract, contractErr := NewTokenFaucet(contractAddress, client)
			if contractErr != nil {
				return contractErr
			}

			session := TokenFaucetTransactorSession{
				Contract:     &contract.TokenFaucetTransactor,
				TransactOpts: *transactionOpts,
			}

			transaction, transactionErr := session.RenounceOwnership()
			if transactionErr != nil {
				return transactionErr
			}

			cmd.Printf("Transaction hash: %s\n", transaction.Hash().Hex())
			if transactionOpts.NoSend {
				estimationMessage := ethereum.CallMsg{
					From: transactionOpts.From,
					To:   &contractAddress,
					Data: transaction.Data(),
				}

				gasEstimationCtx, cancelGasEstimationCtx := NewChainContext(timeout)
				defer cancelGasEstimationCtx()

				gasEstimate, gasEstimateErr := client.EstimateGas(gasEstimationCtx, estimationMessage)
				if gasEstimateErr != nil {
					return gasEstimateErr
				}

				transactionBinary, transactionBinaryErr := transaction.MarshalBinary()
				if transactionBinaryErr != nil {
					return transactionBinaryErr
				}
				transactionBinaryHex := hex.EncodeToString(transactionBinary)

				cmd.Printf("Transaction: %s\nEstimated gas: %d\n", transactionBinaryHex, gasEstimate)
			} else {
				cmd.Println("Transaction submitted")
			}

			return nil
		},
	}

	cmd.Flags().StringVar(&rpc, "rpc", "", "URL of the JSONRPC API to use")
	cmd.Flags().StringVar(&keyfile, "keyfile", "", "Path to the keystore file to use for the transaction")
	cmd.Flags().StringVar(&password, "password", "", "Password to use to unlock the keystore (if not specified, you will be prompted for the password when the command executes)")
	cmd.Flags().StringVar(&nonce, "nonce", "", "Nonce to use for the transaction")
	cmd.Flags().StringVar(&value, "value", "", "Value to send with the transaction")
	cmd.Flags().StringVar(&gasPrice, "gas-price", "", "Gas price to use for the transaction")
	cmd.Flags().StringVar(&maxFeePerGas, "max-fee-per-gas", "", "Maximum fee per gas to use for the (EIP-1559) transaction")
	cmd.Flags().StringVar(&maxPriorityFeePerGas, "max-priority-fee-per-gas", "", "Maximum priority fee per gas to use for the (EIP-1559) transaction")
	cmd.Flags().Uint64Var(&gasLimit, "gas-limit", 0, "Gas limit for the transaction")
	cmd.Flags().BoolVar(&simulate, "simulate", false, "Simulate the transaction without sending it")
	cmd.Flags().UintVar(&timeout, "timeout", 60, "Timeout (in seconds) for interactions with the JSONRPC API")
	cmd.Flags().StringVar(&contractAddressRaw, "contract", "", "Address of the contract to interact with")

	return cmd
}
func CreateSetInboxAddressCommand() *cobra.Command {
	var keyfile, nonce, password, value, gasPrice, maxFeePerGas, maxPriorityFeePerGas, rpc, contractAddressRaw string
	var gasLimit uint64
	var simulate bool
	var timeout uint
	var contractAddress common.Address

	var inboxAddress common.Address
	var inboxAddressRaw string

	cmd := &cobra.Command{
		Use:   "set-inbox-address",
		Short: "Execute the SetInboxAddress method on a TokenFaucet contract",
		PreRunE: func(cmd *cobra.Command, args []string) error {
			if keyfile == "" {
				return fmt.Errorf("--keystore not specified")
			}

			if contractAddressRaw == "" {
				return fmt.Errorf("--contract not specified")
			} else if !common.IsHexAddress(contractAddressRaw) {
				return fmt.Errorf("--contract is not a valid Ethereum address")
			}
			contractAddress = common.HexToAddress(contractAddressRaw)

			if inboxAddressRaw == "" {
				return fmt.Errorf("--inbox-address argument not specified")
			} else if !common.IsHexAddress(inboxAddressRaw) {
				return fmt.Errorf("--inbox-address argument is not a valid Ethereum address")
			}
			inboxAddress = common.HexToAddress(inboxAddressRaw)

			return nil
		},
		RunE: func(cmd *cobra.Command, args []string) error {
			client, clientErr := NewClient(rpc)
			if clientErr != nil {
				return clientErr
			}

			key, keyErr := KeyFromFile(keyfile, password)
			if keyErr != nil {
				return keyErr
			}

			chainIDCtx, cancelChainIDCtx := NewChainContext(timeout)
			defer cancelChainIDCtx()
			chainID, chainIDErr := client.ChainID(chainIDCtx)
			if chainIDErr != nil {
				return chainIDErr
			}

			transactionOpts, transactionOptsErr := bind.NewKeyedTransactorWithChainID(key.PrivateKey, chainID)
			if transactionOptsErr != nil {
				return transactionOptsErr
			}

			SetTransactionParametersFromArgs(transactionOpts, nonce, value, gasPrice, maxFeePerGas, maxPriorityFeePerGas, gasLimit, simulate)

			contract, contractErr := NewTokenFaucet(contractAddress, client)
			if contractErr != nil {
				return contractErr
			}

			session := TokenFaucetTransactorSession{
				Contract:     &contract.TokenFaucetTransactor,
				TransactOpts: *transactionOpts,
			}

			transaction, transactionErr := session.SetInboxAddress(
				inboxAddress,
			)
			if transactionErr != nil {
				return transactionErr
			}

			cmd.Printf("Transaction hash: %s\n", transaction.Hash().Hex())
			if transactionOpts.NoSend {
				estimationMessage := ethereum.CallMsg{
					From: transactionOpts.From,
					To:   &contractAddress,
					Data: transaction.Data(),
				}

				gasEstimationCtx, cancelGasEstimationCtx := NewChainContext(timeout)
				defer cancelGasEstimationCtx()

				gasEstimate, gasEstimateErr := client.EstimateGas(gasEstimationCtx, estimationMessage)
				if gasEstimateErr != nil {
					return gasEstimateErr
				}

				transactionBinary, transactionBinaryErr := transaction.MarshalBinary()
				if transactionBinaryErr != nil {
					return transactionBinaryErr
				}
				transactionBinaryHex := hex.EncodeToString(transactionBinary)

				cmd.Printf("Transaction: %s\nEstimated gas: %d\n", transactionBinaryHex, gasEstimate)
			} else {
				cmd.Println("Transaction submitted")
			}

			return nil
		},
	}

	cmd.Flags().StringVar(&rpc, "rpc", "", "URL of the JSONRPC API to use")
	cmd.Flags().StringVar(&keyfile, "keyfile", "", "Path to the keystore file to use for the transaction")
	cmd.Flags().StringVar(&password, "password", "", "Password to use to unlock the keystore (if not specified, you will be prompted for the password when the command executes)")
	cmd.Flags().StringVar(&nonce, "nonce", "", "Nonce to use for the transaction")
	cmd.Flags().StringVar(&value, "value", "", "Value to send with the transaction")
	cmd.Flags().StringVar(&gasPrice, "gas-price", "", "Gas price to use for the transaction")
	cmd.Flags().StringVar(&maxFeePerGas, "max-fee-per-gas", "", "Maximum fee per gas to use for the (EIP-1559) transaction")
	cmd.Flags().StringVar(&maxPriorityFeePerGas, "max-priority-fee-per-gas", "", "Maximum priority fee per gas to use for the (EIP-1559) transaction")
	cmd.Flags().Uint64Var(&gasLimit, "gas-limit", 0, "Gas limit for the transaction")
	cmd.Flags().BoolVar(&simulate, "simulate", false, "Simulate the transaction without sending it")
	cmd.Flags().UintVar(&timeout, "timeout", 60, "Timeout (in seconds) for interactions with the JSONRPC API")
	cmd.Flags().StringVar(&contractAddressRaw, "contract", "", "Address of the contract to interact with")

	cmd.Flags().StringVar(&inboxAddressRaw, "inbox-address", "", "inbox-address argument (common.Address)")

	return cmd
}
func CreateSetTokenAddressCommand() *cobra.Command {
	var keyfile, nonce, password, value, gasPrice, maxFeePerGas, maxPriorityFeePerGas, rpc, contractAddressRaw string
	var gasLimit uint64
	var simulate bool
	var timeout uint
	var contractAddress common.Address

	var tokenAddress common.Address
	var tokenAddressRaw string

	cmd := &cobra.Command{
		Use:   "set-token-address",
		Short: "Execute the SetTokenAddress method on a TokenFaucet contract",
		PreRunE: func(cmd *cobra.Command, args []string) error {
			if keyfile == "" {
				return fmt.Errorf("--keystore not specified")
			}

			if contractAddressRaw == "" {
				return fmt.Errorf("--contract not specified")
			} else if !common.IsHexAddress(contractAddressRaw) {
				return fmt.Errorf("--contract is not a valid Ethereum address")
			}
			contractAddress = common.HexToAddress(contractAddressRaw)

			if tokenAddressRaw == "" {
				return fmt.Errorf("--token-address argument not specified")
			} else if !common.IsHexAddress(tokenAddressRaw) {
				return fmt.Errorf("--token-address argument is not a valid Ethereum address")
			}
			tokenAddress = common.HexToAddress(tokenAddressRaw)

			return nil
		},
		RunE: func(cmd *cobra.Command, args []string) error {
			client, clientErr := NewClient(rpc)
			if clientErr != nil {
				return clientErr
			}

			key, keyErr := KeyFromFile(keyfile, password)
			if keyErr != nil {
				return keyErr
			}

			chainIDCtx, cancelChainIDCtx := NewChainContext(timeout)
			defer cancelChainIDCtx()
			chainID, chainIDErr := client.ChainID(chainIDCtx)
			if chainIDErr != nil {
				return chainIDErr
			}

			transactionOpts, transactionOptsErr := bind.NewKeyedTransactorWithChainID(key.PrivateKey, chainID)
			if transactionOptsErr != nil {
				return transactionOptsErr
			}

			SetTransactionParametersFromArgs(transactionOpts, nonce, value, gasPrice, maxFeePerGas, maxPriorityFeePerGas, gasLimit, simulate)

			contract, contractErr := NewTokenFaucet(contractAddress, client)
			if contractErr != nil {
				return contractErr
			}

			session := TokenFaucetTransactorSession{
				Contract:     &contract.TokenFaucetTransactor,
				TransactOpts: *transactionOpts,
			}

			transaction, transactionErr := session.SetTokenAddress(
				tokenAddress,
			)
			if transactionErr != nil {
				return transactionErr
			}

			cmd.Printf("Transaction hash: %s\n", transaction.Hash().Hex())
			if transactionOpts.NoSend {
				estimationMessage := ethereum.CallMsg{
					From: transactionOpts.From,
					To:   &contractAddress,
					Data: transaction.Data(),
				}

				gasEstimationCtx, cancelGasEstimationCtx := NewChainContext(timeout)
				defer cancelGasEstimationCtx()

				gasEstimate, gasEstimateErr := client.EstimateGas(gasEstimationCtx, estimationMessage)
				if gasEstimateErr != nil {
					return gasEstimateErr
				}

				transactionBinary, transactionBinaryErr := transaction.MarshalBinary()
				if transactionBinaryErr != nil {
					return transactionBinaryErr
				}
				transactionBinaryHex := hex.EncodeToString(transactionBinary)

				cmd.Printf("Transaction: %s\nEstimated gas: %d\n", transactionBinaryHex, gasEstimate)
			} else {
				cmd.Println("Transaction submitted")
			}

			return nil
		},
	}

	cmd.Flags().StringVar(&rpc, "rpc", "", "URL of the JSONRPC API to use")
	cmd.Flags().StringVar(&keyfile, "keyfile", "", "Path to the keystore file to use for the transaction")
	cmd.Flags().StringVar(&password, "password", "", "Password to use to unlock the keystore (if not specified, you will be prompted for the password when the command executes)")
	cmd.Flags().StringVar(&nonce, "nonce", "", "Nonce to use for the transaction")
	cmd.Flags().StringVar(&value, "value", "", "Value to send with the transaction")
	cmd.Flags().StringVar(&gasPrice, "gas-price", "", "Gas price to use for the transaction")
	cmd.Flags().StringVar(&maxFeePerGas, "max-fee-per-gas", "", "Maximum fee per gas to use for the (EIP-1559) transaction")
	cmd.Flags().StringVar(&maxPriorityFeePerGas, "max-priority-fee-per-gas", "", "Maximum priority fee per gas to use for the (EIP-1559) transaction")
	cmd.Flags().Uint64Var(&gasLimit, "gas-limit", 0, "Gas limit for the transaction")
	cmd.Flags().BoolVar(&simulate, "simulate", false, "Simulate the transaction without sending it")
	cmd.Flags().UintVar(&timeout, "timeout", 60, "Timeout (in seconds) for interactions with the JSONRPC API")
	cmd.Flags().StringVar(&contractAddressRaw, "contract", "", "Address of the contract to interact with")

	cmd.Flags().StringVar(&tokenAddressRaw, "token-address", "", "token-address argument (common.Address)")

	return cmd
}
func CreateTransferOwnershipCommand() *cobra.Command {
	var keyfile, nonce, password, value, gasPrice, maxFeePerGas, maxPriorityFeePerGas, rpc, contractAddressRaw string
	var gasLimit uint64
	var simulate bool
	var timeout uint
	var contractAddress common.Address

	var newOwner common.Address
	var newOwnerRaw string

	cmd := &cobra.Command{
		Use:   "transfer-ownership",
		Short: "Execute the TransferOwnership method on a TokenFaucet contract",
		PreRunE: func(cmd *cobra.Command, args []string) error {
			if keyfile == "" {
				return fmt.Errorf("--keystore not specified")
			}

			if contractAddressRaw == "" {
				return fmt.Errorf("--contract not specified")
			} else if !common.IsHexAddress(contractAddressRaw) {
				return fmt.Errorf("--contract is not a valid Ethereum address")
			}
			contractAddress = common.HexToAddress(contractAddressRaw)

			if newOwnerRaw == "" {
				return fmt.Errorf("--new-owner argument not specified")
			} else if !common.IsHexAddress(newOwnerRaw) {
				return fmt.Errorf("--new-owner argument is not a valid Ethereum address")
			}
			newOwner = common.HexToAddress(newOwnerRaw)

			return nil
		},
		RunE: func(cmd *cobra.Command, args []string) error {
			client, clientErr := NewClient(rpc)
			if clientErr != nil {
				return clientErr
			}

			key, keyErr := KeyFromFile(keyfile, password)
			if keyErr != nil {
				return keyErr
			}

			chainIDCtx, cancelChainIDCtx := NewChainContext(timeout)
			defer cancelChainIDCtx()
			chainID, chainIDErr := client.ChainID(chainIDCtx)
			if chainIDErr != nil {
				return chainIDErr
			}

			transactionOpts, transactionOptsErr := bind.NewKeyedTransactorWithChainID(key.PrivateKey, chainID)
			if transactionOptsErr != nil {
				return transactionOptsErr
			}

			SetTransactionParametersFromArgs(transactionOpts, nonce, value, gasPrice, maxFeePerGas, maxPriorityFeePerGas, gasLimit, simulate)

			contract, contractErr := NewTokenFaucet(contractAddress, client)
			if contractErr != nil {
				return contractErr
			}

			session := TokenFaucetTransactorSession{
				Contract:     &contract.TokenFaucetTransactor,
				TransactOpts: *transactionOpts,
			}

			transaction, transactionErr := session.TransferOwnership(
				newOwner,
			)
			if transactionErr != nil {
				return transactionErr
			}

			cmd.Printf("Transaction hash: %s\n", transaction.Hash().Hex())
			if transactionOpts.NoSend {
				estimationMessage := ethereum.CallMsg{
					From: transactionOpts.From,
					To:   &contractAddress,
					Data: transaction.Data(),
				}

				gasEstimationCtx, cancelGasEstimationCtx := NewChainContext(timeout)
				defer cancelGasEstimationCtx()

				gasEstimate, gasEstimateErr := client.EstimateGas(gasEstimationCtx, estimationMessage)
				if gasEstimateErr != nil {
					return gasEstimateErr
				}

				transactionBinary, transactionBinaryErr := transaction.MarshalBinary()
				if transactionBinaryErr != nil {
					return transactionBinaryErr
				}
				transactionBinaryHex := hex.EncodeToString(transactionBinary)

				cmd.Printf("Transaction: %s\nEstimated gas: %d\n", transactionBinaryHex, gasEstimate)
			} else {
				cmd.Println("Transaction submitted")
			}

			return nil
		},
	}

	cmd.Flags().StringVar(&rpc, "rpc", "", "URL of the JSONRPC API to use")
	cmd.Flags().StringVar(&keyfile, "keyfile", "", "Path to the keystore file to use for the transaction")
	cmd.Flags().StringVar(&password, "password", "", "Password to use to unlock the keystore (if not specified, you will be prompted for the password when the command executes)")
	cmd.Flags().StringVar(&nonce, "nonce", "", "Nonce to use for the transaction")
	cmd.Flags().StringVar(&value, "value", "", "Value to send with the transaction")
	cmd.Flags().StringVar(&gasPrice, "gas-price", "", "Gas price to use for the transaction")
	cmd.Flags().StringVar(&maxFeePerGas, "max-fee-per-gas", "", "Maximum fee per gas to use for the (EIP-1559) transaction")
	cmd.Flags().StringVar(&maxPriorityFeePerGas, "max-priority-fee-per-gas", "", "Maximum priority fee per gas to use for the (EIP-1559) transaction")
	cmd.Flags().Uint64Var(&gasLimit, "gas-limit", 0, "Gas limit for the transaction")
	cmd.Flags().BoolVar(&simulate, "simulate", false, "Simulate the transaction without sending it")
	cmd.Flags().UintVar(&timeout, "timeout", 60, "Timeout (in seconds) for interactions with the JSONRPC API")
	cmd.Flags().StringVar(&contractAddressRaw, "contract", "", "Address of the contract to interact with")

	cmd.Flags().StringVar(&newOwnerRaw, "new-owner", "", "new-owner argument (common.Address)")

	return cmd
}

var ErrNoRPCURL error = errors.New("no RPC URL provided -- please pass an RPC URL from the command line or set the TOKEN_FAUCET_RPC_URL environment variable")

// Generates an Ethereum client to the JSONRPC API at the given URL. If rpcURL is empty, then it
// attempts to read the RPC URL from the TOKEN_FAUCET_RPC_URL environment variable. If that is empty,
// too, then it returns an error.
func NewClient(rpcURL string) (*ethclient.Client, error) {
	if rpcURL == "" {
		rpcURL = os.Getenv("TOKEN_FAUCET_RPC_URL")
	}

	if rpcURL == "" {
		return nil, ErrNoRPCURL
	}

	client, err := ethclient.Dial(rpcURL)
	return client, err
}

// Creates a new context to be used when interacting with the chain client.
func NewChainContext(timeout uint) (context.Context, context.CancelFunc) {
	baseCtx := context.Background()
	parsedTimeout := time.Duration(timeout) * time.Second
	ctx, cancel := context.WithTimeout(baseCtx, parsedTimeout)
	return ctx, cancel
}

// Unlocks a key from a keystore (byte contents of a keystore file) with the given password.
func UnlockKeystore(keystoreData []byte, password string) (*keystore.Key, error) {
	key, err := keystore.DecryptKey(keystoreData, password)
	return key, err
}

// Loads a key from file, prompting the user for the password if it is not provided as a function argument.
func KeyFromFile(keystoreFile string, password string) (*keystore.Key, error) {
	var emptyKey *keystore.Key
	keystoreContent, readErr := os.ReadFile(keystoreFile)
	if readErr != nil {
		return emptyKey, readErr
	}

	// If password is "", prompt user for password.
	if password == "" {
		fmt.Printf("Please provide a password for keystore (%s): ", keystoreFile)
		passwordRaw, inputErr := term.ReadPassword(int(os.Stdin.Fd()))
		if inputErr != nil {
			return emptyKey, fmt.Errorf("error reading password: %s", inputErr.Error())
		}
		fmt.Print("\n")
		password = string(passwordRaw)
	}

	key, err := UnlockKeystore(keystoreContent, password)
	return key, err
}

// This method is used to set the parameters on a view call from command line arguments (represented mostly as
// strings).
func SetCallParametersFromArgs(opts *bind.CallOpts, pending bool, fromAddress, blockNumber string) {
	if pending {
		opts.Pending = true
	}

	if fromAddress != "" {
		opts.From = common.HexToAddress(fromAddress)
	}

	if blockNumber != "" {
		opts.BlockNumber = new(big.Int)
		opts.BlockNumber.SetString(blockNumber, 0)
	}
}

// This method is used to set the parameters on a transaction from command line arguments (represented mostly as
// strings).
func SetTransactionParametersFromArgs(opts *bind.TransactOpts, nonce, value, gasPrice, maxFeePerGas, maxPriorityFeePerGas string, gasLimit uint64, noSend bool) {
	if nonce != "" {
		opts.Nonce = new(big.Int)
		opts.Nonce.SetString(nonce, 0)
	}

	if value != "" {
		opts.Value = new(big.Int)
		opts.Value.SetString(value, 0)
	}

	if gasPrice != "" {
		opts.GasPrice = new(big.Int)
		opts.GasPrice.SetString(gasPrice, 0)
	}

	if maxFeePerGas != "" {
		opts.GasFeeCap = new(big.Int)
		opts.GasFeeCap.SetString(maxFeePerGas, 0)
	}

	if maxPriorityFeePerGas != "" {
		opts.GasTipCap = new(big.Int)
		opts.GasTipCap.SetString(maxPriorityFeePerGas, 0)
	}

	if gasLimit != 0 {
		opts.GasLimit = gasLimit
	}

	opts.NoSend = noSend
}

func CreateTokenFaucetCommand() *cobra.Command {
	cmd := &cobra.Command{
		Use:   "token-faucet",
		Short: "Interact with the TokenFaucet contract",
		Run: func(cmd *cobra.Command, args []string) {
			cmd.Help()
		},
	}

	cmd.SetOut(os.Stdout)

	DeployGroup := &cobra.Group{
		ID: "deploy", Title: "Commands which deploy contracts",
	}
	cmd.AddGroup(DeployGroup)
	ViewGroup := &cobra.Group{
		ID: "view", Title: "Commands which view contract state",
	}
	TransactGroup := &cobra.Group{
		ID: "transact", Title: "Commands which submit transactions",
	}
	cmd.AddGroup(ViewGroup, TransactGroup)

	cmdDeployTokenFaucet := CreateTokenFaucetDeploymentCommand()
	cmdDeployTokenFaucet.GroupID = DeployGroup.ID
	cmd.AddCommand(cmdDeployTokenFaucet)

	cmdViewOwner := CreateOwnerCommand()
	cmdViewOwner.GroupID = ViewGroup.ID
	cmd.AddCommand(cmdViewOwner)
	cmdViewTokenAddress := CreateTokenAddressCommand()
	cmdViewTokenAddress.GroupID = ViewGroup.ID
	cmd.AddCommand(cmdViewTokenAddress)
	cmdViewDEFAULTGASLIMIT := CreateDefaultgaslimitCommand()
	cmdViewDEFAULTGASLIMIT.GroupID = ViewGroup.ID
	cmd.AddCommand(cmdViewDEFAULTGASLIMIT)
	cmdViewFaucetAmount := CreateFaucetAmountCommand()
	cmdViewFaucetAmount.GroupID = ViewGroup.ID
	cmd.AddCommand(cmdViewFaucetAmount)
	cmdViewFaucetTimeInterval := CreateFaucetTimeIntervalCommand()
	cmdViewFaucetTimeInterval.GroupID = ViewGroup.ID
	cmd.AddCommand(cmdViewFaucetTimeInterval)
	cmdViewInboxAddress := CreateInboxAddressCommand()
	cmdViewInboxAddress.GroupID = ViewGroup.ID
	cmd.AddCommand(cmdViewInboxAddress)
	cmdViewLastClaimedL2Timestamp := CreateLastClaimedL2TimestampCommand()
	cmdViewLastClaimedL2Timestamp.GroupID = ViewGroup.ID
	cmd.AddCommand(cmdViewLastClaimedL2Timestamp)
	cmdViewLastClaimedL3Timestamp := CreateLastClaimedL3TimestampCommand()
	cmdViewLastClaimedL3Timestamp.GroupID = ViewGroup.ID
	cmd.AddCommand(cmdViewLastClaimedL3Timestamp)

	cmdTransactClaimL3 := CreateClaimL3Command()
	cmdTransactClaimL3.GroupID = TransactGroup.ID
	cmd.AddCommand(cmdTransactClaimL3)
	cmdTransactRescueTokens := CreateRescueTokensCommand()
	cmdTransactRescueTokens.GroupID = TransactGroup.ID
	cmd.AddCommand(cmdTransactRescueTokens)
	cmdTransactSetFaucetAmount := CreateSetFaucetAmountCommand()
	cmdTransactSetFaucetAmount.GroupID = TransactGroup.ID
	cmd.AddCommand(cmdTransactSetFaucetAmount)
	cmdTransactSetFaucetTimeInterval := CreateSetFaucetTimeIntervalCommand()
	cmdTransactSetFaucetTimeInterval.GroupID = TransactGroup.ID
	cmd.AddCommand(cmdTransactSetFaucetTimeInterval)
	cmdTransactClaim := CreateClaimCommand()
	cmdTransactClaim.GroupID = TransactGroup.ID
	cmd.AddCommand(cmdTransactClaim)
	cmdTransactRenounceOwnership := CreateRenounceOwnershipCommand()
	cmdTransactRenounceOwnership.GroupID = TransactGroup.ID
	cmd.AddCommand(cmdTransactRenounceOwnership)
	cmdTransactSetInboxAddress := CreateSetInboxAddressCommand()
	cmdTransactSetInboxAddress.GroupID = TransactGroup.ID
	cmd.AddCommand(cmdTransactSetInboxAddress)
	cmdTransactSetTokenAddress := CreateSetTokenAddressCommand()
	cmdTransactSetTokenAddress.GroupID = TransactGroup.ID
	cmd.AddCommand(cmdTransactSetTokenAddress)
	cmdTransactTransferOwnership := CreateTransferOwnershipCommand()
	cmdTransactTransferOwnership.GroupID = TransactGroup.ID
	cmd.AddCommand(cmdTransactTransferOwnership)

	return cmd
}
