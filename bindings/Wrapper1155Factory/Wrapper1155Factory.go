// This file was generated by seer: https://github.com/moonstream-to/seer.
// seer version: 0.1.3
// seer command: seer evm generate --package Wrapper1155Factory --cli --struct Wrapper1155Factory --output bindings/Wrapper1155Factory/Wrapper1155Factory.go
// Code generated - DO NOT EDIT.
// This file is a generated binding and any manual changes will be lost.

package Wrapper1155Factory

import (
	"errors"
	"math/big"
	"strings"

	"context"

	ethereum "github.com/ethereum/go-ethereum"
	"github.com/ethereum/go-ethereum/accounts/abi"
	"github.com/ethereum/go-ethereum/accounts/abi/bind"
	"github.com/ethereum/go-ethereum/common"
	"github.com/ethereum/go-ethereum/core/types"
	"github.com/ethereum/go-ethereum/event"

	// Reference imports to suppress errors if they are not otherwise used.
	"encoding/hex"
	"fmt"
	"os"
	"time"

	"github.com/ethereum/go-ethereum/accounts/keystore"
	"github.com/ethereum/go-ethereum/ethclient"
	"github.com/spf13/cobra"
	"golang.org/x/term"
)

var (
	_ = errors.New
	_ = big.NewInt
	_ = strings.NewReader
	_ = ethereum.NotFound
	_ = bind.Bind
	_ = common.Big1
	_ = types.BloomLookup
	_ = event.NewSubscription
	_ = abi.ConvertType
)

// Wrapper1155FactoryMetaData contains all meta data concerning the Wrapper1155Factory contract.
var Wrapper1155FactoryMetaData = &bind.MetaData{
	ABI: "[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_contract\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"create20\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"}],\"name\":\"get1155TokenID\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"_contract\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenid\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_contract\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenid\",\"type\":\"uint256\"}],\"name\":\"get1155Wrapper\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"}]",
	Bin: "0x608060405234801561001057600080fd5b50612e76806100206000396000f3fe60806040523480156200001157600080fd5b5060043610620000465760003560e01c8063611793e4146200004b578063711c7ab91462000081578063e885105914620000b8575b600080fd5b620000696004803603810190620000639190620004ab565b620000ee565b60405162000078919062000503565b60405180910390f35b6200009f600480360381019062000099919062000520565b620002cc565b604051620000af92919062000563565b60405180910390f35b620000d66004803603810190620000d09190620004ab565b6200037e565b604051620000e5919062000503565b60405180910390f35b60008060008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600083815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff1614620002c657600083604051602001620001ac9190620005e0565b6040516020818303038152906040529050600083604051602001620001d2919062000622565b6040516020818303038152906040529050600060405180602001620001f790620003f8565b6020820181038252601f19601f820116604052509050600083838888604051602001620002289493929190620006b8565b604051602081830303815290604052805190602001209050808251602084016000f594508473ffffffffffffffffffffffffffffffffffffffff1663148f51f3888887876040518563ffffffff1660e01b81526004016200028d949392919062000769565b600060405180830381600087803b158015620002a857600080fd5b505af1158015620002bd573d6000803e3d6000fd5b50505050505050505b92915050565b600080600160008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060000160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169150600160008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600101549050915091565b60008060008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600083815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905092915050565b61267c80620007c583390190565b600080fd5b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b600062000438826200040b565b9050919050565b6200044a816200042b565b81146200045657600080fd5b50565b6000813590506200046a816200043f565b92915050565b6000819050919050565b620004858162000470565b81146200049157600080fd5b50565b600081359050620004a5816200047a565b92915050565b60008060408385031215620004c557620004c462000406565b5b6000620004d58582860162000459565b9250506020620004e88582860162000494565b9150509250929050565b620004fd816200042b565b82525050565b60006020820190506200051a6000830184620004f2565b92915050565b60006020828403121562000539576200053862000406565b5b6000620005498482850162000459565b91505092915050565b6200055d8162000470565b82525050565b60006040820190506200057a6000830185620004f2565b62000589602083018462000552565b9392505050565b60008160601b9050919050565b6000620005aa8262000590565b9050919050565b6000620005be826200059d565b9050919050565b620005da620005d4826200042b565b620005b1565b82525050565b6000620005ee8284620005c5565b60148201915081905092915050565b6000819050919050565b6200061c620006168262000470565b620005fd565b82525050565b600062000630828462000607565b60208201915081905092915050565b600081519050919050565b600081905092915050565b60005b838110156200067557808201518184015260208101905062000658565b60008484015250505050565b60006200068e826200063f565b6200069a81856200064a565b9350620006ac81856020860162000655565b80840191505092915050565b6000620006c6828762000681565b9150620006d4828662000681565b9150620006e28285620005c5565b601482019150620006f4828462000607565b60208201915081905095945050505050565b600082825260208201905092915050565b6000601f19601f8301169050919050565b600062000735826200063f565b62000741818562000706565b93506200075381856020860162000655565b6200075e8162000717565b840191505092915050565b6000608082019050620007806000830187620004f2565b6200078f602083018662000552565b8181036040830152620007a3818562000728565b90508181036060830152620007b9818462000728565b90509594505050505056fe60806040523480156200001157600080fd5b506040518060400160405280600b81526020017f57726170706572313135350000000000000000000000000000000000000000008152506040518060400160405280600b81526020017f577261707065723131353500000000000000000000000000000000000000000081525081600390816200008f91906200036d565b508060049081620000a191906200036d565b505050600160058190555033600a60006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555062000454565b600081519050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b600060028204905060018216806200017557607f821691505b6020821081036200018b576200018a6200012d565b5b50919050565b60008190508160005260206000209050919050565b60006020601f8301049050919050565b600082821b905092915050565b600060088302620001f57fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff82620001b6565b620002018683620001b6565b95508019841693508086168417925050509392505050565b6000819050919050565b6000819050919050565b60006200024e62000248620002428462000219565b62000223565b62000219565b9050919050565b6000819050919050565b6200026a836200022d565b62000282620002798262000255565b848454620001c3565b825550505050565b600090565b620002996200028a565b620002a68184846200025f565b505050565b5b81811015620002ce57620002c26000826200028f565b600181019050620002ac565b5050565b601f8211156200031d57620002e78162000191565b620002f284620001a6565b8101602085101562000302578190505b6200031a6200031185620001a6565b830182620002ab565b50505b505050565b600082821c905092915050565b6000620003426000198460080262000322565b1980831691505092915050565b60006200035d83836200032f565b9150826002028217905092915050565b6200037882620000f3565b67ffffffffffffffff811115620003945762000393620000fe565b5b620003a082546200015c565b620003ad828285620002d2565b600060209050601f831160018114620003e55760008415620003d0578287015190505b620003dc85826200034f565b8655506200044c565b601f198416620003f58662000191565b60005b828110156200041f57848901518255600182019150602085019450602081019050620003f8565b868310156200043f57848901516200043b601f8916826200032f565b8355505b6001600288020188555050505b505050505050565b61221880620004646000396000f3fe608060405234801561001057600080fd5b506004361061010b5760003560e01c8063494cf96c116100a2578063a9059cbb11610071578063a9059cbb146102f4578063bc197c8114610324578063c9e7b16714610354578063dd62ed3e14610384578063f23a6e61146103b45761010b565b8063494cf96c1461024657806354f7f2491461027657806370a08231146102a657806395d89b41146102d65761010b565b806318160ddd116100de57806318160ddd146101aa57806323b872dd146101c857806329338ee4146101f8578063313ce567146102285761010b565b806301ffc9a71461011057806306fdde0314610140578063095ea7b31461015e578063148f51f31461018e575b600080fd5b61012a6004803603810190610125919061139b565b6103e4565b60405161013791906113e3565b60405180910390f35b61014861045e565b604051610155919061148e565b60405180910390f35b61017860048036038101906101739190611544565b6104f0565b60405161018591906113e3565b60405180910390f35b6101a860048036038101906101a391906116b9565b610513565b005b6101b2610653565b6040516101bf9190611767565b60405180910390f35b6101e260048036038101906101dd9190611782565b61065d565b6040516101ef91906113e3565b60405180910390f35b610212600480360381019061020d91906117d5565b61068c565b60405161021f9190611767565b60405180910390f35b6102306106b9565b60405161023d919061181e565b60405180910390f35b610260600480360381019061025b9190611782565b6106c2565b60405161026d9190611767565b60405180910390f35b610290600480360381019061028b9190611782565b610780565b60405161029d9190611767565b60405180910390f35b6102c060048036038101906102bb91906117d5565b6108b0565b6040516102cd9190611767565b60405180910390f35b6102de6108f8565b6040516102eb919061148e565b60405180910390f35b61030e60048036038101906103099190611544565b61098a565b60405161031b91906113e3565b60405180910390f35b61033e600480360381019061033991906119a2565b6109ad565b60405161034b9190611a80565b60405180910390f35b61036e600480360381019061036991906117d5565b6109c2565b60405161037b9190611767565b60405180910390f35b61039e60048036038101906103999190611a9b565b610b37565b6040516103ab9190611767565b60405180910390f35b6103ce60048036038101906103c99190611adb565b610bbe565b6040516103db9190611a80565b60405180910390f35b60007f4e2312e0000000000000000000000000000000000000000000000000000000007bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916827bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19161480610457575061045682610bd3565b5b9050919050565b60606008805461046d90611ba1565b80601f016020809104026020016040519081016040528092919081815260200182805461049990611ba1565b80156104e65780601f106104bb576101008083540402835291602001916104e6565b820191906000526020600020905b8154815290600101906020018083116104c957829003601f168201915b5050505050905090565b6000806104fb610c3d565b9050610508818585610c45565b600191505092915050565b600a60009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16146105a3576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161059a90611c1e565b60405180910390fd5b83600660006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508260078190555081600890816105fa9190611dea565b50806009908161060a9190611dea565b506000600a60006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555050505050565b6000600254905090565b600080610668610c3d565b9050610675858285610c57565b610680858585610ceb565b60019150509392505050565b6000610696610ddf565b61069f306108b0565b90506106ab828261098a565b506106b4610e25565b919050565b60006012905090565b6000600660009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663f242432a8530600754866040518563ffffffff1660e01b81526004016107279493929190611f28565b600060405180830381600087803b15801561074157600080fd5b505af1158015610755573d6000803e3d6000fd5b50505050670de0b6b3a76400008261076d9190611faf565b90506107798382610e2f565b9392505050565b600061078a610ddf565b670de0b6b3a76400008261079e9190612020565b9050600081116107e3576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016107da9061209d565b60405180910390fd5b6108018430670de0b6b3a7640000846107fc9190611faf565b61065d565b5061080c3082610eb1565b600660009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663f242432a3085600754856040518563ffffffff1660e01b815260040161086f9493929190611f28565b600060405180830381600087803b15801561088957600080fd5b505af115801561089d573d6000803e3d6000fd5b505050506108a9610e25565b9392505050565b60008060008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020549050919050565b60606009805461090790611ba1565b80601f016020809104026020016040519081016040528092919081815260200182805461093390611ba1565b80156109805780601f1061095557610100808354040283529160200191610980565b820191906000526020600020905b81548152906001019060200180831161096357829003601f168201915b5050505050905090565b600080610995610c3d565b90506109a2818585610ceb565b600191505092915050565b600063bc197c8160e01b905095945050505050565b60006109cc610ddf565b6000600660009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1662fdd58e306007546040518363ffffffff1660e01b8152600401610a2c9291906120bd565b602060405180830381865afa158015610a49573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610a6d91906120fb565b9050610a77610653565b811115610b2957610a86610653565b81610a919190612128565b9150600660009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663f242432a3085600754866040518563ffffffff1660e01b8152600401610af69493929190611f28565b600060405180830381600087803b158015610b1057600080fd5b505af1158015610b24573d6000803e3d6000fd5b505050505b50610b32610e25565b919050565b6000600160008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054905092915050565b600063f23a6e6160e01b905095945050505050565b60007f01ffc9a7000000000000000000000000000000000000000000000000000000007bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916827bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916149050919050565b600033905090565b610c528383836001610f33565b505050565b6000610c638484610b37565b90507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff8114610ce55781811015610cd5578281836040517ffb8f41b2000000000000000000000000000000000000000000000000000000008152600401610ccc9392919061215c565b60405180910390fd5b610ce484848484036000610f33565b5b50505050565b600073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff1603610d5d5760006040517f96c6fd1e000000000000000000000000000000000000000000000000000000008152600401610d549190612193565b60405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff1603610dcf5760006040517fec442f05000000000000000000000000000000000000000000000000000000008152600401610dc69190612193565b60405180910390fd5b610dda83838361110a565b505050565b600260055403610e1b576040517f3ee5aeb500000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6002600581905550565b6001600581905550565b600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff1603610ea15760006040517fec442f05000000000000000000000000000000000000000000000000000000008152600401610e989190612193565b60405180910390fd5b610ead6000838361110a565b5050565b600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff1603610f235760006040517f96c6fd1e000000000000000000000000000000000000000000000000000000008152600401610f1a9190612193565b60405180910390fd5b610f2f8260008361110a565b5050565b600073ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff1603610fa55760006040517fe602df05000000000000000000000000000000000000000000000000000000008152600401610f9c9190612193565b60405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff16036110175760006040517f94280d6200000000000000000000000000000000000000000000000000000000815260040161100e9190612193565b60405180910390fd5b81600160008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055508015611104578273ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff167f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925846040516110fb9190611767565b60405180910390a35b50505050565b600073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff160361115c57806002600082825461115091906121ae565b9250508190555061122f565b60008060008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020549050818110156111e8578381836040517fe450d38c0000000000000000000000000000000000000000000000000000000081526004016111df9392919061215c565b60405180910390fd5b8181036000808673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002081905550505b600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff160361127857806002600082825403925050819055506112c5565b806000808473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600082825401925050819055505b8173ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef836040516113229190611767565b60405180910390a3505050565b6000604051905090565b600080fd5b600080fd5b60007fffffffff0000000000000000000000000000000000000000000000000000000082169050919050565b61137881611343565b811461138357600080fd5b50565b6000813590506113958161136f565b92915050565b6000602082840312156113b1576113b0611339565b5b60006113bf84828501611386565b91505092915050565b60008115159050919050565b6113dd816113c8565b82525050565b60006020820190506113f860008301846113d4565b92915050565b600081519050919050565b600082825260208201905092915050565b60005b8381101561143857808201518184015260208101905061141d565b60008484015250505050565b6000601f19601f8301169050919050565b6000611460826113fe565b61146a8185611409565b935061147a81856020860161141a565b61148381611444565b840191505092915050565b600060208201905081810360008301526114a88184611455565b905092915050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b60006114db826114b0565b9050919050565b6114eb816114d0565b81146114f657600080fd5b50565b600081359050611508816114e2565b92915050565b6000819050919050565b6115218161150e565b811461152c57600080fd5b50565b60008135905061153e81611518565b92915050565b6000806040838503121561155b5761155a611339565b5b6000611569858286016114f9565b925050602061157a8582860161152f565b9150509250929050565b600080fd5b600080fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b6115c682611444565b810181811067ffffffffffffffff821117156115e5576115e461158e565b5b80604052505050565b60006115f861132f565b905061160482826115bd565b919050565b600067ffffffffffffffff8211156116245761162361158e565b5b61162d82611444565b9050602081019050919050565b82818337600083830152505050565b600061165c61165784611609565b6115ee565b90508281526020810184848401111561167857611677611589565b5b61168384828561163a565b509392505050565b600082601f8301126116a05761169f611584565b5b81356116b0848260208601611649565b91505092915050565b600080600080608085870312156116d3576116d2611339565b5b60006116e1878288016114f9565b94505060206116f28782880161152f565b935050604085013567ffffffffffffffff8111156117135761171261133e565b5b61171f8782880161168b565b925050606085013567ffffffffffffffff8111156117405761173f61133e565b5b61174c8782880161168b565b91505092959194509250565b6117618161150e565b82525050565b600060208201905061177c6000830184611758565b92915050565b60008060006060848603121561179b5761179a611339565b5b60006117a9868287016114f9565b93505060206117ba868287016114f9565b92505060406117cb8682870161152f565b9150509250925092565b6000602082840312156117eb576117ea611339565b5b60006117f9848285016114f9565b91505092915050565b600060ff82169050919050565b61181881611802565b82525050565b6000602082019050611833600083018461180f565b92915050565b600067ffffffffffffffff8211156118545761185361158e565b5b602082029050602081019050919050565b600080fd5b600061187d61187884611839565b6115ee565b905080838252602082019050602084028301858111156118a05761189f611865565b5b835b818110156118c957806118b5888261152f565b8452602084019350506020810190506118a2565b5050509392505050565b600082601f8301126118e8576118e7611584565b5b81356118f884826020860161186a565b91505092915050565b600067ffffffffffffffff82111561191c5761191b61158e565b5b61192582611444565b9050602081019050919050565b600061194561194084611901565b6115ee565b90508281526020810184848401111561196157611960611589565b5b61196c84828561163a565b509392505050565b600082601f83011261198957611988611584565b5b8135611999848260208601611932565b91505092915050565b600080600080600060a086880312156119be576119bd611339565b5b60006119cc888289016114f9565b95505060206119dd888289016114f9565b945050604086013567ffffffffffffffff8111156119fe576119fd61133e565b5b611a0a888289016118d3565b935050606086013567ffffffffffffffff811115611a2b57611a2a61133e565b5b611a37888289016118d3565b925050608086013567ffffffffffffffff811115611a5857611a5761133e565b5b611a6488828901611974565b9150509295509295909350565b611a7a81611343565b82525050565b6000602082019050611a956000830184611a71565b92915050565b60008060408385031215611ab257611ab1611339565b5b6000611ac0858286016114f9565b9250506020611ad1858286016114f9565b9150509250929050565b600080600080600060a08688031215611af757611af6611339565b5b6000611b05888289016114f9565b9550506020611b16888289016114f9565b9450506040611b278882890161152f565b9350506060611b388882890161152f565b925050608086013567ffffffffffffffff811115611b5957611b5861133e565b5b611b6588828901611974565b9150509295509295909350565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b60006002820490506001821680611bb957607f821691505b602082108103611bcc57611bcb611b72565b5b50919050565b7f4e6f742043726561746f72000000000000000000000000000000000000000000600082015250565b6000611c08600b83611409565b9150611c1382611bd2565b602082019050919050565b60006020820190508181036000830152611c3781611bfb565b9050919050565b60008190508160005260206000209050919050565b60006020601f8301049050919050565b600082821b905092915050565b600060088302611ca07fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff82611c63565b611caa8683611c63565b95508019841693508086168417925050509392505050565b6000819050919050565b6000611ce7611ce2611cdd8461150e565b611cc2565b61150e565b9050919050565b6000819050919050565b611d0183611ccc565b611d15611d0d82611cee565b848454611c70565b825550505050565b600090565b611d2a611d1d565b611d35818484611cf8565b505050565b5b81811015611d5957611d4e600082611d22565b600181019050611d3b565b5050565b601f821115611d9e57611d6f81611c3e565b611d7884611c53565b81016020851015611d87578190505b611d9b611d9385611c53565b830182611d3a565b50505b505050565b600082821c905092915050565b6000611dc160001984600802611da3565b1980831691505092915050565b6000611dda8383611db0565b9150826002028217905092915050565b611df3826113fe565b67ffffffffffffffff811115611e0c57611e0b61158e565b5b611e168254611ba1565b611e21828285611d5d565b600060209050601f831160018114611e545760008415611e42578287015190505b611e4c8582611dce565b865550611eb4565b601f198416611e6286611c3e565b60005b82811015611e8a57848901518255600182019150602085019450602081019050611e65565b86831015611ea75784890151611ea3601f891682611db0565b8355505b6001600288020188555050505b505050505050565b611ec5816114d0565b82525050565b600082825260208201905092915050565b7f3078300000000000000000000000000000000000000000000000000000000000600082015250565b6000611f12600383611ecb565b9150611f1d82611edc565b602082019050919050565b600060a082019050611f3d6000830187611ebc565b611f4a6020830186611ebc565b611f576040830185611758565b611f646060830184611758565b8181036080830152611f7581611f05565b905095945050505050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b6000611fba8261150e565b9150611fc58361150e565b9250828202611fd38161150e565b91508282048414831517611fea57611fe9611f80565b5b5092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b600061202b8261150e565b91506120368361150e565b92508261204657612045611ff1565b5b828204905092915050565b7f44455857313135353a203020616d6f756e740000000000000000000000000000600082015250565b6000612087601283611409565b915061209282612051565b602082019050919050565b600060208201905081810360008301526120b68161207a565b9050919050565b60006040820190506120d26000830185611ebc565b6120df6020830184611758565b9392505050565b6000815190506120f581611518565b92915050565b60006020828403121561211157612110611339565b5b600061211f848285016120e6565b91505092915050565b60006121338261150e565b915061213e8361150e565b925082820390508181111561215657612155611f80565b5b92915050565b60006060820190506121716000830186611ebc565b61217e6020830185611758565b61218b6040830184611758565b949350505050565b60006020820190506121a86000830184611ebc565b92915050565b60006121b98261150e565b91506121c48361150e565b92508282019050808211156121dc576121db611f80565b5b9291505056fea26469706673582212207a4c0412c0efce6cb6983de35b7f9ea7a3d4613091d1a9617cfbb188270f6e3a64736f6c63430008180033a2646970667358221220e7176ab18d5aae98072c5a5dc6359508b9c36cc1cf40a292a2b1a2d1a36267e164736f6c63430008180033",
}

// Wrapper1155FactoryABI is the input ABI used to generate the binding from.
// Deprecated: Use Wrapper1155FactoryMetaData.ABI instead.
var Wrapper1155FactoryABI = Wrapper1155FactoryMetaData.ABI

// Wrapper1155FactoryBin is the compiled bytecode used for deploying new contracts.
// Deprecated: Use Wrapper1155FactoryMetaData.Bin instead.
var Wrapper1155FactoryBin = Wrapper1155FactoryMetaData.Bin

// DeployWrapper1155Factory deploys a new Ethereum contract, binding an instance of Wrapper1155Factory to it.
func DeployWrapper1155Factory(auth *bind.TransactOpts, backend bind.ContractBackend) (common.Address, *types.Transaction, *Wrapper1155Factory, error) {
	parsed, err := Wrapper1155FactoryMetaData.GetAbi()
	if err != nil {
		return common.Address{}, nil, nil, err
	}
	if parsed == nil {
		return common.Address{}, nil, nil, errors.New("GetABI returned nil")
	}

	address, tx, contract, err := bind.DeployContract(auth, *parsed, common.FromHex(Wrapper1155FactoryBin), backend)
	if err != nil {
		return common.Address{}, nil, nil, err
	}
	return address, tx, &Wrapper1155Factory{Wrapper1155FactoryCaller: Wrapper1155FactoryCaller{contract: contract}, Wrapper1155FactoryTransactor: Wrapper1155FactoryTransactor{contract: contract}, Wrapper1155FactoryFilterer: Wrapper1155FactoryFilterer{contract: contract}}, nil
}

// Wrapper1155Factory is an auto generated Go binding around an Ethereum contract.
type Wrapper1155Factory struct {
	Wrapper1155FactoryCaller     // Read-only binding to the contract
	Wrapper1155FactoryTransactor // Write-only binding to the contract
	Wrapper1155FactoryFilterer   // Log filterer for contract events
}

// Wrapper1155FactoryCaller is an auto generated read-only Go binding around an Ethereum contract.
type Wrapper1155FactoryCaller struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// Wrapper1155FactoryTransactor is an auto generated write-only Go binding around an Ethereum contract.
type Wrapper1155FactoryTransactor struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// Wrapper1155FactoryFilterer is an auto generated log filtering Go binding around an Ethereum contract events.
type Wrapper1155FactoryFilterer struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// Wrapper1155FactorySession is an auto generated Go binding around an Ethereum contract,
// with pre-set call and transact options.
type Wrapper1155FactorySession struct {
	Contract     *Wrapper1155Factory // Generic contract binding to set the session for
	CallOpts     bind.CallOpts       // Call options to use throughout this session
	TransactOpts bind.TransactOpts   // Transaction auth options to use throughout this session
}

// Wrapper1155FactoryCallerSession is an auto generated read-only Go binding around an Ethereum contract,
// with pre-set call options.
type Wrapper1155FactoryCallerSession struct {
	Contract *Wrapper1155FactoryCaller // Generic contract caller binding to set the session for
	CallOpts bind.CallOpts             // Call options to use throughout this session
}

// Wrapper1155FactoryTransactorSession is an auto generated write-only Go binding around an Ethereum contract,
// with pre-set transact options.
type Wrapper1155FactoryTransactorSession struct {
	Contract     *Wrapper1155FactoryTransactor // Generic contract transactor binding to set the session for
	TransactOpts bind.TransactOpts             // Transaction auth options to use throughout this session
}

// Wrapper1155FactoryRaw is an auto generated low-level Go binding around an Ethereum contract.
type Wrapper1155FactoryRaw struct {
	Contract *Wrapper1155Factory // Generic contract binding to access the raw methods on
}

// Wrapper1155FactoryCallerRaw is an auto generated low-level read-only Go binding around an Ethereum contract.
type Wrapper1155FactoryCallerRaw struct {
	Contract *Wrapper1155FactoryCaller // Generic read-only contract binding to access the raw methods on
}

// Wrapper1155FactoryTransactorRaw is an auto generated low-level write-only Go binding around an Ethereum contract.
type Wrapper1155FactoryTransactorRaw struct {
	Contract *Wrapper1155FactoryTransactor // Generic write-only contract binding to access the raw methods on
}

// NewWrapper1155Factory creates a new instance of Wrapper1155Factory, bound to a specific deployed contract.
func NewWrapper1155Factory(address common.Address, backend bind.ContractBackend) (*Wrapper1155Factory, error) {
	contract, err := bindWrapper1155Factory(address, backend, backend, backend)
	if err != nil {
		return nil, err
	}
	return &Wrapper1155Factory{Wrapper1155FactoryCaller: Wrapper1155FactoryCaller{contract: contract}, Wrapper1155FactoryTransactor: Wrapper1155FactoryTransactor{contract: contract}, Wrapper1155FactoryFilterer: Wrapper1155FactoryFilterer{contract: contract}}, nil
}

// NewWrapper1155FactoryCaller creates a new read-only instance of Wrapper1155Factory, bound to a specific deployed contract.
func NewWrapper1155FactoryCaller(address common.Address, caller bind.ContractCaller) (*Wrapper1155FactoryCaller, error) {
	contract, err := bindWrapper1155Factory(address, caller, nil, nil)
	if err != nil {
		return nil, err
	}
	return &Wrapper1155FactoryCaller{contract: contract}, nil
}

// NewWrapper1155FactoryTransactor creates a new write-only instance of Wrapper1155Factory, bound to a specific deployed contract.
func NewWrapper1155FactoryTransactor(address common.Address, transactor bind.ContractTransactor) (*Wrapper1155FactoryTransactor, error) {
	contract, err := bindWrapper1155Factory(address, nil, transactor, nil)
	if err != nil {
		return nil, err
	}
	return &Wrapper1155FactoryTransactor{contract: contract}, nil
}

// NewWrapper1155FactoryFilterer creates a new log filterer instance of Wrapper1155Factory, bound to a specific deployed contract.
func NewWrapper1155FactoryFilterer(address common.Address, filterer bind.ContractFilterer) (*Wrapper1155FactoryFilterer, error) {
	contract, err := bindWrapper1155Factory(address, nil, nil, filterer)
	if err != nil {
		return nil, err
	}
	return &Wrapper1155FactoryFilterer{contract: contract}, nil
}

// bindWrapper1155Factory binds a generic wrapper to an already deployed contract.
func bindWrapper1155Factory(address common.Address, caller bind.ContractCaller, transactor bind.ContractTransactor, filterer bind.ContractFilterer) (*bind.BoundContract, error) {
	parsed, err := Wrapper1155FactoryMetaData.GetAbi()
	if err != nil {
		return nil, err
	}
	return bind.NewBoundContract(address, *parsed, caller, transactor, filterer), nil
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_Wrapper1155Factory *Wrapper1155FactoryRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _Wrapper1155Factory.Contract.Wrapper1155FactoryCaller.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_Wrapper1155Factory *Wrapper1155FactoryRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _Wrapper1155Factory.Contract.Wrapper1155FactoryTransactor.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_Wrapper1155Factory *Wrapper1155FactoryRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _Wrapper1155Factory.Contract.Wrapper1155FactoryTransactor.contract.Transact(opts, method, params...)
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_Wrapper1155Factory *Wrapper1155FactoryCallerRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _Wrapper1155Factory.Contract.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_Wrapper1155Factory *Wrapper1155FactoryTransactorRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _Wrapper1155Factory.Contract.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_Wrapper1155Factory *Wrapper1155FactoryTransactorRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _Wrapper1155Factory.Contract.contract.Transact(opts, method, params...)
}

// Get1155TokenID is a free data retrieval call binding the contract method 0x711c7ab9.
//
// Solidity: function get1155TokenID(address token) view returns(address _contract, uint256 tokenid)
func (_Wrapper1155Factory *Wrapper1155FactoryCaller) Get1155TokenID(opts *bind.CallOpts, token common.Address) (struct {
	Contract common.Address
	Tokenid  *big.Int
}, error) {
	var out []interface{}
	err := _Wrapper1155Factory.contract.Call(opts, &out, "get1155TokenID", token)

	outstruct := new(struct {
		Contract common.Address
		Tokenid  *big.Int
	})
	if err != nil {
		return *outstruct, err
	}

	outstruct.Contract = *abi.ConvertType(out[0], new(common.Address)).(*common.Address)
	outstruct.Tokenid = *abi.ConvertType(out[1], new(*big.Int)).(**big.Int)

	return *outstruct, err

}

// Get1155TokenID is a free data retrieval call binding the contract method 0x711c7ab9.
//
// Solidity: function get1155TokenID(address token) view returns(address _contract, uint256 tokenid)
func (_Wrapper1155Factory *Wrapper1155FactorySession) Get1155TokenID(token common.Address) (struct {
	Contract common.Address
	Tokenid  *big.Int
}, error) {
	return _Wrapper1155Factory.Contract.Get1155TokenID(&_Wrapper1155Factory.CallOpts, token)
}

// Get1155TokenID is a free data retrieval call binding the contract method 0x711c7ab9.
//
// Solidity: function get1155TokenID(address token) view returns(address _contract, uint256 tokenid)
func (_Wrapper1155Factory *Wrapper1155FactoryCallerSession) Get1155TokenID(token common.Address) (struct {
	Contract common.Address
	Tokenid  *big.Int
}, error) {
	return _Wrapper1155Factory.Contract.Get1155TokenID(&_Wrapper1155Factory.CallOpts, token)
}

// Get1155Wrapper is a free data retrieval call binding the contract method 0xe8851059.
//
// Solidity: function get1155Wrapper(address _contract, uint256 tokenid) view returns(address token)
func (_Wrapper1155Factory *Wrapper1155FactoryCaller) Get1155Wrapper(opts *bind.CallOpts, _contract common.Address, tokenid *big.Int) (common.Address, error) {
	var out []interface{}
	err := _Wrapper1155Factory.contract.Call(opts, &out, "get1155Wrapper", _contract, tokenid)

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// Get1155Wrapper is a free data retrieval call binding the contract method 0xe8851059.
//
// Solidity: function get1155Wrapper(address _contract, uint256 tokenid) view returns(address token)
func (_Wrapper1155Factory *Wrapper1155FactorySession) Get1155Wrapper(_contract common.Address, tokenid *big.Int) (common.Address, error) {
	return _Wrapper1155Factory.Contract.Get1155Wrapper(&_Wrapper1155Factory.CallOpts, _contract, tokenid)
}

// Get1155Wrapper is a free data retrieval call binding the contract method 0xe8851059.
//
// Solidity: function get1155Wrapper(address _contract, uint256 tokenid) view returns(address token)
func (_Wrapper1155Factory *Wrapper1155FactoryCallerSession) Get1155Wrapper(_contract common.Address, tokenid *big.Int) (common.Address, error) {
	return _Wrapper1155Factory.Contract.Get1155Wrapper(&_Wrapper1155Factory.CallOpts, _contract, tokenid)
}

// Create20 is a paid mutator transaction binding the contract method 0x611793e4.
//
// Solidity: function create20(address _contract, uint256 tokenId) returns(address token)
func (_Wrapper1155Factory *Wrapper1155FactoryTransactor) Create20(opts *bind.TransactOpts, _contract common.Address, tokenId *big.Int) (*types.Transaction, error) {
	return _Wrapper1155Factory.contract.Transact(opts, "create20", _contract, tokenId)
}

// Create20 is a paid mutator transaction binding the contract method 0x611793e4.
//
// Solidity: function create20(address _contract, uint256 tokenId) returns(address token)
func (_Wrapper1155Factory *Wrapper1155FactorySession) Create20(_contract common.Address, tokenId *big.Int) (*types.Transaction, error) {
	return _Wrapper1155Factory.Contract.Create20(&_Wrapper1155Factory.TransactOpts, _contract, tokenId)
}

// Create20 is a paid mutator transaction binding the contract method 0x611793e4.
//
// Solidity: function create20(address _contract, uint256 tokenId) returns(address token)
func (_Wrapper1155Factory *Wrapper1155FactoryTransactorSession) Create20(_contract common.Address, tokenId *big.Int) (*types.Transaction, error) {
	return _Wrapper1155Factory.Contract.Create20(&_Wrapper1155Factory.TransactOpts, _contract, tokenId)
}

func CreateWrapper1155FactoryDeploymentCommand() *cobra.Command {
	var keyfile, nonce, password, value, gasPrice, maxFeePerGas, maxPriorityFeePerGas, rpc string
	var gasLimit uint64
	var simulate bool
	var timeout uint

	cmd := &cobra.Command{
		Use:   "deploy",
		Short: "Deploy a new Wrapper1155Factory contract",
		PreRunE: func(cmd *cobra.Command, args []string) error {
			if keyfile == "" {
				return fmt.Errorf("--keystore not specified (this should be a path to an Ethereum account keystore file)")
			}

			return nil
		},
		RunE: func(cmd *cobra.Command, args []string) error {
			client, clientErr := NewClient(rpc)
			if clientErr != nil {
				return clientErr
			}

			key, keyErr := KeyFromFile(keyfile, password)
			if keyErr != nil {
				return keyErr
			}

			chainIDCtx, cancelChainIDCtx := NewChainContext(timeout)
			defer cancelChainIDCtx()
			chainID, chainIDErr := client.ChainID(chainIDCtx)
			if chainIDErr != nil {
				return chainIDErr
			}

			transactionOpts, transactionOptsErr := bind.NewKeyedTransactorWithChainID(key.PrivateKey, chainID)
			if transactionOptsErr != nil {
				return transactionOptsErr
			}

			SetTransactionParametersFromArgs(transactionOpts, nonce, value, gasPrice, maxFeePerGas, maxPriorityFeePerGas, gasLimit, simulate)

			address, deploymentTransaction, _, deploymentErr := DeployWrapper1155Factory(
				transactionOpts,
				client,
			)
			if deploymentErr != nil {
				return deploymentErr
			}

			cmd.Printf("Transaction hash: %s\nContract address: %s\n", deploymentTransaction.Hash().Hex(), address.Hex())
			if transactionOpts.NoSend {
				estimationMessage := ethereum.CallMsg{
					From: transactionOpts.From,
					Data: deploymentTransaction.Data(),
				}

				gasEstimationCtx, cancelGasEstimationCtx := NewChainContext(timeout)
				defer cancelGasEstimationCtx()

				gasEstimate, gasEstimateErr := client.EstimateGas(gasEstimationCtx, estimationMessage)
				if gasEstimateErr != nil {
					return gasEstimateErr
				}

				transactionBinary, transactionBinaryErr := deploymentTransaction.MarshalBinary()
				if transactionBinaryErr != nil {
					return transactionBinaryErr
				}
				transactionBinaryHex := hex.EncodeToString(transactionBinary)

				cmd.Printf("Transaction: %s\nEstimated gas: %d\n", transactionBinaryHex, gasEstimate)
			} else {
				cmd.Println("Transaction submitted")
			}

			return nil
		},
	}

	cmd.Flags().StringVar(&rpc, "rpc", "", "URL of the JSONRPC API to use")
	cmd.Flags().StringVar(&keyfile, "keyfile", "", "Path to the keystore file to use for the transaction")
	cmd.Flags().StringVar(&password, "password", "", "Password to use to unlock the keystore (if not specified, you will be prompted for the password when the command executes)")
	cmd.Flags().StringVar(&nonce, "nonce", "", "Nonce to use for the transaction")
	cmd.Flags().StringVar(&value, "value", "", "Value to send with the transaction")
	cmd.Flags().StringVar(&gasPrice, "gas-price", "", "Gas price to use for the transaction")
	cmd.Flags().StringVar(&maxFeePerGas, "max-fee-per-gas", "", "Maximum fee per gas to use for the (EIP-1559) transaction")
	cmd.Flags().StringVar(&maxPriorityFeePerGas, "max-priority-fee-per-gas", "", "Maximum priority fee per gas to use for the (EIP-1559) transaction")
	cmd.Flags().Uint64Var(&gasLimit, "gas-limit", 0, "Gas limit for the transaction")
	cmd.Flags().BoolVar(&simulate, "simulate", false, "Simulate the transaction without sending it")
	cmd.Flags().UintVar(&timeout, "timeout", 60, "Timeout (in seconds) for interactions with the JSONRPC API")

	return cmd
}

func CreateGet1155WrapperCommand() *cobra.Command {
	var contractAddressRaw, rpc string
	var contractAddress common.Address
	var timeout uint

	var blockNumberRaw, fromAddressRaw string
	var pending bool

	var _contract0 common.Address
	var _contract0Raw string
	var tokenid *big.Int
	var tokenidRaw string

	var capture0 common.Address

	cmd := &cobra.Command{
		Use:   "get-1155-wrapper",
		Short: "Call the Get1155Wrapper view method on a Wrapper1155Factory contract",
		PreRunE: func(cmd *cobra.Command, args []string) error {
			if contractAddressRaw == "" {
				return fmt.Errorf("--contract not specified")
			} else if !common.IsHexAddress(contractAddressRaw) {
				return fmt.Errorf("--contract is not a valid Ethereum address")
			}
			contractAddress = common.HexToAddress(contractAddressRaw)

			if _contract0Raw == "" {
				return fmt.Errorf("---contract-0 argument not specified")
			} else if !common.IsHexAddress(_contract0Raw) {
				return fmt.Errorf("---contract-0 argument is not a valid Ethereum address")
			}
			_contract0 = common.HexToAddress(_contract0Raw)

			if tokenidRaw == "" {
				return fmt.Errorf("--tokenid argument not specified")
			}
			tokenid = new(big.Int)
			tokenid.SetString(tokenidRaw, 0)

			return nil
		},
		RunE: func(cmd *cobra.Command, args []string) error {
			client, clientErr := NewClient(rpc)
			if clientErr != nil {
				return clientErr
			}

			contract, contractErr := NewWrapper1155Factory(contractAddress, client)
			if contractErr != nil {
				return contractErr
			}

			callOpts := bind.CallOpts{}
			SetCallParametersFromArgs(&callOpts, pending, fromAddressRaw, blockNumberRaw)

			session := Wrapper1155FactoryCallerSession{
				Contract: &contract.Wrapper1155FactoryCaller,
				CallOpts: callOpts,
			}

			var callErr error
			capture0, callErr = session.Get1155Wrapper(
				_contract0,
				tokenid,
			)
			if callErr != nil {
				return callErr
			}

			cmd.Printf("0: %s\n", capture0.Hex())

			return nil
		},
	}

	cmd.Flags().StringVar(&rpc, "rpc", "", "URL of the JSONRPC API to use")
	cmd.Flags().StringVar(&blockNumberRaw, "block", "", "Block number at which to call the view method")
	cmd.Flags().BoolVar(&pending, "pending", false, "Set this flag if it's ok to call the view method against pending state")
	cmd.Flags().UintVar(&timeout, "timeout", 60, "Timeout (in seconds) for interactions with the JSONRPC API")
	cmd.Flags().StringVar(&contractAddressRaw, "contract", "", "Address of the contract to interact with")
	cmd.Flags().StringVar(&fromAddressRaw, "from", "", "Optional address for caller of the view method")

	cmd.Flags().StringVar(&_contract0Raw, "-contract-0", "", "-contract-0 argument")
	cmd.Flags().StringVar(&tokenidRaw, "tokenid", "", "tokenid argument")

	return cmd
}
func CreateGet1155TokenIdCommand() *cobra.Command {
	var contractAddressRaw, rpc string
	var contractAddress common.Address
	var timeout uint

	var blockNumberRaw, fromAddressRaw string
	var pending bool

	var token common.Address
	var tokenRaw string

	var capture0 struct {
		Contract common.Address
		Tokenid  *big.Int
	}

	cmd := &cobra.Command{
		Use:   "get-1155-token-id",
		Short: "Call the Get1155TokenID view method on a Wrapper1155Factory contract",
		PreRunE: func(cmd *cobra.Command, args []string) error {
			if contractAddressRaw == "" {
				return fmt.Errorf("--contract not specified")
			} else if !common.IsHexAddress(contractAddressRaw) {
				return fmt.Errorf("--contract is not a valid Ethereum address")
			}
			contractAddress = common.HexToAddress(contractAddressRaw)

			if tokenRaw == "" {
				return fmt.Errorf("--token argument not specified")
			} else if !common.IsHexAddress(tokenRaw) {
				return fmt.Errorf("--token argument is not a valid Ethereum address")
			}
			token = common.HexToAddress(tokenRaw)

			return nil
		},
		RunE: func(cmd *cobra.Command, args []string) error {
			client, clientErr := NewClient(rpc)
			if clientErr != nil {
				return clientErr
			}

			contract, contractErr := NewWrapper1155Factory(contractAddress, client)
			if contractErr != nil {
				return contractErr
			}

			callOpts := bind.CallOpts{}
			SetCallParametersFromArgs(&callOpts, pending, fromAddressRaw, blockNumberRaw)

			session := Wrapper1155FactoryCallerSession{
				Contract: &contract.Wrapper1155FactoryCaller,
				CallOpts: callOpts,
			}

			var callErr error
			capture0, callErr = session.Get1155TokenID(
				token,
			)
			if callErr != nil {
				return callErr
			}

			cmd.Printf("0: %v\n", capture0)

			return nil
		},
	}

	cmd.Flags().StringVar(&rpc, "rpc", "", "URL of the JSONRPC API to use")
	cmd.Flags().StringVar(&blockNumberRaw, "block", "", "Block number at which to call the view method")
	cmd.Flags().BoolVar(&pending, "pending", false, "Set this flag if it's ok to call the view method against pending state")
	cmd.Flags().UintVar(&timeout, "timeout", 60, "Timeout (in seconds) for interactions with the JSONRPC API")
	cmd.Flags().StringVar(&contractAddressRaw, "contract", "", "Address of the contract to interact with")
	cmd.Flags().StringVar(&fromAddressRaw, "from", "", "Optional address for caller of the view method")

	cmd.Flags().StringVar(&tokenRaw, "token", "", "token argument")

	return cmd
}

func CreateCreate20Command() *cobra.Command {
	var keyfile, nonce, password, value, gasPrice, maxFeePerGas, maxPriorityFeePerGas, rpc, contractAddressRaw string
	var gasLimit uint64
	var simulate bool
	var timeout uint
	var contractAddress common.Address

	var _contract0 common.Address
	var _contract0Raw string
	var tokenId *big.Int
	var tokenIdRaw string

	cmd := &cobra.Command{
		Use:   "create-20",
		Short: "Execute the Create20 method on a Wrapper1155Factory contract",
		PreRunE: func(cmd *cobra.Command, args []string) error {
			if keyfile == "" {
				return fmt.Errorf("--keystore not specified")
			}

			if contractAddressRaw == "" {
				return fmt.Errorf("--contract not specified")
			} else if !common.IsHexAddress(contractAddressRaw) {
				return fmt.Errorf("--contract is not a valid Ethereum address")
			}
			contractAddress = common.HexToAddress(contractAddressRaw)

			if _contract0Raw == "" {
				return fmt.Errorf("---contract-0 argument not specified")
			} else if !common.IsHexAddress(_contract0Raw) {
				return fmt.Errorf("---contract-0 argument is not a valid Ethereum address")
			}
			_contract0 = common.HexToAddress(_contract0Raw)

			if tokenIdRaw == "" {
				return fmt.Errorf("--token-id argument not specified")
			}
			tokenId = new(big.Int)
			tokenId.SetString(tokenIdRaw, 0)

			return nil
		},
		RunE: func(cmd *cobra.Command, args []string) error {
			client, clientErr := NewClient(rpc)
			if clientErr != nil {
				return clientErr
			}

			key, keyErr := KeyFromFile(keyfile, password)
			if keyErr != nil {
				return keyErr
			}

			chainIDCtx, cancelChainIDCtx := NewChainContext(timeout)
			defer cancelChainIDCtx()
			chainID, chainIDErr := client.ChainID(chainIDCtx)
			if chainIDErr != nil {
				return chainIDErr
			}

			transactionOpts, transactionOptsErr := bind.NewKeyedTransactorWithChainID(key.PrivateKey, chainID)
			if transactionOptsErr != nil {
				return transactionOptsErr
			}

			SetTransactionParametersFromArgs(transactionOpts, nonce, value, gasPrice, maxFeePerGas, maxPriorityFeePerGas, gasLimit, simulate)

			contract, contractErr := NewWrapper1155Factory(contractAddress, client)
			if contractErr != nil {
				return contractErr
			}

			session := Wrapper1155FactoryTransactorSession{
				Contract:     &contract.Wrapper1155FactoryTransactor,
				TransactOpts: *transactionOpts,
			}

			transaction, transactionErr := session.Create20(
				_contract0,
				tokenId,
			)
			if transactionErr != nil {
				return transactionErr
			}

			cmd.Printf("Transaction hash: %s\n", transaction.Hash().Hex())
			if transactionOpts.NoSend {
				estimationMessage := ethereum.CallMsg{
					From: transactionOpts.From,
					To:   &contractAddress,
					Data: transaction.Data(),
				}

				gasEstimationCtx, cancelGasEstimationCtx := NewChainContext(timeout)
				defer cancelGasEstimationCtx()

				gasEstimate, gasEstimateErr := client.EstimateGas(gasEstimationCtx, estimationMessage)
				if gasEstimateErr != nil {
					return gasEstimateErr
				}

				transactionBinary, transactionBinaryErr := transaction.MarshalBinary()
				if transactionBinaryErr != nil {
					return transactionBinaryErr
				}
				transactionBinaryHex := hex.EncodeToString(transactionBinary)

				cmd.Printf("Transaction: %s\nEstimated gas: %d\n", transactionBinaryHex, gasEstimate)
			} else {
				cmd.Println("Transaction submitted")
			}

			return nil
		},
	}

	cmd.Flags().StringVar(&rpc, "rpc", "", "URL of the JSONRPC API to use")
	cmd.Flags().StringVar(&keyfile, "keyfile", "", "Path to the keystore file to use for the transaction")
	cmd.Flags().StringVar(&password, "password", "", "Password to use to unlock the keystore (if not specified, you will be prompted for the password when the command executes)")
	cmd.Flags().StringVar(&nonce, "nonce", "", "Nonce to use for the transaction")
	cmd.Flags().StringVar(&value, "value", "", "Value to send with the transaction")
	cmd.Flags().StringVar(&gasPrice, "gas-price", "", "Gas price to use for the transaction")
	cmd.Flags().StringVar(&maxFeePerGas, "max-fee-per-gas", "", "Maximum fee per gas to use for the (EIP-1559) transaction")
	cmd.Flags().StringVar(&maxPriorityFeePerGas, "max-priority-fee-per-gas", "", "Maximum priority fee per gas to use for the (EIP-1559) transaction")
	cmd.Flags().Uint64Var(&gasLimit, "gas-limit", 0, "Gas limit for the transaction")
	cmd.Flags().BoolVar(&simulate, "simulate", false, "Simulate the transaction without sending it")
	cmd.Flags().UintVar(&timeout, "timeout", 60, "Timeout (in seconds) for interactions with the JSONRPC API")
	cmd.Flags().StringVar(&contractAddressRaw, "contract", "", "Address of the contract to interact with")

	cmd.Flags().StringVar(&_contract0Raw, "-contract-0", "", "-contract-0 argument")
	cmd.Flags().StringVar(&tokenIdRaw, "token-id", "", "token-id argument")

	return cmd
}

var ErrNoRPCURL error = errors.New("no RPC URL provided -- please pass an RPC URL from the command line or set the WRAPPER_1155_FACTORY_RPC_URL environment variable")

// Generates an Ethereum client to the JSONRPC API at the given URL. If rpcURL is empty, then it
// attempts to read the RPC URL from the WRAPPER_1155_FACTORY_RPC_URL environment variable. If that is empty,
// too, then it returns an error.
func NewClient(rpcURL string) (*ethclient.Client, error) {
	if rpcURL == "" {
		rpcURL = os.Getenv("WRAPPER_1155_FACTORY_RPC_URL")
	}

	if rpcURL == "" {
		return nil, ErrNoRPCURL
	}

	client, err := ethclient.Dial(rpcURL)
	return client, err
}

// Creates a new context to be used when interacting with the chain client.
func NewChainContext(timeout uint) (context.Context, context.CancelFunc) {
	baseCtx := context.Background()
	parsedTimeout := time.Duration(timeout) * time.Second
	ctx, cancel := context.WithTimeout(baseCtx, parsedTimeout)
	return ctx, cancel
}

// Unlocks a key from a keystore (byte contents of a keystore file) with the given password.
func UnlockKeystore(keystoreData []byte, password string) (*keystore.Key, error) {
	key, err := keystore.DecryptKey(keystoreData, password)
	return key, err
}

// Loads a key from file, prompting the user for the password if it is not provided as a function argument.
func KeyFromFile(keystoreFile string, password string) (*keystore.Key, error) {
	var emptyKey *keystore.Key
	keystoreContent, readErr := os.ReadFile(keystoreFile)
	if readErr != nil {
		return emptyKey, readErr
	}

	// If password is "", prompt user for password.
	if password == "" {
		fmt.Printf("Please provide a password for keystore (%s): ", keystoreFile)
		passwordRaw, inputErr := term.ReadPassword(int(os.Stdin.Fd()))
		if inputErr != nil {
			return emptyKey, fmt.Errorf("error reading password: %s", inputErr.Error())
		}
		fmt.Print("\n")
		password = string(passwordRaw)
	}

	key, err := UnlockKeystore(keystoreContent, password)
	return key, err
}

// This method is used to set the parameters on a view call from command line arguments (represented mostly as
// strings).
func SetCallParametersFromArgs(opts *bind.CallOpts, pending bool, fromAddress, blockNumber string) {
	if pending {
		opts.Pending = true
	}

	if fromAddress != "" {
		opts.From = common.HexToAddress(fromAddress)
	}

	if blockNumber != "" {
		opts.BlockNumber = new(big.Int)
		opts.BlockNumber.SetString(blockNumber, 0)
	}
}

// This method is used to set the parameters on a transaction from command line arguments (represented mostly as
// strings).
func SetTransactionParametersFromArgs(opts *bind.TransactOpts, nonce, value, gasPrice, maxFeePerGas, maxPriorityFeePerGas string, gasLimit uint64, noSend bool) {
	if nonce != "" {
		opts.Nonce = new(big.Int)
		opts.Nonce.SetString(nonce, 0)
	}

	if value != "" {
		opts.Value = new(big.Int)
		opts.Value.SetString(value, 0)
	}

	if gasPrice != "" {
		opts.GasPrice = new(big.Int)
		opts.GasPrice.SetString(gasPrice, 0)
	}

	if maxFeePerGas != "" {
		opts.GasFeeCap = new(big.Int)
		opts.GasFeeCap.SetString(maxFeePerGas, 0)
	}

	if maxPriorityFeePerGas != "" {
		opts.GasTipCap = new(big.Int)
		opts.GasTipCap.SetString(maxPriorityFeePerGas, 0)
	}

	if gasLimit != 0 {
		opts.GasLimit = gasLimit
	}

	opts.NoSend = noSend
}

func CreateWrapper1155FactoryCommand() *cobra.Command {
	cmd := &cobra.Command{
		Use:   "wrapper-1155-factory",
		Short: "Interact with the Wrapper1155Factory contract",
		Run: func(cmd *cobra.Command, args []string) {
			cmd.Help()
		},
	}

	cmd.SetOut(os.Stdout)

	DeployGroup := &cobra.Group{
		ID: "deploy", Title: "Commands which deploy contracts",
	}
	cmd.AddGroup(DeployGroup)
	ViewGroup := &cobra.Group{
		ID: "view", Title: "Commands which view contract state",
	}
	TransactGroup := &cobra.Group{
		ID: "transact", Title: "Commands which submit transactions",
	}
	cmd.AddGroup(ViewGroup, TransactGroup)

	cmdDeployWrapper1155Factory := CreateWrapper1155FactoryDeploymentCommand()
	cmdDeployWrapper1155Factory.GroupID = DeployGroup.ID
	cmd.AddCommand(cmdDeployWrapper1155Factory)

	cmdViewGet1155Wrapper := CreateGet1155WrapperCommand()
	cmdViewGet1155Wrapper.GroupID = ViewGroup.ID
	cmd.AddCommand(cmdViewGet1155Wrapper)
	cmdViewGet1155TokenID := CreateGet1155TokenIdCommand()
	cmdViewGet1155TokenID.GroupID = ViewGroup.ID
	cmd.AddCommand(cmdViewGet1155TokenID)

	cmdTransactCreate20 := CreateCreate20Command()
	cmdTransactCreate20.GroupID = TransactGroup.ID
	cmd.AddCommand(cmdTransactCreate20)

	return cmd
}
