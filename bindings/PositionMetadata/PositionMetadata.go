// This file was generated by seer: https://github.com/moonstream-to/seer.
// seer version: 0.1.15
// seer command: seer evm generate --package PositionMetadata --cli --struct PositionMetadata --output bindings/PositionMetadata/PositionMetadata.go
// Code generated - DO NOT EDIT.
// This file is a generated binding and any manual changes will be lost.

package PositionMetadata

import (
	"errors"
	"math/big"
	"strings"

	"context"

	ethereum "github.com/ethereum/go-ethereum"
	"github.com/ethereum/go-ethereum/accounts/abi"
	"github.com/ethereum/go-ethereum/accounts/abi/bind"
	"github.com/ethereum/go-ethereum/common"
	"github.com/ethereum/go-ethereum/core/types"
	"github.com/ethereum/go-ethereum/event"

	// Reference imports to suppress errors if they are not otherwise used.
	"encoding/hex"
	"encoding/json"
	"fmt"
	"os"
	"time"

	"github.com/ethereum/go-ethereum/accounts/keystore"
	"github.com/ethereum/go-ethereum/ethclient"
	"github.com/spf13/cobra"
	"golang.org/x/term"
)

var (
	_ = errors.New
	_ = big.NewInt
	_ = strings.NewReader
	_ = ethereum.NotFound
	_ = bind.Bind
	_ = common.Big1
	_ = types.BloomLookup
	_ = event.NewSubscription
	_ = abi.ConvertType
)

// Position is an auto generated low-level Go binding around an user-defined struct.
type Position struct {
	PoolID             *big.Int
	AmountOrTokenID    *big.Int
	StakeTimestamp     *big.Int
	UnstakeInitiatedAt *big.Int
}

// StakingPool is an auto generated low-level Go binding around an user-defined struct.
type StakingPool struct {
	Administrator   common.Address
	TokenType       *big.Int
	TokenAddress    common.Address
	TokenID         *big.Int
	Transferable    bool
	LockupSeconds   *big.Int
	CooldownSeconds *big.Int
}

// PositionMetadataMetaData contains all meta data concerning the PositionMetadata contract.
var PositionMetadataMetaData = &bind.MetaData{
	ABI: "[{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"length\",\"type\":\"uint256\"}],\"name\":\"StringsInsufficientHexLength\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"generateLogo\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"yPos\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"titleYPos\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"stakeTimestampStr\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"unlockTimestampStr\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"cooldownStr\",\"type\":\"string\"}],\"name\":\"generateStakingPeriodElements\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"tokenIdOrAmountString\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"amountOrTokenIDString\",\"type\":\"string\"}],\"name\":\"generateTokenIdOrAmountElement\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"tokenSymbolString\",\"type\":\"string\"}],\"name\":\"generateTokenSymbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"tokenTypeString\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"tokenAddressString\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"amountOrTokenIdString\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"poolIdString\",\"type\":\"string\"}],\"name\":\"generateTokenTypeElement\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"tokenAddress\",\"type\":\"address\"}],\"name\":\"getAddressSlice\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"positionTokenID\",\"type\":\"uint256\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"poolID\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amountOrTokenID\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"stakeTimestamp\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"unstakeInitiatedAt\",\"type\":\"uint256\"}],\"internalType\":\"structPosition\",\"name\":\"position\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"administrator\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenType\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"tokenAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenID\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"transferable\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"lockupSeconds\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"cooldownSeconds\",\"type\":\"uint256\"}],\"internalType\":\"structStakingPool\",\"name\":\"pool\",\"type\":\"tuple\"}],\"name\":\"metadata\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"positionTokenID\",\"type\":\"uint256\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"poolID\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amountOrTokenID\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"stakeTimestamp\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"unstakeInitiatedAt\",\"type\":\"uint256\"}],\"internalType\":\"structPosition\",\"name\":\"position\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"administrator\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenType\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"tokenAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenID\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"transferable\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"lockupSeconds\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"cooldownSeconds\",\"type\":\"uint256\"}],\"internalType\":\"structStakingPool\",\"name\":\"pool\",\"type\":\"tuple\"}],\"name\":\"metadataBytes\",\"outputs\":[{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"positionTokenID\",\"type\":\"uint256\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"poolID\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amountOrTokenID\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"stakeTimestamp\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"unstakeInitiatedAt\",\"type\":\"uint256\"}],\"internalType\":\"structPosition\",\"name\":\"position\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"administrator\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenType\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"tokenAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenID\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"transferable\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"lockupSeconds\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"cooldownSeconds\",\"type\":\"uint256\"}],\"internalType\":\"structStakingPool\",\"name\":\"pool\",\"type\":\"tuple\"}],\"name\":\"metadataJSON\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenType\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"tokenAddress\",\"type\":\"address\"}],\"name\":\"returnTokenSymbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"returnTokenSymbolNative\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"}]",
	Bin: "0x608060405234801561001057600080fd5b50615088806100206000396000f3fe608060405234801561001057600080fd5b50600436106100a95760003560e01c80637b2f34ff116100715780637b2f34ff1461018c578063975a3a3b146101bc578063c7547df9146101da578063cb91d35d1461020a578063e8e009b71461023a578063fa77750d1461026a576100a9565b806313d30b87146100ae57806320958018146100cc578063239bdf6c146100fc57806362ee01be1461012c578063721ac18a1461015c575b600080fd5b6100b661029a565b6040516100c39190611ac6565b60405180910390f35b6100e660048036038101906100e19190611c31565b6102bf565b6040516100f39190611ac6565b60405180910390f35b61011660048036038101906101119190611e77565b610327565b6040516101239190611ac6565b60405180910390f35b61014660048036038101906101419190611ecb565b61033d565b6040516101539190611ac6565b60405180910390f35b61017660048036038101906101719190611e77565b61050d565b6040516101839190611ff7565b60405180910390f35b6101a660048036038101906101a19190611e77565b610696565b6040516101b39190611ac6565b60405180910390f35b6101c46106d3565b6040516101d19190611ac6565b60405180910390f35b6101f460048036038101906101ef9190612019565b6107bf565b6040516102019190611ac6565b60405180910390f35b610224600480360381019061021f9190612046565b6108bc565b6040516102319190611ac6565b60405180910390f35b610254600480360381019061024f9190612086565b610a23565b6040516102619190611ac6565b60405180910390f35b610284600480360381019061027f91906120fe565b610a8e565b6040516102919190611ac6565b60405180910390f35b60606040516020016102ab906123d8565b604051602081830303815290604052905090565b606060006040518060400160405280600b81526020017f436f7572696572204e6577000000000000000000000000000000000000000000815250905080838260405160200161031093929190612663565b604051602081830303815290604052915050919050565b606061033484848461050d565b90509392505050565b6060600060405180602001604052806000815250905060008060129050600081895161036991906126fa565b9050600060288261037a919061273c565b905060405160200161038b906127bc565b604051602081830303815290604052805190602001208a6040516020016103b291906127d1565b60405160208183030381529060405280519060200120036104505760c293506103e7846104ab6103e2919061273c565b610ad1565b6103fd856104ab6103f8919061273c565b610ad1565b6104138661048e61040e919061273c565b610ad1565b610429876104e2610424919061273c565b610ad1565b8b60405160200161043e959493929190612bea565b60405160208183030381529060405294505b61045981610ad1565b8a61047b601e8460f161046c919061273c565b610476919061273c565b610ad1565b8b886104938961056d61048e919061273c565b610ad1565b6104a98a61056d6104a4919061273c565b610ad1565b6104bf8b6105506104ba919061273c565b610ad1565b6104d58c6105a46104d0919061273c565b610ad1565b8f6040516020016104ef9a99989796959493929190613216565b60405160208183030381529060405295505050505050949350505050565b6060600061052361051e8585610b9f565b610bd2565b9050600061053086610ad1565b826040516020016105429291906134c9565b6040516020818303038152906040529050806105618660000151610ad1565b604051602001610572929190613613565b6040516020818303038152906040529050806102d18560200151146105af5760405180606001604052806027815260200161502c602791396105c9565b604051806060016040528060298152602001615003602991395b6105d68760200151610ad1565b6040516020016105e893929190613699565b6040516020818303038152906040529050806106078660400151610ad1565b60405160200161061892919061379e565b6040516020818303038152906040529050806106468560a001518760400151610641919061273c565b610ad1565b604051602001610657929190613870565b60405160208183030381529060405290508060405160200161067991906138f6565b604051602081830303815290604052905080925050509392505050565b60606106ab6106a685858561050d565b610bd2565b6040516020016106bb9190613964565b60405160208183030381529060405290509392505050565b6060600046905060018114806106eb575062066eee81145b1561072e576040518060400160405280600381526020017f45544800000000000000000000000000000000000000000000000000000000008152509150506107bc565b6135b281148061073f5750617a6981145b15610782576040518060400160405280600281526020017f47370000000000000000000000000000000000000000000000000000000000008152509150506107bc565b6040518060400160405280600381526020017f4e2f4100000000000000000000000000000000000000000000000000000000008152509150505b90565b606060006107e48373ffffffffffffffffffffffffffffffffffffffff166014610d44565b90506000600667ffffffffffffffff81111561080357610802611b06565b5b6040519080825280601f01601f1916602001820160405280156108355781602001600182028036833780820191505090505b50905060005b60068110156108b15782818151811061085757610856613986565b5b602001015160f81c60f81b82828151811061087557610874613986565b5b60200101907effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916908160001a905350808060010191505061083b565b508092505050919050565b606060148303610941578173ffffffffffffffffffffffffffffffffffffffff166395d89b416040518163ffffffff1660e01b8152600401600060405180830381865afa158015610911573d6000803e3d6000fd5b505050506040513d6000823e3d601f19601f8201168201806040525081019061093a9190613a25565b9050610a1d565b6102d183036109c5578173ffffffffffffffffffffffffffffffffffffffff166395d89b416040518163ffffffff1660e01b8152600401600060405180830381865afa158015610995573d6000803e3d6000fd5b505050506040513d6000823e3d601f19601f820116820180604052508101906109be9190613a25565b9050610a1d565b61048383036109e45760006109d9836107bf565b905080915050610a1d565b6040518060400160405280600381526020017f4e2f41000000000000000000000000000000000000000000000000000000000081525090505b92915050565b606060006040518060400160405280600b81526020017f436f7572696572204e6577000000000000000000000000000000000000000000815250905080848285604051602001610a769493929190613d40565b60405160208183030381529060405291505092915050565b606084868786888a8b898c8e8f8c604051602001610ab79c9b9a999897969594939291906147c8565b604051602081830303815290604052905095945050505050565b606060006001610ae084610f8a565b01905060008167ffffffffffffffff811115610aff57610afe611b06565b5b6040519080825280601f01601f191660200182016040528015610b315781602001600182028036833780820191505090505b509050600082602001820190505b600115610b94578080600190039150507f3031323334353637383961626364656600000000000000000000000000000000600a86061a8153600a8581610b8857610b87614981565b5b04945060008503610b3f575b819350505050919050565b6060610bab83836110dd565b604051602001610bbb91906127d1565b604051602081830303815290604052905092915050565b60606000825103610bf457604051806020016040528060008152509050610d3f565b6000604051806060016040528060408152602001614fc36040913990506000600360028551610c23919061273c565b610c2d91906149b0565b6004610c3991906126fa565b67ffffffffffffffff811115610c5257610c51611b06565b5b6040519080825280601f01601f191660200182016040528015610c845781602001600182028036833780820191505090505b50905060018201602082018586518701602081018051600082525b82841015610cfa576003840193508351603f8160121c168701518653600186019550603f81600c1c168701518653600186019550603f8160061c168701518653600186019550603f8116870151865360018601955050610c9f565b80825260038a510660018114610d175760028114610d2a57610d32565b603d6001870353603d6002870353610d32565b603d60018703535b5050505050505080925050505b919050565b6060600083905060006002846002610d5c91906126fa565b610d66919061273c565b67ffffffffffffffff811115610d7f57610d7e611b06565b5b6040519080825280601f01601f191660200182016040528015610db15781602001600182028036833780820191505090505b5090507f300000000000000000000000000000000000000000000000000000000000000081600081518110610de957610de8613986565b5b60200101907effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916908160001a9053507f780000000000000000000000000000000000000000000000000000000000000081600181518110610e4d57610e4c613986565b5b60200101907effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916908160001a90535060006001856002610e8d91906126fa565b610e97919061273c565b90505b6001811115610f37577f3031323334353637383961626364656600000000000000000000000000000000600f841660108110610ed957610ed8613986565b5b1a60f81b828281518110610ef057610eef613986565b5b60200101907effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916908160001a905350600483901c925080610f30906149e1565b9050610e9a565b5060008214610f7f5784846040517fe22e27eb000000000000000000000000000000000000000000000000000000008152600401610f76929190614a19565b60405180910390fd5b809250505092915050565b600080600090507a184f03e93ff9f4daa797ed6e38ed64bf6a1f0100000000000000008310610fe8577a184f03e93ff9f4daa797ed6e38ed64bf6a1f0100000000000000008381610fde57610fdd614981565b5b0492506040810190505b6d04ee2d6d415b85acef81000000008310611025576d04ee2d6d415b85acef8100000000838161101b5761101a614981565b5b0492506020810190505b662386f26fc10000831061105457662386f26fc10000838161104a57611049614981565b5b0492506010810190505b6305f5e100831061107d576305f5e100838161107357611072614981565b5b0492506008810190505b61271083106110a257612710838161109857611097614981565b5b0492506004810190505b606483106110c557606483816110bb576110ba614981565b5b0492506002810190505b600a83106110d4576001810190505b80915050919050565b606060006102d1836020015114611129576040518060400160405280600d81526020017f416d6f756e74207374616b656400000000000000000000000000000000000000815250611160565b6040518060400160405280600881526020017f546f6b656e2049440000000000000000000000000000000000000000000000008152505b905060006111718560200151610ad1565b9050600061118a6111858760400151611414565b611625565b905060006111b26111ad8760a0015189604001516111a8919061273c565b611414565b611625565b905060006111c38760c00151610ad1565b905060006111d48960000151610ad1565b9050600060018960200151146112b0576014896020015114611274576102d1896020015114611238576040518060400160405280600781526020017f455243313135350000000000000000000000000000000000000000000000000081525061126f565b6040518060400160405280600681526020017f45524337323100000000000000000000000000000000000000000000000000008152505b6112ab565b6040518060400160405280600581526020017f45524332300000000000000000000000000000000000000000000000000000008152505b6112e7565b6040518060400160405280600681526020017f4e617469766500000000000000000000000000000000000000000000000000008152505b9050600060018a602001511461130e576113098a602001518b604001516108bc565b611317565b6113166106d3565b5b905060006113408b6040015173ffffffffffffffffffffffffffffffffffffffff166014610d44565b905061134a61029a565b611353836102bf565b61135d8b8b610a23565b6113d46040518060400160405280600381526020017f39393300000000000000000000000000000000000000000000000000000000008152506040518060400160405280600381526020017f39363400000000000000000000000000000000000000000000000000000000008152508c8c8c610a8e565b6113e087868e8b61033d565b6040516020016113f4959493929190614cc8565b604051602081830303815290604052995050505050505050505092915050565b61141c6119e3565b60008080611429856116b3565b846000019061ffff16908161ffff168152505061144b6107b261ffff166117ca565b61145c856000015161ffff166117ca565b6114669190614d3f565b9150816301e2850061147891906126fa565b83611483919061273c565b9250816107b285600001516114989190614d81565b61ffff166114a69190614d3f565b6301e133806114b591906126fa565b836114c0919061273c565b92506000600191505b600c8260ff1611611540576114e282866000015161181e565b60ff16620151806114f391906126fa565b9050858482611502919061273c565b111561151f5781856020019060ff16908160ff1681525050611540565b808461152b919061273c565b9350818061153890614dc4565b9250506114c9565b600191505b6115578560200151866000015161181e565b60ff168260ff16116115b457858462015180611573919061273c565b11156115905781856040019060ff16908160ff16815250506115b4565b620151808461159f919061273c565b935081806115ac90614dc4565b925050611545565b6115bd866118ea565b856060019060ff16908160ff16815250506115d78661190d565b856080019060ff16908160ff16815250506115f18661192e565b8560a0019060ff16908160ff168152505061160b86611944565b8560c0019060ff16908160ff168152505050505050919050565b6060611638826000015161ffff16610ad1565b611648836020015160ff16610ad1565b611658846040015160ff16610ad1565b611668856060015160ff16610ad1565b611678866080015160ff16610ad1565b6116888760a0015160ff16610ad1565b60405160200161169d96959493929190614ed1565b6040516020818303038152906040529050919050565b600080600090506000806301e13380856116cd91906149b0565b6107b261ffff166116de919061273c565b91506116ef6107b261ffff166117ca565b6116fc8361ffff166117ca565b6117069190614d3f565b9050806301e2850061171891906126fa565b83611723919061273c565b9250806107b2836117349190614d81565b61ffff166117429190614d3f565b6301e1338061175191906126fa565b8361175c919061273c565b92505b848311156117bf5761177c6001836117779190614d81565b611974565b15611798576301e28500836117919190614d3f565b92506117ab565b6301e13380836117a89190614d3f565b92505b6001826117b89190614d81565b915061175f565b819350505050919050565b60006001826117d99190614d3f565b9150610190826117e991906149b0565b6064836117f691906149b0565b60048461180391906149b0565b61180d9190614d3f565b611817919061273c565b9050919050565b600060018360ff161480611835575060038360ff16145b80611843575060058360ff16145b80611851575060078360ff16145b8061185f575060088360ff16145b8061186d5750600a8360ff16145b8061187b5750600c8360ff16145b1561188957601f90506118e4565b60048360ff16148061189e575060068360ff16145b806118ac575060098360ff16145b806118ba5750600b8360ff16145b156118c857601e90506118e4565b6118d182611974565b156118df57601d90506118e4565b601c90505b92915050565b60006018610e10836118fc91906149b0565b6119069190614f60565b9050919050565b6000603c808361191d91906149b0565b6119279190614f60565b9050919050565b6000603c8261193d9190614f60565b9050919050565b600060076004620151808461195991906149b0565b611963919061273c565b61196d9190614f60565b9050919050565b6000806004836119849190614f91565b61ffff161461199657600090506119de565b60006064836119a59190614f91565b61ffff16146119b757600190506119de565b6000610190836119c79190614f91565b61ffff16146119d957600090506119de565b600190505b919050565b6040518060e00160405280600061ffff168152602001600060ff168152602001600060ff168152602001600060ff168152602001600060ff168152602001600060ff168152602001600060ff1681525090565b600081519050919050565b600082825260208201905092915050565b60005b83811015611a70578082015181840152602081019050611a55565b60008484015250505050565b6000601f19601f8301169050919050565b6000611a9882611a36565b611aa28185611a41565b9350611ab2818560208601611a52565b611abb81611a7c565b840191505092915050565b60006020820190508181036000830152611ae08184611a8d565b905092915050565b6000604051905090565b600080fd5b600080fd5b600080fd5b600080fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b611b3e82611a7c565b810181811067ffffffffffffffff82111715611b5d57611b5c611b06565b5b80604052505050565b6000611b70611ae8565b9050611b7c8282611b35565b919050565b600067ffffffffffffffff821115611b9c57611b9b611b06565b5b611ba582611a7c565b9050602081019050919050565b82818337600083830152505050565b6000611bd4611bcf84611b81565b611b66565b905082815260208101848484011115611bf057611bef611b01565b5b611bfb848285611bb2565b509392505050565b600082601f830112611c1857611c17611afc565b5b8135611c28848260208601611bc1565b91505092915050565b600060208284031215611c4757611c46611af2565b5b600082013567ffffffffffffffff811115611c6557611c64611af7565b5b611c7184828501611c03565b91505092915050565b6000819050919050565b611c8d81611c7a565b8114611c9857600080fd5b50565b600081359050611caa81611c84565b92915050565b600080fd5b600060808284031215611ccb57611cca611cb0565b5b611cd56080611b66565b90506000611ce584828501611c9b565b6000830152506020611cf984828501611c9b565b6020830152506040611d0d84828501611c9b565b6040830152506060611d2184828501611c9b565b60608301525092915050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000611d5882611d2d565b9050919050565b611d6881611d4d565b8114611d7357600080fd5b50565b600081359050611d8581611d5f565b92915050565b60008115159050919050565b611da081611d8b565b8114611dab57600080fd5b50565b600081359050611dbd81611d97565b92915050565b600060e08284031215611dd957611dd8611cb0565b5b611de360e0611b66565b90506000611df384828501611d76565b6000830152506020611e0784828501611c9b565b6020830152506040611e1b84828501611d76565b6040830152506060611e2f84828501611c9b565b6060830152506080611e4384828501611dae565b60808301525060a0611e5784828501611c9b565b60a08301525060c0611e6b84828501611c9b565b60c08301525092915050565b60008060006101808486031215611e9157611e90611af2565b5b6000611e9f86828701611c9b565b9350506020611eb086828701611cb5565b92505060a0611ec186828701611dc3565b9150509250925092565b60008060008060808587031215611ee557611ee4611af2565b5b600085013567ffffffffffffffff811115611f0357611f02611af7565b5b611f0f87828801611c03565b945050602085013567ffffffffffffffff811115611f3057611f2f611af7565b5b611f3c87828801611c03565b935050604085013567ffffffffffffffff811115611f5d57611f5c611af7565b5b611f6987828801611c03565b925050606085013567ffffffffffffffff811115611f8a57611f89611af7565b5b611f9687828801611c03565b91505092959194509250565b600081519050919050565b600082825260208201905092915050565b6000611fc982611fa2565b611fd38185611fad565b9350611fe3818560208601611a52565b611fec81611a7c565b840191505092915050565b600060208201905081810360008301526120118184611fbe565b905092915050565b60006020828403121561202f5761202e611af2565b5b600061203d84828501611d76565b91505092915050565b6000806040838503121561205d5761205c611af2565b5b600061206b85828601611c9b565b925050602061207c85828601611d76565b9150509250929050565b6000806040838503121561209d5761209c611af2565b5b600083013567ffffffffffffffff8111156120bb576120ba611af7565b5b6120c785828601611c03565b925050602083013567ffffffffffffffff8111156120e8576120e7611af7565b5b6120f485828601611c03565b9150509250929050565b600080600080600060a0868803121561211a57612119611af2565b5b600086013567ffffffffffffffff81111561213857612137611af7565b5b61214488828901611c03565b955050602086013567ffffffffffffffff81111561216557612164611af7565b5b61217188828901611c03565b945050604086013567ffffffffffffffff81111561219257612191611af7565b5b61219e88828901611c03565b935050606086013567ffffffffffffffff8111156121bf576121be611af7565b5b6121cb88828901611c03565b925050608086013567ffffffffffffffff8111156121ec576121eb611af7565b5b6121f888828901611c03565b9150509295509295909350565b600081905092915050565b7f3c7265637420783d22313633362e3534312220793d223138312220776964746860008201527f3d223130372e34353922206865696768743d223130372e343539222072783d2260208201527f35332e3732393522207374726f6b653d222343424346434222207374726f6b6560408201527f2d77696474683d22372e3534303938222f3e0000000000000000000000000000606082015250565b60006122b8607283612205565b91506122c382612210565b607282019050919050565b7f3c7061746820643d224d313636312e39393035203232302e353034354c31363760008201527f332e34343935203233372e3934343548313638382e323839354c313638342e3960208201527f323030203233322e3831343548313639352e363230304c313638322e3835303060408201527f203235322e323634354c313639302e32373030203236342e353534354c31373160608201527f382e35353030203232302e3530343548313636312e393930355a222066696c6c60808201527f3d2223434243464342222f3e000000000000000000000000000000000000000060a082015250565b60006123c260ac83612205565b91506123cd826122ce565b60ac82019050919050565b60006123e3826122ab565b91506123ee826123b5565b9150819050919050565b7f3c746578742066696c6c3d22234342434643422220786d6c3a73706163653d2260008201527f707265736572766522207374796c653d2277686974652d73706163653a20707260208201527f652220666f6e742d66616d696c793d2200000000000000000000000000000000604082015250565b600061247a605083612205565b9150612485826123f8565b605082019050919050565b600061249b82611a36565b6124a58185612205565b93506124b5818560208601611a52565b80840191505092915050565b7f2220666f6e742d73697a653d223232302220666f6e742d7765696768743d223860008201527f303022206c65747465722d73706163696e673d222d302e3034656d223e3c747360208201527f70616e20783d223335302e3132342220793d223538332e363832223e00000000604082015250565b6000612543605c83612205565b915061254e826124c1565b605c82019050919050565b7f3c2f747370616e3e3c2f746578743e0000000000000000000000000000000000600082015250565b600061258f600f83612205565b915061259a82612559565b600f82019050919050565b7f2220666f6e742d73697a653d223232302220666f6e742d7765696768743d226260008201527f6f6c6422206c65747465722d73706163696e673d222d302e3034656d223e3c7460208201527f7370616e20783d223232302220793d223538332e363832223e243c2f7473706160408201527f6e3e3c2f746578743e0000000000000000000000000000000000000000000000606082015250565b600061264d606983612205565b9150612658826125a5565b606982019050919050565b600061266e8261246d565b915061267a8286612490565b915061268582612536565b91506126918285612490565b915061269c82612582565b91506126a78261246d565b91506126b38284612490565b91506126be82612640565b9150819050949350505050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b600061270582611c7a565b915061271083611c7a565b925082820261271e81611c7a565b91508282048414831517612735576127346126cb565b5b5092915050565b600061274782611c7a565b915061275283611c7a565b925082820190508082111561276a576127696126cb565b5b92915050565b7f4552433131353500000000000000000000000000000000000000000000000000600082015250565b60006127a6600783612205565b91506127b182612770565b600782019050919050565b60006127c782612799565b9150819050919050565b60006127dd8284612490565b915081905092915050565b7f3c7265637420783d223232312220793d22000000000000000000000000000000600082015250565b600061281e601183612205565b9150612829826127e8565b601182019050919050565b7f222077696474683d223135353822206865696768743d223930222072783d223160008201527f39222066696c6c3d2223313831383142222066696c6c2d6f7061636974793d2260208201527f302e38222f3e0000000000000000000000000000000000000000000000000000604082015250565b60006128b6604683612205565b91506128c182612834565b604682019050919050565b7f222077696474683d223135353822206865696768743d223930222072783d223160008201527f3922207374726f6b653d222337333733373322207374726f6b652d776964746860208201527f3d2232222f3e0000000000000000000000000000000000000000000000000000604082015250565b600061294e604683612205565b9150612959826128cc565b604682019050919050565b7f3c746578742066696c6c3d22233745383037452220786d6c3a73706163653d2260008201527f707265736572766522207374796c653d2277686974652d73706163653a20707260208201527f652220666f6e742d66616d696c793d22436f7572696572204e65772220666f6e60408201527f742d73697a653d2234302220666f6e742d7765696768743d22626f6c6422206c60608201527f65747465722d73706163696e673d2230656d223e3c747370616e20783d22323260808201527f312220793d22000000000000000000000000000000000000000000000000000060a082015250565b6000612a5860a683612205565b9150612a6382612964565b60a682019050919050565b7f223e546f6b656e2049443c2f747370616e3e3c2f746578743e00000000000000600082015250565b6000612aa4601983612205565b9150612aaf82612a6e565b601982019050919050565b7f3c746578742066696c6c3d22234342434643422220786d6c3a73706163653d2260008201527f707265736572766522207374796c653d2277686974652d73706163653a20707260208201527f652220666f6e742d66616d696c793d22436f7572696572204e65772220666f6e60408201527f742d73697a653d22343022206c65747465722d73706163696e673d2230656d2260608201527f3e3c747370616e20783d223236302220793d2200000000000000000000000000608082015250565b6000612b88609383612205565b9150612b9382612aba565b609382019050919050565b7f223e000000000000000000000000000000000000000000000000000000000000600082015250565b6000612bd4600283612205565b9150612bdf82612b9e565b600282019050919050565b6000612bf582612811565b9150612c018288612490565b9150612c0c826128a9565b9150612c1782612811565b9150612c238287612490565b9150612c2e82612941565b9150612c3982612a4b565b9150612c458286612490565b9150612c5082612a97565b9150612c5b82612b7b565b9150612c678285612490565b9150612c7282612bc7565b9150612c7e8284612490565b9150612c8982612582565b91508190509695505050505050565b7f3c7265637420783d223232312220793d2231313935222077696474683d22313560008201527f353822206865696768743d223930222072783d223139222066696c6c3d22233160208201527f3831383142222066696c6c2d6f7061636974793d22302e38222f3e0000000000604082015250565b6000612d1a605b83612205565b9150612d2582612c98565b605b82019050919050565b7f3c7265637420783d223232312220793d2231313935222077696474683d22313560008201527f353822206865696768743d223930222072783d22313922207374726f6b653d2260208201527f2337333733373322207374726f6b652d77696474683d2232222f3e0000000000604082015250565b6000612db2605b83612205565b9150612dbd82612d30565b605b82019050919050565b7f3c746578742066696c6c3d22233745383037452220786d6c3a73706163653d2260008201527f707265736572766522207374796c653d2277686974652d73706163653a20707260208201527f652220666f6e742d66616d696c793d22436f7572696572204e65772220666f6e60408201527f742d73697a653d2234302220666f6e742d7765696768743d22626f6c6422206c60608201527f65747465722d73706163696e673d2230656d223e3c747370616e20783d22323260808201527f312220793d2231313636223e546f6b656e3c2f747370616e3e3c2f746578743e60a082015250565b6000612ebc60c083612205565b9150612ec782612dc8565b60c082019050919050565b7f3c7265637420783d223234312220793d2231323135222077696474683d220000600082015250565b6000612f08601e83612205565b9150612f1382612ed2565b601e82019050919050565b7f22206865696768743d223438222072783d22323122207374726f6b653d22234660008201527f464546423822207374726f6b652d77696474683d22302e34222f3e0000000000602082015250565b6000612f7a603b83612205565b9150612f8582612f1e565b603b82019050919050565b7f3c7465787420783d223236302220793d2231323530222066696c6c3d2223464660008201527f454642382220666f6e742d66616d696c793d22436f7572696572204e6577222060208201527f666f6e742d73697a653d2233322220666f6e742d7765696768743d22626f6c6460408201527f223e000000000000000000000000000000000000000000000000000000000000606082015250565b6000613038606283612205565b915061304382612f90565b606282019050919050565b7f3c2f746578743e00000000000000000000000000000000000000000000000000600082015250565b6000613084600783612205565b915061308f8261304e565b600782019050919050565b7f3c746578742066696c6c3d22234342434643422220786d6c3a73706163653d2260008201527f707265736572766522207374796c653d2277686974652d73706163653a20707260208201527f652220666f6e742d66616d696c793d22436f7572696572204e65772220666f6e60408201527f742d73697a653d22343022206c65747465722d73706163696e673d2230656d2260608201527f3e3c747370616e20783d22000000000000000000000000000000000000000000608082015250565b6000613168608b83612205565b91506131738261309a565b608b82019050919050565b7f2220793d2231323530223e000000000000000000000000000000000000000000600082015250565b60006131b4600b83612205565b91506131bf8261317e565b600b82019050919050565b7f223e506f6f6c2049443c2f747370616e3e3c2f746578743e0000000000000000600082015250565b6000613200601883612205565b915061320b826131ca565b601882019050919050565b600061322182612d0d565b915061322c82612da5565b915061323782612eaf565b915061324282612efb565b915061324e828d612490565b915061325982612f6d565b91506132648261302b565b9150613270828c612490565b915061327b82613077565b91506132868261315b565b9150613292828b612490565b915061329d826131a7565b91506132a9828a612490565b91506132b482612582565b91506132c08289612490565b91506132cb82612811565b91506132d78288612490565b91506132e2826128a9565b91506132ed82612811565b91506132f98287612490565b915061330482612941565b915061330f82612a4b565b915061331b8286612490565b9150613326826131f3565b915061333182612b7b565b915061333d8285612490565b915061334882612bc7565b91506133548284612490565b915061335f82612582565b91508190509b9a5050505050505050505050565b7f7b22746f6b656e5f6964223a2200000000000000000000000000000000000000600082015250565b60006133a9600d83612205565b91506133b482613373565b600d82019050919050565b7f222c22696d616765223a20220000000000000000000000000000000000000000600082015250565b60006133f5600c83612205565b9150613400826133bf565b600c82019050919050565b7f646174613a696d6167652f7376672b786d6c3b6261736536342c000000000000600082015250565b6000613441601a83612205565b915061344c8261340b565b601a82019050919050565b7f222c22726573756c745f76657273696f6e223a312c226174747269627574657360008201527f223a205b00000000000000000000000000000000000000000000000000000000602082015250565b60006134b3602483612205565b91506134be82613457565b602482019050919050565b60006134d48261339c565b91506134e08285612490565b91506134eb826133e8565b91506134f682613434565b91506135028284612490565b915061350d826134a6565b91508190509392505050565b600081905092915050565b600061352f82611fa2565b6135398185613519565b9350613549818560208601611a52565b80840191505092915050565b7f7b2274726169745f74797065223a22506f6f6c204944222c2276616c7565223a60008201527f2200000000000000000000000000000000000000000000000000000000000000602082015250565b60006135b1602183612205565b91506135bc82613555565b602182019050919050565b7f227d000000000000000000000000000000000000000000000000000000000000600082015250565b60006135fd600283612205565b9150613608826135c7565b600282019050919050565b600061361f8285613524565b915061362a826135a4565b91506136368284612490565b9150613641826135f0565b91508190509392505050565b7f2c00000000000000000000000000000000000000000000000000000000000000600082015250565b6000613683600183612205565b915061368e8261364d565b600182019050919050565b60006136a58286613524565b91506136b082613676565b91506136bc8285612490565b91506136c88284612490565b91506136d3826135f0565b9150819050949350505050565b7f2c7b22646973706c61795f74797065223a226e756d626572222c22747261697460008201527f5f74797065223a225374616b6564206174222c2276616c7565223a0000000000602082015250565b600061373c603b83612205565b9150613747826136e0565b603b82019050919050565b7f7d00000000000000000000000000000000000000000000000000000000000000600082015250565b6000613788600183612205565b915061379382613752565b600182019050919050565b60006137aa8285613524565b91506137b58261372f565b91506137c18284612490565b91506137cc8261377b565b91508190509392505050565b7f2c7b22646973706c61795f74797065223a226e756d626572222c22747261697460008201527f5f74797065223a224c6f636b75702065787069726573206174222c2276616c7560208201527f65223a0000000000000000000000000000000000000000000000000000000000604082015250565b600061385a604383612205565b9150613865826137d8565b604382019050919050565b600061387c8285613524565b91506138878261384d565b91506138938284612490565b915061389e8261377b565b91508190509392505050565b7f5d7d000000000000000000000000000000000000000000000000000000000000600082015250565b60006138e0600283612205565b91506138eb826138aa565b600282019050919050565b60006139028284613524565b915061390d826138d3565b915081905092915050565b7f646174613a6170706c69636174696f6e2f6a736f6e3b6261736536342c000000600082015250565b600061394e601d83612205565b915061395982613918565b601d82019050919050565b600061396f82613941565b915061397b8284612490565b915081905092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b60006139c86139c384611b81565b611b66565b9050828152602081018484840111156139e4576139e3611b01565b5b6139ef848285611a52565b509392505050565b600082601f830112613a0c57613a0b611afc565b5b8151613a1c8482602086016139b5565b91505092915050565b600060208284031215613a3b57613a3a611af2565b5b600082015167ffffffffffffffff811115613a5957613a58611af7565b5b613a65848285016139f7565b91505092915050565b7f3c7265637420783d223232312220793d22373636222077696474683d2231353560008201527f3822206865696768743d22313232222072783d223139222066696c6c3d22233160208201527f3831383142222066696c6c2d6f7061636974793d22302e38222f3e0000000000604082015250565b6000613af0605b83612205565b9150613afb82613a6e565b605b82019050919050565b7f3c7265637420783d223232312220793d22373636222077696474683d2231353560008201527f3822206865696768743d22313232222072783d22313922207374726f6b653d2260208201527f2337333733373322207374726f6b652d77696474683d2232222f3e0000000000604082015250565b6000613b88605b83612205565b9150613b9382613b06565b605b82019050919050565b7f3c7465787420783d223232302220793d22373337222066696c6c3d222337453860008201527f3037452220786d6c3a73706163653d22707265736572766522207374796c653d60208201527f2277686974652d73706163653a207072652220666f6e742d66616d696c793d22604082015250565b6000613c20606083612205565b9150613c2b82613b9e565b606082019050919050565b7f222020666f6e742d73697a653d2234302220666f6e742d7765696768743d226260008201527f6f6c6422206c65747465722d73706163696e673d2230656d223e000000000000602082015250565b6000613c92603a83612205565b9150613c9d82613c36565b603a82019050919050565b7f2220666f6e742d73697a653d2238302220666f6e742d7765696768743d22626f60008201527f6c6422206c65747465722d73706163696e673d2230656d223e3c747370616e2060208201527f783d223236302220793d22383530223e00000000000000000000000000000000604082015250565b6000613d2a605083612205565b9150613d3582613ca8565b605082019050919050565b6000613d4b82613ae3565b9150613d5682613b7b565b9150613d6182613c13565b9150613d6d8287612490565b9150613d7882613c85565b9150613d848286612490565b9150613d8f82613077565b9150613d9a8261246d565b9150613da68285612490565b9150613db182613d1d565b9150613dbd8284612490565b9150613dc882612582565b915081905095945050505050565b7f3c746578742066696c6c3d22233745383037452220786d6c3a73706163653d2260008201527f707265736572766522207374796c653d2277686974652d73706163653a20707260208201527f652220666f6e742d66616d696c793d22436f7572696572204e65772220666f6e60408201527f742d73697a653d2234302220666f6e742d7765696768743d22626f6c6422206c60608201527f65747465722d73706163696e673d2230656d223e3c747370616e20783d22323260808201527f302220793d22000000000000000000000000000000000000000000000000000060a082015250565b6000613eca60a683612205565b9150613ed582613dd6565b60a682019050919050565b7f223e5374616b65642061743c2f747370616e3e3c2f746578743e000000000000600082015250565b6000613f16601a83612205565b9150613f2182613ee0565b601a82019050919050565b7f222077696474683d2235323222206865696768743d223836222072783d22313960008201527f222066696c6c3d2223313831383142222066696c6c2d6f7061636974793d223060208201527f2e38222f3e000000000000000000000000000000000000000000000000000000604082015250565b6000613fae604583612205565b9150613fb982613f2c565b604582019050919050565b7f222077696474683d2235323222206865696768743d223836222072783d22313960008201527f22207374726f6b653d222337333733373322207374726f6b652d77696474683d60208201527f2232222f3e000000000000000000000000000000000000000000000000000000604082015250565b6000614046604583612205565b915061405182613fc4565b604582019050919050565b7f3c746578742066696c6c3d22234342434643422220786d6c3a73706163653d2260008201527f707265736572766522207374796c653d2277686974652d73706163653a20707260208201527f652220666f6e742d66616d696c793d22436f7572696572204e65772220666f6e60408201527f742d73697a653d22343022206c65747465722d73706163696e673d2230656d2260608201527f3e3c747370616e20783d223236302220793d2231303531223e00000000000000608082015250565b600061412a609983612205565b91506141358261405c565b609982019050919050565b7f3c746578742066696c6c3d22233745383037452220786d6c3a73706163653d2260008201527f707265736572766522207374796c653d2277686974652d73706163653a20707260208201527f652220666f6e742d66616d696c793d22436f7572696572204e65772220666f6e60408201527f742d73697a653d2234302220666f6e742d7765696768743d22626f6c6422206c60608201527f65747465722d73706163696e673d2230656d223e3c747370616e20783d22373660808201527f382220793d22000000000000000000000000000000000000000000000000000060a082015250565b600061423460a683612205565b915061423f82614140565b60a682019050919050565b7f223e556e6c6f636b732061743c2f747370616e3e3c2f746578743e0000000000600082015250565b6000614280601b83612205565b915061428b8261424a565b601b82019050919050565b7f3c7265637420783d223736392220793d22000000000000000000000000000000600082015250565b60006142cc601183612205565b91506142d782614296565b601182019050919050565b7f3c746578742066696c6c3d22234342434643422220786d6c3a73706163653d2260008201527f707265736572766522207374796c653d2277686974652d73706163653a20707260208201527f652220666f6e742d66616d696c793d22436f7572696572204e65772220666f6e60408201527f742d73697a653d22343022206c65747465722d73706163696e673d2230656d2260608201527f3e3c747370616e20783d223830382220793d2231303531223e00000000000000608082015250565b60006143b0609983612205565b91506143bb826142e2565b609982019050919050565b7f3c746578742066696c6c3d22233745383037452220786d6c3a73706163653d2260008201527f707265736572766522207374796c653d2277686974652d73706163653a20707260208201527f652220666f6e742d66616d696c793d22436f7572696572204e65772220666f6e60408201527f742d73697a653d2234302220666f6e742d7765696768743d22626f6c6422206c60608201527f65747465722d73706163696e673d2230656d223e3c747370616e20783d22313360808201527f31362220793d220000000000000000000000000000000000000000000000000060a082015250565b60006144ba60a783612205565b91506144c5826143c6565b60a782019050919050565b7f223e436f6f6c646f776e3c2f747370616e3e3c2f746578743e00000000000000600082015250565b6000614506601983612205565b9150614511826144d0565b601982019050919050565b7f3c7265637420783d22313331372220793d220000000000000000000000000000600082015250565b6000614552601283612205565b915061455d8261451c565b601282019050919050565b7f222077696474683d2234363222206865696768743d223836222072783d22313960008201527f222066696c6c3d2223313831383142222066696c6c2d6f7061636974793d223060208201527f2e38222f3e000000000000000000000000000000000000000000000000000000604082015250565b60006145ea604583612205565b91506145f582614568565b604582019050919050565b7f222077696474683d2234363222206865696768743d223836222072783d22313960008201527f22207374726f6b653d222337333733373322207374726f6b652d77696474683d60208201527f2232222f3e000000000000000000000000000000000000000000000000000000604082015250565b6000614682604583612205565b915061468d82614600565b604582019050919050565b7f3c746578742066696c6c3d22234342434643422220786d6c3a73706163653d2260008201527f707265736572766522207374796c653d2277686974652d73706163653a20707260208201527f652220666f6e742d66616d696c793d22436f7572696572204e65772220666f6e60408201527f742d73697a653d22343022206c65747465722d73706163696e673d2230656d2260608201527f3e3c747370616e20783d22313335362220793d2231303531223e000000000000608082015250565b6000614766609a83612205565b915061477182614698565b609a82019050919050565b7f207365636f6e6473000000000000000000000000000000000000000000000000600082015250565b60006147b2600883612205565b91506147bd8261477c565b600882019050919050565b60006147d382613ebd565b91506147df828f612490565b91506147ea82613f09565b91506147f582612811565b9150614801828e612490565b915061480c82613fa1565b915061481782612811565b9150614823828d612490565b915061482e82614039565b91506148398261411d565b9150614845828c612490565b915061485082612582565b915061485b82614227565b9150614867828b612490565b915061487282614273565b915061487d826142bf565b9150614889828a612490565b915061489482613fa1565b915061489f826142bf565b91506148ab8289612490565b91506148b682614039565b91506148c1826143a3565b91506148cd8288612490565b91506148d882612582565b91506148e3826144ad565b91506148ef8287612490565b91506148fa826144f9565b915061490582614545565b91506149118286612490565b915061491c826145dd565b915061492782614545565b91506149338285612490565b915061493e82614675565b915061494982614759565b91506149558284612490565b9150614960826147a5565b915061496b82612582565b91508190509d9c50505050505050505050505050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b60006149bb82611c7a565b91506149c683611c7a565b9250826149d6576149d5614981565b5b828204905092915050565b60006149ec82611c7a565b9150600082036149ff576149fe6126cb565b5b600182039050919050565b614a1381611c7a565b82525050565b6000604082019050614a2e6000830185614a0a565b614a3b6020830184614a0a565b9392505050565b7f3c7376672077696474683d223139363022206865696768743d2232303030222060008201527f76696577426f783d2230203020313936302032303030222066696c6c3d226e6f60208201527f6e652220786d6c6e733d22687474703a2f2f7777772e77332e6f72672f32303060408201527f302f7376672220786d6c6e733a786c696e6b3d22687474703a2f2f7777772e7760608201527f332e6f72672f313939392f786c696e6b223e0000000000000000000000000000608082015250565b6000614b10609283612205565b9150614b1b82614a42565b609282019050919050565b7f3c7265637420783d223132302220793d223830222077696474683d223137363060008201527f22206865696768743d2231383430222072783d223830222066696c6c3d22233260208201527f3932393239222f3e000000000000000000000000000000000000000000000000604082015250565b6000614ba8604883612205565b9150614bb382614b26565b604882019050919050565b7f3c7265637420783d223132302220793d223830222077696474683d223137363060008201527f22206865696768743d2231383430222072783d223830222066696c6c3d22757260208201527f6c28237061747465726e305f313638395f3131303229222066696c6c2d6f706160408201527f636974793d22302e34222f3e0000000000000000000000000000000000000000606082015250565b6000614c66606c83612205565b9150614c7182614bbe565b606c82019050919050565b7f3c2f7376673e0000000000000000000000000000000000000000000000000000600082015250565b6000614cb2600683612205565b9150614cbd82614c7c565b600682019050919050565b6000614cd382614b03565b9150614cde82614b9b565b9150614ce982614c59565b9150614cf58288612490565b9150614d018287612490565b9150614d0d8286612490565b9150614d198285612490565b9150614d258284612490565b9150614d3082614ca5565b91508190509695505050505050565b6000614d4a82611c7a565b9150614d5583611c7a565b9250828203905081811115614d6d57614d6c6126cb565b5b92915050565b600061ffff82169050919050565b6000614d8c82614d73565b9150614d9783614d73565b9250828203905061ffff811115614db157614db06126cb565b5b92915050565b600060ff82169050919050565b6000614dcf82614db7565b915060ff8203614de257614de16126cb565b5b600182019050919050565b7f2d00000000000000000000000000000000000000000000000000000000000000600082015250565b6000614e23600183612205565b9150614e2e82614ded565b600182019050919050565b7f2000000000000000000000000000000000000000000000000000000000000000600082015250565b6000614e6f600183612205565b9150614e7a82614e39565b600182019050919050565b7f3a00000000000000000000000000000000000000000000000000000000000000600082015250565b6000614ebb600183612205565b9150614ec682614e85565b600182019050919050565b6000614edd8289612490565b9150614ee882614e16565b9150614ef48288612490565b9150614eff82614e16565b9150614f0b8287612490565b9150614f1682614e62565b9150614f228286612490565b9150614f2d82614eae565b9150614f398285612490565b9150614f4482614eae565b9150614f508284612490565b9150819050979650505050505050565b6000614f6b82611c7a565b9150614f7683611c7a565b925082614f8657614f85614981565b5b828206905092915050565b6000614f9c82614d73565b9150614fa783614d73565b925082614fb757614fb6614981565b5b82820690509291505056fe4142434445464748494a4b4c4d4e4f505152535455565758595a6162636465666768696a6b6c6d6e6f707172737475767778797a303132333435363738392b2f7b2274726169745f74797065223a225374616b656420746f6b656e204944222c2276616c7565223a227b2274726169745f74797065223a225374616b656420616d6f756e74222c2276616c7565223a22a2646970667358221220cf2d2bff76e86a944f35e32108d7a6f85dfced5a75e52b92ebfd480959e5fcc364736f6c63430008180033",
}

// PositionMetadataABI is the input ABI used to generate the binding from.
// Deprecated: Use PositionMetadataMetaData.ABI instead.
var PositionMetadataABI = PositionMetadataMetaData.ABI

// PositionMetadataBin is the compiled bytecode used for deploying new contracts.
// Deprecated: Use PositionMetadataMetaData.Bin instead.
var PositionMetadataBin = PositionMetadataMetaData.Bin

// DeployPositionMetadata deploys a new Ethereum contract, binding an instance of PositionMetadata to it.
func DeployPositionMetadata(auth *bind.TransactOpts, backend bind.ContractBackend) (common.Address, *types.Transaction, *PositionMetadata, error) {
	parsed, err := PositionMetadataMetaData.GetAbi()
	if err != nil {
		return common.Address{}, nil, nil, err
	}
	if parsed == nil {
		return common.Address{}, nil, nil, errors.New("GetABI returned nil")
	}

	address, tx, contract, err := bind.DeployContract(auth, *parsed, common.FromHex(PositionMetadataBin), backend)
	if err != nil {
		return common.Address{}, nil, nil, err
	}
	return address, tx, &PositionMetadata{PositionMetadataCaller: PositionMetadataCaller{contract: contract}, PositionMetadataTransactor: PositionMetadataTransactor{contract: contract}, PositionMetadataFilterer: PositionMetadataFilterer{contract: contract}}, nil
}

// PositionMetadata is an auto generated Go binding around an Ethereum contract.
type PositionMetadata struct {
	PositionMetadataCaller     // Read-only binding to the contract
	PositionMetadataTransactor // Write-only binding to the contract
	PositionMetadataFilterer   // Log filterer for contract events
}

// PositionMetadataCaller is an auto generated read-only Go binding around an Ethereum contract.
type PositionMetadataCaller struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// PositionMetadataTransactor is an auto generated write-only Go binding around an Ethereum contract.
type PositionMetadataTransactor struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// PositionMetadataFilterer is an auto generated log filtering Go binding around an Ethereum contract events.
type PositionMetadataFilterer struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// PositionMetadataSession is an auto generated Go binding around an Ethereum contract,
// with pre-set call and transact options.
type PositionMetadataSession struct {
	Contract     *PositionMetadata // Generic contract binding to set the session for
	CallOpts     bind.CallOpts     // Call options to use throughout this session
	TransactOpts bind.TransactOpts // Transaction auth options to use throughout this session
}

// PositionMetadataCallerSession is an auto generated read-only Go binding around an Ethereum contract,
// with pre-set call options.
type PositionMetadataCallerSession struct {
	Contract *PositionMetadataCaller // Generic contract caller binding to set the session for
	CallOpts bind.CallOpts           // Call options to use throughout this session
}

// PositionMetadataTransactorSession is an auto generated write-only Go binding around an Ethereum contract,
// with pre-set transact options.
type PositionMetadataTransactorSession struct {
	Contract     *PositionMetadataTransactor // Generic contract transactor binding to set the session for
	TransactOpts bind.TransactOpts           // Transaction auth options to use throughout this session
}

// PositionMetadataRaw is an auto generated low-level Go binding around an Ethereum contract.
type PositionMetadataRaw struct {
	Contract *PositionMetadata // Generic contract binding to access the raw methods on
}

// PositionMetadataCallerRaw is an auto generated low-level read-only Go binding around an Ethereum contract.
type PositionMetadataCallerRaw struct {
	Contract *PositionMetadataCaller // Generic read-only contract binding to access the raw methods on
}

// PositionMetadataTransactorRaw is an auto generated low-level write-only Go binding around an Ethereum contract.
type PositionMetadataTransactorRaw struct {
	Contract *PositionMetadataTransactor // Generic write-only contract binding to access the raw methods on
}

// NewPositionMetadata creates a new instance of PositionMetadata, bound to a specific deployed contract.
func NewPositionMetadata(address common.Address, backend bind.ContractBackend) (*PositionMetadata, error) {
	contract, err := bindPositionMetadata(address, backend, backend, backend)
	if err != nil {
		return nil, err
	}
	return &PositionMetadata{PositionMetadataCaller: PositionMetadataCaller{contract: contract}, PositionMetadataTransactor: PositionMetadataTransactor{contract: contract}, PositionMetadataFilterer: PositionMetadataFilterer{contract: contract}}, nil
}

// NewPositionMetadataCaller creates a new read-only instance of PositionMetadata, bound to a specific deployed contract.
func NewPositionMetadataCaller(address common.Address, caller bind.ContractCaller) (*PositionMetadataCaller, error) {
	contract, err := bindPositionMetadata(address, caller, nil, nil)
	if err != nil {
		return nil, err
	}
	return &PositionMetadataCaller{contract: contract}, nil
}

// NewPositionMetadataTransactor creates a new write-only instance of PositionMetadata, bound to a specific deployed contract.
func NewPositionMetadataTransactor(address common.Address, transactor bind.ContractTransactor) (*PositionMetadataTransactor, error) {
	contract, err := bindPositionMetadata(address, nil, transactor, nil)
	if err != nil {
		return nil, err
	}
	return &PositionMetadataTransactor{contract: contract}, nil
}

// NewPositionMetadataFilterer creates a new log filterer instance of PositionMetadata, bound to a specific deployed contract.
func NewPositionMetadataFilterer(address common.Address, filterer bind.ContractFilterer) (*PositionMetadataFilterer, error) {
	contract, err := bindPositionMetadata(address, nil, nil, filterer)
	if err != nil {
		return nil, err
	}
	return &PositionMetadataFilterer{contract: contract}, nil
}

// bindPositionMetadata binds a generic wrapper to an already deployed contract.
func bindPositionMetadata(address common.Address, caller bind.ContractCaller, transactor bind.ContractTransactor, filterer bind.ContractFilterer) (*bind.BoundContract, error) {
	parsed, err := PositionMetadataMetaData.GetAbi()
	if err != nil {
		return nil, err
	}
	return bind.NewBoundContract(address, *parsed, caller, transactor, filterer), nil
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_PositionMetadata *PositionMetadataRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _PositionMetadata.Contract.PositionMetadataCaller.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_PositionMetadata *PositionMetadataRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _PositionMetadata.Contract.PositionMetadataTransactor.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_PositionMetadata *PositionMetadataRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _PositionMetadata.Contract.PositionMetadataTransactor.contract.Transact(opts, method, params...)
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_PositionMetadata *PositionMetadataCallerRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _PositionMetadata.Contract.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_PositionMetadata *PositionMetadataTransactorRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _PositionMetadata.Contract.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_PositionMetadata *PositionMetadataTransactorRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _PositionMetadata.Contract.contract.Transact(opts, method, params...)
}

// GenerateLogo is a free data retrieval call binding the contract method 0x13d30b87.
//
// Solidity: function generateLogo() pure returns(string)
func (_PositionMetadata *PositionMetadataCaller) GenerateLogo(opts *bind.CallOpts) (string, error) {
	var out []interface{}
	err := _PositionMetadata.contract.Call(opts, &out, "generateLogo")

	if err != nil {
		return *new(string), err
	}

	out0 := *abi.ConvertType(out[0], new(string)).(*string)

	return out0, err

}

// GenerateLogo is a free data retrieval call binding the contract method 0x13d30b87.
//
// Solidity: function generateLogo() pure returns(string)
func (_PositionMetadata *PositionMetadataSession) GenerateLogo() (string, error) {
	return _PositionMetadata.Contract.GenerateLogo(&_PositionMetadata.CallOpts)
}

// GenerateLogo is a free data retrieval call binding the contract method 0x13d30b87.
//
// Solidity: function generateLogo() pure returns(string)
func (_PositionMetadata *PositionMetadataCallerSession) GenerateLogo() (string, error) {
	return _PositionMetadata.Contract.GenerateLogo(&_PositionMetadata.CallOpts)
}

// GenerateStakingPeriodElements is a free data retrieval call binding the contract method 0xfa77750d.
//
// Solidity: function generateStakingPeriodElements(string yPos, string titleYPos, string stakeTimestampStr, string unlockTimestampStr, string cooldownStr) pure returns(string)
func (_PositionMetadata *PositionMetadataCaller) GenerateStakingPeriodElements(opts *bind.CallOpts, yPos string, titleYPos string, stakeTimestampStr string, unlockTimestampStr string, cooldownStr string) (string, error) {
	var out []interface{}
	err := _PositionMetadata.contract.Call(opts, &out, "generateStakingPeriodElements", yPos, titleYPos, stakeTimestampStr, unlockTimestampStr, cooldownStr)

	if err != nil {
		return *new(string), err
	}

	out0 := *abi.ConvertType(out[0], new(string)).(*string)

	return out0, err

}

// GenerateStakingPeriodElements is a free data retrieval call binding the contract method 0xfa77750d.
//
// Solidity: function generateStakingPeriodElements(string yPos, string titleYPos, string stakeTimestampStr, string unlockTimestampStr, string cooldownStr) pure returns(string)
func (_PositionMetadata *PositionMetadataSession) GenerateStakingPeriodElements(yPos string, titleYPos string, stakeTimestampStr string, unlockTimestampStr string, cooldownStr string) (string, error) {
	return _PositionMetadata.Contract.GenerateStakingPeriodElements(&_PositionMetadata.CallOpts, yPos, titleYPos, stakeTimestampStr, unlockTimestampStr, cooldownStr)
}

// GenerateStakingPeriodElements is a free data retrieval call binding the contract method 0xfa77750d.
//
// Solidity: function generateStakingPeriodElements(string yPos, string titleYPos, string stakeTimestampStr, string unlockTimestampStr, string cooldownStr) pure returns(string)
func (_PositionMetadata *PositionMetadataCallerSession) GenerateStakingPeriodElements(yPos string, titleYPos string, stakeTimestampStr string, unlockTimestampStr string, cooldownStr string) (string, error) {
	return _PositionMetadata.Contract.GenerateStakingPeriodElements(&_PositionMetadata.CallOpts, yPos, titleYPos, stakeTimestampStr, unlockTimestampStr, cooldownStr)
}

// GenerateTokenIdOrAmountElement is a free data retrieval call binding the contract method 0xe8e009b7.
//
// Solidity: function generateTokenIdOrAmountElement(string tokenIdOrAmountString, string amountOrTokenIDString) pure returns(string)
func (_PositionMetadata *PositionMetadataCaller) GenerateTokenIdOrAmountElement(opts *bind.CallOpts, tokenIdOrAmountString string, amountOrTokenIDString string) (string, error) {
	var out []interface{}
	err := _PositionMetadata.contract.Call(opts, &out, "generateTokenIdOrAmountElement", tokenIdOrAmountString, amountOrTokenIDString)

	if err != nil {
		return *new(string), err
	}

	out0 := *abi.ConvertType(out[0], new(string)).(*string)

	return out0, err

}

// GenerateTokenIdOrAmountElement is a free data retrieval call binding the contract method 0xe8e009b7.
//
// Solidity: function generateTokenIdOrAmountElement(string tokenIdOrAmountString, string amountOrTokenIDString) pure returns(string)
func (_PositionMetadata *PositionMetadataSession) GenerateTokenIdOrAmountElement(tokenIdOrAmountString string, amountOrTokenIDString string) (string, error) {
	return _PositionMetadata.Contract.GenerateTokenIdOrAmountElement(&_PositionMetadata.CallOpts, tokenIdOrAmountString, amountOrTokenIDString)
}

// GenerateTokenIdOrAmountElement is a free data retrieval call binding the contract method 0xe8e009b7.
//
// Solidity: function generateTokenIdOrAmountElement(string tokenIdOrAmountString, string amountOrTokenIDString) pure returns(string)
func (_PositionMetadata *PositionMetadataCallerSession) GenerateTokenIdOrAmountElement(tokenIdOrAmountString string, amountOrTokenIDString string) (string, error) {
	return _PositionMetadata.Contract.GenerateTokenIdOrAmountElement(&_PositionMetadata.CallOpts, tokenIdOrAmountString, amountOrTokenIDString)
}

// GenerateTokenSymbol is a free data retrieval call binding the contract method 0x20958018.
//
// Solidity: function generateTokenSymbol(string tokenSymbolString) pure returns(string)
func (_PositionMetadata *PositionMetadataCaller) GenerateTokenSymbol(opts *bind.CallOpts, tokenSymbolString string) (string, error) {
	var out []interface{}
	err := _PositionMetadata.contract.Call(opts, &out, "generateTokenSymbol", tokenSymbolString)

	if err != nil {
		return *new(string), err
	}

	out0 := *abi.ConvertType(out[0], new(string)).(*string)

	return out0, err

}

// GenerateTokenSymbol is a free data retrieval call binding the contract method 0x20958018.
//
// Solidity: function generateTokenSymbol(string tokenSymbolString) pure returns(string)
func (_PositionMetadata *PositionMetadataSession) GenerateTokenSymbol(tokenSymbolString string) (string, error) {
	return _PositionMetadata.Contract.GenerateTokenSymbol(&_PositionMetadata.CallOpts, tokenSymbolString)
}

// GenerateTokenSymbol is a free data retrieval call binding the contract method 0x20958018.
//
// Solidity: function generateTokenSymbol(string tokenSymbolString) pure returns(string)
func (_PositionMetadata *PositionMetadataCallerSession) GenerateTokenSymbol(tokenSymbolString string) (string, error) {
	return _PositionMetadata.Contract.GenerateTokenSymbol(&_PositionMetadata.CallOpts, tokenSymbolString)
}

// GenerateTokenTypeElement is a free data retrieval call binding the contract method 0x62ee01be.
//
// Solidity: function generateTokenTypeElement(string tokenTypeString, string tokenAddressString, string amountOrTokenIdString, string poolIdString) pure returns(string)
func (_PositionMetadata *PositionMetadataCaller) GenerateTokenTypeElement(opts *bind.CallOpts, tokenTypeString string, tokenAddressString string, amountOrTokenIdString string, poolIdString string) (string, error) {
	var out []interface{}
	err := _PositionMetadata.contract.Call(opts, &out, "generateTokenTypeElement", tokenTypeString, tokenAddressString, amountOrTokenIdString, poolIdString)

	if err != nil {
		return *new(string), err
	}

	out0 := *abi.ConvertType(out[0], new(string)).(*string)

	return out0, err

}

// GenerateTokenTypeElement is a free data retrieval call binding the contract method 0x62ee01be.
//
// Solidity: function generateTokenTypeElement(string tokenTypeString, string tokenAddressString, string amountOrTokenIdString, string poolIdString) pure returns(string)
func (_PositionMetadata *PositionMetadataSession) GenerateTokenTypeElement(tokenTypeString string, tokenAddressString string, amountOrTokenIdString string, poolIdString string) (string, error) {
	return _PositionMetadata.Contract.GenerateTokenTypeElement(&_PositionMetadata.CallOpts, tokenTypeString, tokenAddressString, amountOrTokenIdString, poolIdString)
}

// GenerateTokenTypeElement is a free data retrieval call binding the contract method 0x62ee01be.
//
// Solidity: function generateTokenTypeElement(string tokenTypeString, string tokenAddressString, string amountOrTokenIdString, string poolIdString) pure returns(string)
func (_PositionMetadata *PositionMetadataCallerSession) GenerateTokenTypeElement(tokenTypeString string, tokenAddressString string, amountOrTokenIdString string, poolIdString string) (string, error) {
	return _PositionMetadata.Contract.GenerateTokenTypeElement(&_PositionMetadata.CallOpts, tokenTypeString, tokenAddressString, amountOrTokenIdString, poolIdString)
}

// GetAddressSlice is a free data retrieval call binding the contract method 0xc7547df9.
//
// Solidity: function getAddressSlice(address tokenAddress) pure returns(string)
func (_PositionMetadata *PositionMetadataCaller) GetAddressSlice(opts *bind.CallOpts, tokenAddress common.Address) (string, error) {
	var out []interface{}
	err := _PositionMetadata.contract.Call(opts, &out, "getAddressSlice", tokenAddress)

	if err != nil {
		return *new(string), err
	}

	out0 := *abi.ConvertType(out[0], new(string)).(*string)

	return out0, err

}

// GetAddressSlice is a free data retrieval call binding the contract method 0xc7547df9.
//
// Solidity: function getAddressSlice(address tokenAddress) pure returns(string)
func (_PositionMetadata *PositionMetadataSession) GetAddressSlice(tokenAddress common.Address) (string, error) {
	return _PositionMetadata.Contract.GetAddressSlice(&_PositionMetadata.CallOpts, tokenAddress)
}

// GetAddressSlice is a free data retrieval call binding the contract method 0xc7547df9.
//
// Solidity: function getAddressSlice(address tokenAddress) pure returns(string)
func (_PositionMetadata *PositionMetadataCallerSession) GetAddressSlice(tokenAddress common.Address) (string, error) {
	return _PositionMetadata.Contract.GetAddressSlice(&_PositionMetadata.CallOpts, tokenAddress)
}

// Metadata is a free data retrieval call binding the contract method 0x7b2f34ff.
//
// Solidity: function metadata(uint256 positionTokenID, (uint256,uint256,uint256,uint256) position, (address,uint256,address,uint256,bool,uint256,uint256) pool) view returns(string)
func (_PositionMetadata *PositionMetadataCaller) Metadata(opts *bind.CallOpts, positionTokenID *big.Int, position Position, pool StakingPool) (string, error) {
	var out []interface{}
	err := _PositionMetadata.contract.Call(opts, &out, "metadata", positionTokenID, position, pool)

	if err != nil {
		return *new(string), err
	}

	out0 := *abi.ConvertType(out[0], new(string)).(*string)

	return out0, err

}

// Metadata is a free data retrieval call binding the contract method 0x7b2f34ff.
//
// Solidity: function metadata(uint256 positionTokenID, (uint256,uint256,uint256,uint256) position, (address,uint256,address,uint256,bool,uint256,uint256) pool) view returns(string)
func (_PositionMetadata *PositionMetadataSession) Metadata(positionTokenID *big.Int, position Position, pool StakingPool) (string, error) {
	return _PositionMetadata.Contract.Metadata(&_PositionMetadata.CallOpts, positionTokenID, position, pool)
}

// Metadata is a free data retrieval call binding the contract method 0x7b2f34ff.
//
// Solidity: function metadata(uint256 positionTokenID, (uint256,uint256,uint256,uint256) position, (address,uint256,address,uint256,bool,uint256,uint256) pool) view returns(string)
func (_PositionMetadata *PositionMetadataCallerSession) Metadata(positionTokenID *big.Int, position Position, pool StakingPool) (string, error) {
	return _PositionMetadata.Contract.Metadata(&_PositionMetadata.CallOpts, positionTokenID, position, pool)
}

// MetadataBytes is a free data retrieval call binding the contract method 0x721ac18a.
//
// Solidity: function metadataBytes(uint256 positionTokenID, (uint256,uint256,uint256,uint256) position, (address,uint256,address,uint256,bool,uint256,uint256) pool) view returns(bytes)
func (_PositionMetadata *PositionMetadataCaller) MetadataBytes(opts *bind.CallOpts, positionTokenID *big.Int, position Position, pool StakingPool) ([]byte, error) {
	var out []interface{}
	err := _PositionMetadata.contract.Call(opts, &out, "metadataBytes", positionTokenID, position, pool)

	if err != nil {
		return *new([]byte), err
	}

	out0 := *abi.ConvertType(out[0], new([]byte)).(*[]byte)

	return out0, err

}

// MetadataBytes is a free data retrieval call binding the contract method 0x721ac18a.
//
// Solidity: function metadataBytes(uint256 positionTokenID, (uint256,uint256,uint256,uint256) position, (address,uint256,address,uint256,bool,uint256,uint256) pool) view returns(bytes)
func (_PositionMetadata *PositionMetadataSession) MetadataBytes(positionTokenID *big.Int, position Position, pool StakingPool) ([]byte, error) {
	return _PositionMetadata.Contract.MetadataBytes(&_PositionMetadata.CallOpts, positionTokenID, position, pool)
}

// MetadataBytes is a free data retrieval call binding the contract method 0x721ac18a.
//
// Solidity: function metadataBytes(uint256 positionTokenID, (uint256,uint256,uint256,uint256) position, (address,uint256,address,uint256,bool,uint256,uint256) pool) view returns(bytes)
func (_PositionMetadata *PositionMetadataCallerSession) MetadataBytes(positionTokenID *big.Int, position Position, pool StakingPool) ([]byte, error) {
	return _PositionMetadata.Contract.MetadataBytes(&_PositionMetadata.CallOpts, positionTokenID, position, pool)
}

// MetadataJSON is a free data retrieval call binding the contract method 0x239bdf6c.
//
// Solidity: function metadataJSON(uint256 positionTokenID, (uint256,uint256,uint256,uint256) position, (address,uint256,address,uint256,bool,uint256,uint256) pool) view returns(string)
func (_PositionMetadata *PositionMetadataCaller) MetadataJSON(opts *bind.CallOpts, positionTokenID *big.Int, position Position, pool StakingPool) (string, error) {
	var out []interface{}
	err := _PositionMetadata.contract.Call(opts, &out, "metadataJSON", positionTokenID, position, pool)

	if err != nil {
		return *new(string), err
	}

	out0 := *abi.ConvertType(out[0], new(string)).(*string)

	return out0, err

}

// MetadataJSON is a free data retrieval call binding the contract method 0x239bdf6c.
//
// Solidity: function metadataJSON(uint256 positionTokenID, (uint256,uint256,uint256,uint256) position, (address,uint256,address,uint256,bool,uint256,uint256) pool) view returns(string)
func (_PositionMetadata *PositionMetadataSession) MetadataJSON(positionTokenID *big.Int, position Position, pool StakingPool) (string, error) {
	return _PositionMetadata.Contract.MetadataJSON(&_PositionMetadata.CallOpts, positionTokenID, position, pool)
}

// MetadataJSON is a free data retrieval call binding the contract method 0x239bdf6c.
//
// Solidity: function metadataJSON(uint256 positionTokenID, (uint256,uint256,uint256,uint256) position, (address,uint256,address,uint256,bool,uint256,uint256) pool) view returns(string)
func (_PositionMetadata *PositionMetadataCallerSession) MetadataJSON(positionTokenID *big.Int, position Position, pool StakingPool) (string, error) {
	return _PositionMetadata.Contract.MetadataJSON(&_PositionMetadata.CallOpts, positionTokenID, position, pool)
}

// ReturnTokenSymbol is a free data retrieval call binding the contract method 0xcb91d35d.
//
// Solidity: function returnTokenSymbol(uint256 tokenType, address tokenAddress) view returns(string)
func (_PositionMetadata *PositionMetadataCaller) ReturnTokenSymbol(opts *bind.CallOpts, tokenType *big.Int, tokenAddress common.Address) (string, error) {
	var out []interface{}
	err := _PositionMetadata.contract.Call(opts, &out, "returnTokenSymbol", tokenType, tokenAddress)

	if err != nil {
		return *new(string), err
	}

	out0 := *abi.ConvertType(out[0], new(string)).(*string)

	return out0, err

}

// ReturnTokenSymbol is a free data retrieval call binding the contract method 0xcb91d35d.
//
// Solidity: function returnTokenSymbol(uint256 tokenType, address tokenAddress) view returns(string)
func (_PositionMetadata *PositionMetadataSession) ReturnTokenSymbol(tokenType *big.Int, tokenAddress common.Address) (string, error) {
	return _PositionMetadata.Contract.ReturnTokenSymbol(&_PositionMetadata.CallOpts, tokenType, tokenAddress)
}

// ReturnTokenSymbol is a free data retrieval call binding the contract method 0xcb91d35d.
//
// Solidity: function returnTokenSymbol(uint256 tokenType, address tokenAddress) view returns(string)
func (_PositionMetadata *PositionMetadataCallerSession) ReturnTokenSymbol(tokenType *big.Int, tokenAddress common.Address) (string, error) {
	return _PositionMetadata.Contract.ReturnTokenSymbol(&_PositionMetadata.CallOpts, tokenType, tokenAddress)
}

// ReturnTokenSymbolNative is a free data retrieval call binding the contract method 0x975a3a3b.
//
// Solidity: function returnTokenSymbolNative() view returns(string)
func (_PositionMetadata *PositionMetadataCaller) ReturnTokenSymbolNative(opts *bind.CallOpts) (string, error) {
	var out []interface{}
	err := _PositionMetadata.contract.Call(opts, &out, "returnTokenSymbolNative")

	if err != nil {
		return *new(string), err
	}

	out0 := *abi.ConvertType(out[0], new(string)).(*string)

	return out0, err

}

// ReturnTokenSymbolNative is a free data retrieval call binding the contract method 0x975a3a3b.
//
// Solidity: function returnTokenSymbolNative() view returns(string)
func (_PositionMetadata *PositionMetadataSession) ReturnTokenSymbolNative() (string, error) {
	return _PositionMetadata.Contract.ReturnTokenSymbolNative(&_PositionMetadata.CallOpts)
}

// ReturnTokenSymbolNative is a free data retrieval call binding the contract method 0x975a3a3b.
//
// Solidity: function returnTokenSymbolNative() view returns(string)
func (_PositionMetadata *PositionMetadataCallerSession) ReturnTokenSymbolNative() (string, error) {
	return _PositionMetadata.Contract.ReturnTokenSymbolNative(&_PositionMetadata.CallOpts)
}

func CreatePositionMetadataDeploymentCommand() *cobra.Command {
	var keyfile, nonce, password, value, gasPrice, maxFeePerGas, maxPriorityFeePerGas, rpc string
	var gasLimit uint64
	var simulate bool
	var timeout uint

	cmd := &cobra.Command{
		Use:   "deploy",
		Short: "Deploy a new PositionMetadata contract",
		PreRunE: func(cmd *cobra.Command, args []string) error {
			if keyfile == "" {
				return fmt.Errorf("--keystore not specified (this should be a path to an Ethereum account keystore file)")
			}

			return nil
		},
		RunE: func(cmd *cobra.Command, args []string) error {
			client, clientErr := NewClient(rpc)
			if clientErr != nil {
				return clientErr
			}

			key, keyErr := KeyFromFile(keyfile, password)
			if keyErr != nil {
				return keyErr
			}

			chainIDCtx, cancelChainIDCtx := NewChainContext(timeout)
			defer cancelChainIDCtx()
			chainID, chainIDErr := client.ChainID(chainIDCtx)
			if chainIDErr != nil {
				return chainIDErr
			}

			transactionOpts, transactionOptsErr := bind.NewKeyedTransactorWithChainID(key.PrivateKey, chainID)
			if transactionOptsErr != nil {
				return transactionOptsErr
			}

			SetTransactionParametersFromArgs(transactionOpts, nonce, value, gasPrice, maxFeePerGas, maxPriorityFeePerGas, gasLimit, simulate)

			address, deploymentTransaction, _, deploymentErr := DeployPositionMetadata(
				transactionOpts,
				client,
			)
			if deploymentErr != nil {
				return deploymentErr
			}

			cmd.Printf("Transaction hash: %s\nContract address: %s\n", deploymentTransaction.Hash().Hex(), address.Hex())
			if transactionOpts.NoSend {
				estimationMessage := ethereum.CallMsg{
					From: transactionOpts.From,
					Data: deploymentTransaction.Data(),
				}

				gasEstimationCtx, cancelGasEstimationCtx := NewChainContext(timeout)
				defer cancelGasEstimationCtx()

				gasEstimate, gasEstimateErr := client.EstimateGas(gasEstimationCtx, estimationMessage)
				if gasEstimateErr != nil {
					return gasEstimateErr
				}

				transactionBinary, transactionBinaryErr := deploymentTransaction.MarshalBinary()
				if transactionBinaryErr != nil {
					return transactionBinaryErr
				}
				transactionBinaryHex := hex.EncodeToString(transactionBinary)

				cmd.Printf("Transaction: %s\nEstimated gas: %d\n", transactionBinaryHex, gasEstimate)
			} else {
				cmd.Println("Transaction submitted")
			}

			return nil
		},
	}

	cmd.Flags().StringVar(&rpc, "rpc", "", "URL of the JSONRPC API to use")
	cmd.Flags().StringVar(&keyfile, "keyfile", "", "Path to the keystore file to use for the transaction")
	cmd.Flags().StringVar(&password, "password", "", "Password to use to unlock the keystore (if not specified, you will be prompted for the password when the command executes)")
	cmd.Flags().StringVar(&nonce, "nonce", "", "Nonce to use for the transaction")
	cmd.Flags().StringVar(&value, "value", "", "Value to send with the transaction")
	cmd.Flags().StringVar(&gasPrice, "gas-price", "", "Gas price to use for the transaction")
	cmd.Flags().StringVar(&maxFeePerGas, "max-fee-per-gas", "", "Maximum fee per gas to use for the (EIP-1559) transaction")
	cmd.Flags().StringVar(&maxPriorityFeePerGas, "max-priority-fee-per-gas", "", "Maximum priority fee per gas to use for the (EIP-1559) transaction")
	cmd.Flags().Uint64Var(&gasLimit, "gas-limit", 0, "Gas limit for the transaction")
	cmd.Flags().BoolVar(&simulate, "simulate", false, "Simulate the transaction without sending it")
	cmd.Flags().UintVar(&timeout, "timeout", 60, "Timeout (in seconds) for interactions with the JSONRPC API")

	return cmd
}

func CreateGenerateStakingPeriodElementsCommand() *cobra.Command {
	var contractAddressRaw, rpc string
	var contractAddress common.Address
	var timeout uint

	var blockNumberRaw, fromAddressRaw string
	var pending bool

	var yPos string

	var titleYPos string

	var stakeTimestampStr string

	var unlockTimestampStr string

	var cooldownStr string

	var capture0 string

	cmd := &cobra.Command{
		Use:   "generate-staking-period-elements",
		Short: "Call the GenerateStakingPeriodElements view method on a PositionMetadata contract",
		PreRunE: func(cmd *cobra.Command, args []string) error {
			if contractAddressRaw == "" {
				return fmt.Errorf("--contract not specified")
			} else if !common.IsHexAddress(contractAddressRaw) {
				return fmt.Errorf("--contract is not a valid Ethereum address")
			}
			contractAddress = common.HexToAddress(contractAddressRaw)

			return nil
		},
		RunE: func(cmd *cobra.Command, args []string) error {
			client, clientErr := NewClient(rpc)
			if clientErr != nil {
				return clientErr
			}

			contract, contractErr := NewPositionMetadata(contractAddress, client)
			if contractErr != nil {
				return contractErr
			}

			callOpts := bind.CallOpts{}
			SetCallParametersFromArgs(&callOpts, pending, fromAddressRaw, blockNumberRaw)

			session := PositionMetadataCallerSession{
				Contract: &contract.PositionMetadataCaller,
				CallOpts: callOpts,
			}

			var callErr error
			capture0, callErr = session.GenerateStakingPeriodElements(
				yPos,
				titleYPos,
				stakeTimestampStr,
				unlockTimestampStr,
				cooldownStr,
			)
			if callErr != nil {
				return callErr
			}

			cmd.Printf("0: %s\n", capture0)

			return nil
		},
	}

	cmd.Flags().StringVar(&rpc, "rpc", "", "URL of the JSONRPC API to use")
	cmd.Flags().StringVar(&blockNumberRaw, "block", "", "Block number at which to call the view method")
	cmd.Flags().BoolVar(&pending, "pending", false, "Set this flag if it's ok to call the view method against pending state")
	cmd.Flags().UintVar(&timeout, "timeout", 60, "Timeout (in seconds) for interactions with the JSONRPC API")
	cmd.Flags().StringVar(&contractAddressRaw, "contract", "", "Address of the contract to interact with")
	cmd.Flags().StringVar(&fromAddressRaw, "from", "", "Optional address for caller of the view method")

	cmd.Flags().StringVar(&yPos, "y-pos", "", "y-pos argument")
	cmd.Flags().StringVar(&titleYPos, "title-y-pos", "", "title-y-pos argument")
	cmd.Flags().StringVar(&stakeTimestampStr, "stake-timestamp-str", "", "stake-timestamp-str argument")
	cmd.Flags().StringVar(&unlockTimestampStr, "unlock-timestamp-str", "", "unlock-timestamp-str argument")
	cmd.Flags().StringVar(&cooldownStr, "cooldown-str", "", "cooldown-str argument")

	return cmd
}
func CreateGenerateTokenIdOrAmountElementCommand() *cobra.Command {
	var contractAddressRaw, rpc string
	var contractAddress common.Address
	var timeout uint

	var blockNumberRaw, fromAddressRaw string
	var pending bool

	var tokenIdOrAmountString string

	var amountOrTokenIDString string

	var capture0 string

	cmd := &cobra.Command{
		Use:   "generate-token-id-or-amount-element",
		Short: "Call the GenerateTokenIdOrAmountElement view method on a PositionMetadata contract",
		PreRunE: func(cmd *cobra.Command, args []string) error {
			if contractAddressRaw == "" {
				return fmt.Errorf("--contract not specified")
			} else if !common.IsHexAddress(contractAddressRaw) {
				return fmt.Errorf("--contract is not a valid Ethereum address")
			}
			contractAddress = common.HexToAddress(contractAddressRaw)

			return nil
		},
		RunE: func(cmd *cobra.Command, args []string) error {
			client, clientErr := NewClient(rpc)
			if clientErr != nil {
				return clientErr
			}

			contract, contractErr := NewPositionMetadata(contractAddress, client)
			if contractErr != nil {
				return contractErr
			}

			callOpts := bind.CallOpts{}
			SetCallParametersFromArgs(&callOpts, pending, fromAddressRaw, blockNumberRaw)

			session := PositionMetadataCallerSession{
				Contract: &contract.PositionMetadataCaller,
				CallOpts: callOpts,
			}

			var callErr error
			capture0, callErr = session.GenerateTokenIdOrAmountElement(
				tokenIdOrAmountString,
				amountOrTokenIDString,
			)
			if callErr != nil {
				return callErr
			}

			cmd.Printf("0: %s\n", capture0)

			return nil
		},
	}

	cmd.Flags().StringVar(&rpc, "rpc", "", "URL of the JSONRPC API to use")
	cmd.Flags().StringVar(&blockNumberRaw, "block", "", "Block number at which to call the view method")
	cmd.Flags().BoolVar(&pending, "pending", false, "Set this flag if it's ok to call the view method against pending state")
	cmd.Flags().UintVar(&timeout, "timeout", 60, "Timeout (in seconds) for interactions with the JSONRPC API")
	cmd.Flags().StringVar(&contractAddressRaw, "contract", "", "Address of the contract to interact with")
	cmd.Flags().StringVar(&fromAddressRaw, "from", "", "Optional address for caller of the view method")

	cmd.Flags().StringVar(&tokenIdOrAmountString, "token-id-or-amount-string", "", "token-id-or-amount-string argument")
	cmd.Flags().StringVar(&amountOrTokenIDString, "amount-or-token-id-string", "", "amount-or-token-id-string argument")

	return cmd
}
func CreateGenerateTokenTypeElementCommand() *cobra.Command {
	var contractAddressRaw, rpc string
	var contractAddress common.Address
	var timeout uint

	var blockNumberRaw, fromAddressRaw string
	var pending bool

	var tokenTypeString string

	var tokenAddressString string

	var amountOrTokenIdString string

	var poolIdString string

	var capture0 string

	cmd := &cobra.Command{
		Use:   "generate-token-type-element",
		Short: "Call the GenerateTokenTypeElement view method on a PositionMetadata contract",
		PreRunE: func(cmd *cobra.Command, args []string) error {
			if contractAddressRaw == "" {
				return fmt.Errorf("--contract not specified")
			} else if !common.IsHexAddress(contractAddressRaw) {
				return fmt.Errorf("--contract is not a valid Ethereum address")
			}
			contractAddress = common.HexToAddress(contractAddressRaw)

			return nil
		},
		RunE: func(cmd *cobra.Command, args []string) error {
			client, clientErr := NewClient(rpc)
			if clientErr != nil {
				return clientErr
			}

			contract, contractErr := NewPositionMetadata(contractAddress, client)
			if contractErr != nil {
				return contractErr
			}

			callOpts := bind.CallOpts{}
			SetCallParametersFromArgs(&callOpts, pending, fromAddressRaw, blockNumberRaw)

			session := PositionMetadataCallerSession{
				Contract: &contract.PositionMetadataCaller,
				CallOpts: callOpts,
			}

			var callErr error
			capture0, callErr = session.GenerateTokenTypeElement(
				tokenTypeString,
				tokenAddressString,
				amountOrTokenIdString,
				poolIdString,
			)
			if callErr != nil {
				return callErr
			}

			cmd.Printf("0: %s\n", capture0)

			return nil
		},
	}

	cmd.Flags().StringVar(&rpc, "rpc", "", "URL of the JSONRPC API to use")
	cmd.Flags().StringVar(&blockNumberRaw, "block", "", "Block number at which to call the view method")
	cmd.Flags().BoolVar(&pending, "pending", false, "Set this flag if it's ok to call the view method against pending state")
	cmd.Flags().UintVar(&timeout, "timeout", 60, "Timeout (in seconds) for interactions with the JSONRPC API")
	cmd.Flags().StringVar(&contractAddressRaw, "contract", "", "Address of the contract to interact with")
	cmd.Flags().StringVar(&fromAddressRaw, "from", "", "Optional address for caller of the view method")

	cmd.Flags().StringVar(&tokenTypeString, "token-type-string", "", "token-type-string argument")
	cmd.Flags().StringVar(&tokenAddressString, "token-address-string", "", "token-address-string argument")
	cmd.Flags().StringVar(&amountOrTokenIdString, "amount-or-token-id-string", "", "amount-or-token-id-string argument")
	cmd.Flags().StringVar(&poolIdString, "pool-id-string", "", "pool-id-string argument")

	return cmd
}
func CreateGetAddressSliceCommand() *cobra.Command {
	var contractAddressRaw, rpc string
	var contractAddress common.Address
	var timeout uint

	var blockNumberRaw, fromAddressRaw string
	var pending bool

	var tokenAddress common.Address
	var tokenAddressRaw string

	var capture0 string

	cmd := &cobra.Command{
		Use:   "get-address-slice",
		Short: "Call the GetAddressSlice view method on a PositionMetadata contract",
		PreRunE: func(cmd *cobra.Command, args []string) error {
			if contractAddressRaw == "" {
				return fmt.Errorf("--contract not specified")
			} else if !common.IsHexAddress(contractAddressRaw) {
				return fmt.Errorf("--contract is not a valid Ethereum address")
			}
			contractAddress = common.HexToAddress(contractAddressRaw)

			if tokenAddressRaw == "" {
				return fmt.Errorf("--token-address argument not specified")
			} else if !common.IsHexAddress(tokenAddressRaw) {
				return fmt.Errorf("--token-address argument is not a valid Ethereum address")
			}
			tokenAddress = common.HexToAddress(tokenAddressRaw)

			return nil
		},
		RunE: func(cmd *cobra.Command, args []string) error {
			client, clientErr := NewClient(rpc)
			if clientErr != nil {
				return clientErr
			}

			contract, contractErr := NewPositionMetadata(contractAddress, client)
			if contractErr != nil {
				return contractErr
			}

			callOpts := bind.CallOpts{}
			SetCallParametersFromArgs(&callOpts, pending, fromAddressRaw, blockNumberRaw)

			session := PositionMetadataCallerSession{
				Contract: &contract.PositionMetadataCaller,
				CallOpts: callOpts,
			}

			var callErr error
			capture0, callErr = session.GetAddressSlice(
				tokenAddress,
			)
			if callErr != nil {
				return callErr
			}

			cmd.Printf("0: %s\n", capture0)

			return nil
		},
	}

	cmd.Flags().StringVar(&rpc, "rpc", "", "URL of the JSONRPC API to use")
	cmd.Flags().StringVar(&blockNumberRaw, "block", "", "Block number at which to call the view method")
	cmd.Flags().BoolVar(&pending, "pending", false, "Set this flag if it's ok to call the view method against pending state")
	cmd.Flags().UintVar(&timeout, "timeout", 60, "Timeout (in seconds) for interactions with the JSONRPC API")
	cmd.Flags().StringVar(&contractAddressRaw, "contract", "", "Address of the contract to interact with")
	cmd.Flags().StringVar(&fromAddressRaw, "from", "", "Optional address for caller of the view method")

	cmd.Flags().StringVar(&tokenAddressRaw, "token-address", "", "token-address argument (common.Address)")

	return cmd
}
func CreateMetadataBytesCommand() *cobra.Command {
	var contractAddressRaw, rpc string
	var contractAddress common.Address
	var timeout uint

	var blockNumberRaw, fromAddressRaw string
	var pending bool

	var positionTokenID *big.Int
	var positionTokenIDRaw string
	var position Position
	var positionRaw string
	var pool StakingPool
	var poolRaw string

	var capture0 []byte

	cmd := &cobra.Command{
		Use:   "metadata-bytes",
		Short: "Call the MetadataBytes view method on a PositionMetadata contract",
		PreRunE: func(cmd *cobra.Command, args []string) error {
			if contractAddressRaw == "" {
				return fmt.Errorf("--contract not specified")
			} else if !common.IsHexAddress(contractAddressRaw) {
				return fmt.Errorf("--contract is not a valid Ethereum address")
			}
			contractAddress = common.HexToAddress(contractAddressRaw)

			if positionTokenIDRaw == "" {
				return fmt.Errorf("--position-token-id argument not specified")
			}
			positionTokenID = new(big.Int)
			positionTokenID.SetString(positionTokenIDRaw, 0)

			if positionRaw == "" {
				return fmt.Errorf("--position argument not specified")
			} else if strings.HasPrefix(positionRaw, "@") {
				filename := strings.TrimPrefix(positionRaw, "@")
				contents, readErr := os.ReadFile(filename)
				if readErr != nil {
					return readErr
				}
				unmarshalErr := json.Unmarshal(contents, &position)
				if unmarshalErr != nil {
					return unmarshalErr
				}
			} else {
				unmarshalErr := json.Unmarshal([]byte(positionRaw), &position)
				if unmarshalErr != nil {
					return unmarshalErr
				}
			}

			if poolRaw == "" {
				return fmt.Errorf("--pool argument not specified")
			} else if strings.HasPrefix(poolRaw, "@") {
				filename := strings.TrimPrefix(poolRaw, "@")
				contents, readErr := os.ReadFile(filename)
				if readErr != nil {
					return readErr
				}
				unmarshalErr := json.Unmarshal(contents, &pool)
				if unmarshalErr != nil {
					return unmarshalErr
				}
			} else {
				unmarshalErr := json.Unmarshal([]byte(poolRaw), &pool)
				if unmarshalErr != nil {
					return unmarshalErr
				}
			}

			return nil
		},
		RunE: func(cmd *cobra.Command, args []string) error {
			client, clientErr := NewClient(rpc)
			if clientErr != nil {
				return clientErr
			}

			contract, contractErr := NewPositionMetadata(contractAddress, client)
			if contractErr != nil {
				return contractErr
			}

			callOpts := bind.CallOpts{}
			SetCallParametersFromArgs(&callOpts, pending, fromAddressRaw, blockNumberRaw)

			session := PositionMetadataCallerSession{
				Contract: &contract.PositionMetadataCaller,
				CallOpts: callOpts,
			}

			var callErr error
			capture0, callErr = session.MetadataBytes(
				positionTokenID,
				position,
				pool,
			)
			if callErr != nil {
				return callErr
			}

			cmd.Printf("0: %v\n", capture0)

			return nil
		},
	}

	cmd.Flags().StringVar(&rpc, "rpc", "", "URL of the JSONRPC API to use")
	cmd.Flags().StringVar(&blockNumberRaw, "block", "", "Block number at which to call the view method")
	cmd.Flags().BoolVar(&pending, "pending", false, "Set this flag if it's ok to call the view method against pending state")
	cmd.Flags().UintVar(&timeout, "timeout", 60, "Timeout (in seconds) for interactions with the JSONRPC API")
	cmd.Flags().StringVar(&contractAddressRaw, "contract", "", "Address of the contract to interact with")
	cmd.Flags().StringVar(&fromAddressRaw, "from", "", "Optional address for caller of the view method")

	cmd.Flags().StringVar(&positionTokenIDRaw, "position-token-id", "", "position-token-id argument")
	cmd.Flags().StringVar(&positionRaw, "position", "", "position argument (Position)")
	cmd.Flags().StringVar(&poolRaw, "pool", "", "pool argument (StakingPool)")

	return cmd
}
func CreateReturnTokenSymbolCommand() *cobra.Command {
	var contractAddressRaw, rpc string
	var contractAddress common.Address
	var timeout uint

	var blockNumberRaw, fromAddressRaw string
	var pending bool

	var tokenType *big.Int
	var tokenTypeRaw string
	var tokenAddress common.Address
	var tokenAddressRaw string

	var capture0 string

	cmd := &cobra.Command{
		Use:   "return-token-symbol",
		Short: "Call the ReturnTokenSymbol view method on a PositionMetadata contract",
		PreRunE: func(cmd *cobra.Command, args []string) error {
			if contractAddressRaw == "" {
				return fmt.Errorf("--contract not specified")
			} else if !common.IsHexAddress(contractAddressRaw) {
				return fmt.Errorf("--contract is not a valid Ethereum address")
			}
			contractAddress = common.HexToAddress(contractAddressRaw)

			if tokenTypeRaw == "" {
				return fmt.Errorf("--token-type argument not specified")
			}
			tokenType = new(big.Int)
			tokenType.SetString(tokenTypeRaw, 0)

			if tokenAddressRaw == "" {
				return fmt.Errorf("--token-address argument not specified")
			} else if !common.IsHexAddress(tokenAddressRaw) {
				return fmt.Errorf("--token-address argument is not a valid Ethereum address")
			}
			tokenAddress = common.HexToAddress(tokenAddressRaw)

			return nil
		},
		RunE: func(cmd *cobra.Command, args []string) error {
			client, clientErr := NewClient(rpc)
			if clientErr != nil {
				return clientErr
			}

			contract, contractErr := NewPositionMetadata(contractAddress, client)
			if contractErr != nil {
				return contractErr
			}

			callOpts := bind.CallOpts{}
			SetCallParametersFromArgs(&callOpts, pending, fromAddressRaw, blockNumberRaw)

			session := PositionMetadataCallerSession{
				Contract: &contract.PositionMetadataCaller,
				CallOpts: callOpts,
			}

			var callErr error
			capture0, callErr = session.ReturnTokenSymbol(
				tokenType,
				tokenAddress,
			)
			if callErr != nil {
				return callErr
			}

			cmd.Printf("0: %s\n", capture0)

			return nil
		},
	}

	cmd.Flags().StringVar(&rpc, "rpc", "", "URL of the JSONRPC API to use")
	cmd.Flags().StringVar(&blockNumberRaw, "block", "", "Block number at which to call the view method")
	cmd.Flags().BoolVar(&pending, "pending", false, "Set this flag if it's ok to call the view method against pending state")
	cmd.Flags().UintVar(&timeout, "timeout", 60, "Timeout (in seconds) for interactions with the JSONRPC API")
	cmd.Flags().StringVar(&contractAddressRaw, "contract", "", "Address of the contract to interact with")
	cmd.Flags().StringVar(&fromAddressRaw, "from", "", "Optional address for caller of the view method")

	cmd.Flags().StringVar(&tokenTypeRaw, "token-type", "", "token-type argument")
	cmd.Flags().StringVar(&tokenAddressRaw, "token-address", "", "token-address argument (common.Address)")

	return cmd
}
func CreateReturnTokenSymbolNativeCommand() *cobra.Command {
	var contractAddressRaw, rpc string
	var contractAddress common.Address
	var timeout uint

	var blockNumberRaw, fromAddressRaw string
	var pending bool

	var capture0 string

	cmd := &cobra.Command{
		Use:   "return-token-symbol-native",
		Short: "Call the ReturnTokenSymbolNative view method on a PositionMetadata contract",
		PreRunE: func(cmd *cobra.Command, args []string) error {
			if contractAddressRaw == "" {
				return fmt.Errorf("--contract not specified")
			} else if !common.IsHexAddress(contractAddressRaw) {
				return fmt.Errorf("--contract is not a valid Ethereum address")
			}
			contractAddress = common.HexToAddress(contractAddressRaw)

			return nil
		},
		RunE: func(cmd *cobra.Command, args []string) error {
			client, clientErr := NewClient(rpc)
			if clientErr != nil {
				return clientErr
			}

			contract, contractErr := NewPositionMetadata(contractAddress, client)
			if contractErr != nil {
				return contractErr
			}

			callOpts := bind.CallOpts{}
			SetCallParametersFromArgs(&callOpts, pending, fromAddressRaw, blockNumberRaw)

			session := PositionMetadataCallerSession{
				Contract: &contract.PositionMetadataCaller,
				CallOpts: callOpts,
			}

			var callErr error
			capture0, callErr = session.ReturnTokenSymbolNative()
			if callErr != nil {
				return callErr
			}

			cmd.Printf("0: %s\n", capture0)

			return nil
		},
	}

	cmd.Flags().StringVar(&rpc, "rpc", "", "URL of the JSONRPC API to use")
	cmd.Flags().StringVar(&blockNumberRaw, "block", "", "Block number at which to call the view method")
	cmd.Flags().BoolVar(&pending, "pending", false, "Set this flag if it's ok to call the view method against pending state")
	cmd.Flags().UintVar(&timeout, "timeout", 60, "Timeout (in seconds) for interactions with the JSONRPC API")
	cmd.Flags().StringVar(&contractAddressRaw, "contract", "", "Address of the contract to interact with")
	cmd.Flags().StringVar(&fromAddressRaw, "from", "", "Optional address for caller of the view method")

	return cmd
}
func CreateGenerateLogoCommand() *cobra.Command {
	var contractAddressRaw, rpc string
	var contractAddress common.Address
	var timeout uint

	var blockNumberRaw, fromAddressRaw string
	var pending bool

	var capture0 string

	cmd := &cobra.Command{
		Use:   "generate-logo",
		Short: "Call the GenerateLogo view method on a PositionMetadata contract",
		PreRunE: func(cmd *cobra.Command, args []string) error {
			if contractAddressRaw == "" {
				return fmt.Errorf("--contract not specified")
			} else if !common.IsHexAddress(contractAddressRaw) {
				return fmt.Errorf("--contract is not a valid Ethereum address")
			}
			contractAddress = common.HexToAddress(contractAddressRaw)

			return nil
		},
		RunE: func(cmd *cobra.Command, args []string) error {
			client, clientErr := NewClient(rpc)
			if clientErr != nil {
				return clientErr
			}

			contract, contractErr := NewPositionMetadata(contractAddress, client)
			if contractErr != nil {
				return contractErr
			}

			callOpts := bind.CallOpts{}
			SetCallParametersFromArgs(&callOpts, pending, fromAddressRaw, blockNumberRaw)

			session := PositionMetadataCallerSession{
				Contract: &contract.PositionMetadataCaller,
				CallOpts: callOpts,
			}

			var callErr error
			capture0, callErr = session.GenerateLogo()
			if callErr != nil {
				return callErr
			}

			cmd.Printf("0: %s\n", capture0)

			return nil
		},
	}

	cmd.Flags().StringVar(&rpc, "rpc", "", "URL of the JSONRPC API to use")
	cmd.Flags().StringVar(&blockNumberRaw, "block", "", "Block number at which to call the view method")
	cmd.Flags().BoolVar(&pending, "pending", false, "Set this flag if it's ok to call the view method against pending state")
	cmd.Flags().UintVar(&timeout, "timeout", 60, "Timeout (in seconds) for interactions with the JSONRPC API")
	cmd.Flags().StringVar(&contractAddressRaw, "contract", "", "Address of the contract to interact with")
	cmd.Flags().StringVar(&fromAddressRaw, "from", "", "Optional address for caller of the view method")

	return cmd
}
func CreateGenerateTokenSymbolCommand() *cobra.Command {
	var contractAddressRaw, rpc string
	var contractAddress common.Address
	var timeout uint

	var blockNumberRaw, fromAddressRaw string
	var pending bool

	var tokenSymbolString string

	var capture0 string

	cmd := &cobra.Command{
		Use:   "generate-token-symbol",
		Short: "Call the GenerateTokenSymbol view method on a PositionMetadata contract",
		PreRunE: func(cmd *cobra.Command, args []string) error {
			if contractAddressRaw == "" {
				return fmt.Errorf("--contract not specified")
			} else if !common.IsHexAddress(contractAddressRaw) {
				return fmt.Errorf("--contract is not a valid Ethereum address")
			}
			contractAddress = common.HexToAddress(contractAddressRaw)

			return nil
		},
		RunE: func(cmd *cobra.Command, args []string) error {
			client, clientErr := NewClient(rpc)
			if clientErr != nil {
				return clientErr
			}

			contract, contractErr := NewPositionMetadata(contractAddress, client)
			if contractErr != nil {
				return contractErr
			}

			callOpts := bind.CallOpts{}
			SetCallParametersFromArgs(&callOpts, pending, fromAddressRaw, blockNumberRaw)

			session := PositionMetadataCallerSession{
				Contract: &contract.PositionMetadataCaller,
				CallOpts: callOpts,
			}

			var callErr error
			capture0, callErr = session.GenerateTokenSymbol(
				tokenSymbolString,
			)
			if callErr != nil {
				return callErr
			}

			cmd.Printf("0: %s\n", capture0)

			return nil
		},
	}

	cmd.Flags().StringVar(&rpc, "rpc", "", "URL of the JSONRPC API to use")
	cmd.Flags().StringVar(&blockNumberRaw, "block", "", "Block number at which to call the view method")
	cmd.Flags().BoolVar(&pending, "pending", false, "Set this flag if it's ok to call the view method against pending state")
	cmd.Flags().UintVar(&timeout, "timeout", 60, "Timeout (in seconds) for interactions with the JSONRPC API")
	cmd.Flags().StringVar(&contractAddressRaw, "contract", "", "Address of the contract to interact with")
	cmd.Flags().StringVar(&fromAddressRaw, "from", "", "Optional address for caller of the view method")

	cmd.Flags().StringVar(&tokenSymbolString, "token-symbol-string", "", "token-symbol-string argument")

	return cmd
}
func CreateMetadataCommand() *cobra.Command {
	var contractAddressRaw, rpc string
	var contractAddress common.Address
	var timeout uint

	var blockNumberRaw, fromAddressRaw string
	var pending bool

	var positionTokenID *big.Int
	var positionTokenIDRaw string
	var position Position
	var positionRaw string
	var pool StakingPool
	var poolRaw string

	var capture0 string

	cmd := &cobra.Command{
		Use:   "metadata",
		Short: "Call the Metadata view method on a PositionMetadata contract",
		PreRunE: func(cmd *cobra.Command, args []string) error {
			if contractAddressRaw == "" {
				return fmt.Errorf("--contract not specified")
			} else if !common.IsHexAddress(contractAddressRaw) {
				return fmt.Errorf("--contract is not a valid Ethereum address")
			}
			contractAddress = common.HexToAddress(contractAddressRaw)

			if positionTokenIDRaw == "" {
				return fmt.Errorf("--position-token-id argument not specified")
			}
			positionTokenID = new(big.Int)
			positionTokenID.SetString(positionTokenIDRaw, 0)

			if positionRaw == "" {
				return fmt.Errorf("--position argument not specified")
			} else if strings.HasPrefix(positionRaw, "@") {
				filename := strings.TrimPrefix(positionRaw, "@")
				contents, readErr := os.ReadFile(filename)
				if readErr != nil {
					return readErr
				}
				unmarshalErr := json.Unmarshal(contents, &position)
				if unmarshalErr != nil {
					return unmarshalErr
				}
			} else {
				unmarshalErr := json.Unmarshal([]byte(positionRaw), &position)
				if unmarshalErr != nil {
					return unmarshalErr
				}
			}

			if poolRaw == "" {
				return fmt.Errorf("--pool argument not specified")
			} else if strings.HasPrefix(poolRaw, "@") {
				filename := strings.TrimPrefix(poolRaw, "@")
				contents, readErr := os.ReadFile(filename)
				if readErr != nil {
					return readErr
				}
				unmarshalErr := json.Unmarshal(contents, &pool)
				if unmarshalErr != nil {
					return unmarshalErr
				}
			} else {
				unmarshalErr := json.Unmarshal([]byte(poolRaw), &pool)
				if unmarshalErr != nil {
					return unmarshalErr
				}
			}

			return nil
		},
		RunE: func(cmd *cobra.Command, args []string) error {
			client, clientErr := NewClient(rpc)
			if clientErr != nil {
				return clientErr
			}

			contract, contractErr := NewPositionMetadata(contractAddress, client)
			if contractErr != nil {
				return contractErr
			}

			callOpts := bind.CallOpts{}
			SetCallParametersFromArgs(&callOpts, pending, fromAddressRaw, blockNumberRaw)

			session := PositionMetadataCallerSession{
				Contract: &contract.PositionMetadataCaller,
				CallOpts: callOpts,
			}

			var callErr error
			capture0, callErr = session.Metadata(
				positionTokenID,
				position,
				pool,
			)
			if callErr != nil {
				return callErr
			}

			cmd.Printf("0: %s\n", capture0)

			return nil
		},
	}

	cmd.Flags().StringVar(&rpc, "rpc", "", "URL of the JSONRPC API to use")
	cmd.Flags().StringVar(&blockNumberRaw, "block", "", "Block number at which to call the view method")
	cmd.Flags().BoolVar(&pending, "pending", false, "Set this flag if it's ok to call the view method against pending state")
	cmd.Flags().UintVar(&timeout, "timeout", 60, "Timeout (in seconds) for interactions with the JSONRPC API")
	cmd.Flags().StringVar(&contractAddressRaw, "contract", "", "Address of the contract to interact with")
	cmd.Flags().StringVar(&fromAddressRaw, "from", "", "Optional address for caller of the view method")

	cmd.Flags().StringVar(&positionTokenIDRaw, "position-token-id", "", "position-token-id argument")
	cmd.Flags().StringVar(&positionRaw, "position", "", "position argument (Position)")
	cmd.Flags().StringVar(&poolRaw, "pool", "", "pool argument (StakingPool)")

	return cmd
}
func CreateMetadataJsonCommand() *cobra.Command {
	var contractAddressRaw, rpc string
	var contractAddress common.Address
	var timeout uint

	var blockNumberRaw, fromAddressRaw string
	var pending bool

	var positionTokenID *big.Int
	var positionTokenIDRaw string
	var position Position
	var positionRaw string
	var pool StakingPool
	var poolRaw string

	var capture0 string

	cmd := &cobra.Command{
		Use:   "metadata-json",
		Short: "Call the MetadataJSON view method on a PositionMetadata contract",
		PreRunE: func(cmd *cobra.Command, args []string) error {
			if contractAddressRaw == "" {
				return fmt.Errorf("--contract not specified")
			} else if !common.IsHexAddress(contractAddressRaw) {
				return fmt.Errorf("--contract is not a valid Ethereum address")
			}
			contractAddress = common.HexToAddress(contractAddressRaw)

			if positionTokenIDRaw == "" {
				return fmt.Errorf("--position-token-id argument not specified")
			}
			positionTokenID = new(big.Int)
			positionTokenID.SetString(positionTokenIDRaw, 0)

			if positionRaw == "" {
				return fmt.Errorf("--position argument not specified")
			} else if strings.HasPrefix(positionRaw, "@") {
				filename := strings.TrimPrefix(positionRaw, "@")
				contents, readErr := os.ReadFile(filename)
				if readErr != nil {
					return readErr
				}
				unmarshalErr := json.Unmarshal(contents, &position)
				if unmarshalErr != nil {
					return unmarshalErr
				}
			} else {
				unmarshalErr := json.Unmarshal([]byte(positionRaw), &position)
				if unmarshalErr != nil {
					return unmarshalErr
				}
			}

			if poolRaw == "" {
				return fmt.Errorf("--pool argument not specified")
			} else if strings.HasPrefix(poolRaw, "@") {
				filename := strings.TrimPrefix(poolRaw, "@")
				contents, readErr := os.ReadFile(filename)
				if readErr != nil {
					return readErr
				}
				unmarshalErr := json.Unmarshal(contents, &pool)
				if unmarshalErr != nil {
					return unmarshalErr
				}
			} else {
				unmarshalErr := json.Unmarshal([]byte(poolRaw), &pool)
				if unmarshalErr != nil {
					return unmarshalErr
				}
			}

			return nil
		},
		RunE: func(cmd *cobra.Command, args []string) error {
			client, clientErr := NewClient(rpc)
			if clientErr != nil {
				return clientErr
			}

			contract, contractErr := NewPositionMetadata(contractAddress, client)
			if contractErr != nil {
				return contractErr
			}

			callOpts := bind.CallOpts{}
			SetCallParametersFromArgs(&callOpts, pending, fromAddressRaw, blockNumberRaw)

			session := PositionMetadataCallerSession{
				Contract: &contract.PositionMetadataCaller,
				CallOpts: callOpts,
			}

			var callErr error
			capture0, callErr = session.MetadataJSON(
				positionTokenID,
				position,
				pool,
			)
			if callErr != nil {
				return callErr
			}

			cmd.Printf("0: %s\n", capture0)

			return nil
		},
	}

	cmd.Flags().StringVar(&rpc, "rpc", "", "URL of the JSONRPC API to use")
	cmd.Flags().StringVar(&blockNumberRaw, "block", "", "Block number at which to call the view method")
	cmd.Flags().BoolVar(&pending, "pending", false, "Set this flag if it's ok to call the view method against pending state")
	cmd.Flags().UintVar(&timeout, "timeout", 60, "Timeout (in seconds) for interactions with the JSONRPC API")
	cmd.Flags().StringVar(&contractAddressRaw, "contract", "", "Address of the contract to interact with")
	cmd.Flags().StringVar(&fromAddressRaw, "from", "", "Optional address for caller of the view method")

	cmd.Flags().StringVar(&positionTokenIDRaw, "position-token-id", "", "position-token-id argument")
	cmd.Flags().StringVar(&positionRaw, "position", "", "position argument (Position)")
	cmd.Flags().StringVar(&poolRaw, "pool", "", "pool argument (StakingPool)")

	return cmd
}

var ErrNoRPCURL error = errors.New("no RPC URL provided -- please pass an RPC URL from the command line or set the POSITION_METADATA_RPC_URL environment variable")

// Generates an Ethereum client to the JSONRPC API at the given URL. If rpcURL is empty, then it
// attempts to read the RPC URL from the POSITION_METADATA_RPC_URL environment variable. If that is empty,
// too, then it returns an error.
func NewClient(rpcURL string) (*ethclient.Client, error) {
	if rpcURL == "" {
		rpcURL = os.Getenv("POSITION_METADATA_RPC_URL")
	}

	if rpcURL == "" {
		return nil, ErrNoRPCURL
	}

	client, err := ethclient.Dial(rpcURL)
	return client, err
}

// Creates a new context to be used when interacting with the chain client.
func NewChainContext(timeout uint) (context.Context, context.CancelFunc) {
	baseCtx := context.Background()
	parsedTimeout := time.Duration(timeout) * time.Second
	ctx, cancel := context.WithTimeout(baseCtx, parsedTimeout)
	return ctx, cancel
}

// Unlocks a key from a keystore (byte contents of a keystore file) with the given password.
func UnlockKeystore(keystoreData []byte, password string) (*keystore.Key, error) {
	key, err := keystore.DecryptKey(keystoreData, password)
	return key, err
}

// Loads a key from file, prompting the user for the password if it is not provided as a function argument.
func KeyFromFile(keystoreFile string, password string) (*keystore.Key, error) {
	var emptyKey *keystore.Key
	keystoreContent, readErr := os.ReadFile(keystoreFile)
	if readErr != nil {
		return emptyKey, readErr
	}

	// If password is "", prompt user for password.
	if password == "" {
		fmt.Printf("Please provide a password for keystore (%s): ", keystoreFile)
		passwordRaw, inputErr := term.ReadPassword(int(os.Stdin.Fd()))
		if inputErr != nil {
			return emptyKey, fmt.Errorf("error reading password: %s", inputErr.Error())
		}
		fmt.Print("\n")
		password = string(passwordRaw)
	}

	key, err := UnlockKeystore(keystoreContent, password)
	return key, err
}

// This method is used to set the parameters on a view call from command line arguments (represented mostly as
// strings).
func SetCallParametersFromArgs(opts *bind.CallOpts, pending bool, fromAddress, blockNumber string) {
	if pending {
		opts.Pending = true
	}

	if fromAddress != "" {
		opts.From = common.HexToAddress(fromAddress)
	}

	if blockNumber != "" {
		opts.BlockNumber = new(big.Int)
		opts.BlockNumber.SetString(blockNumber, 0)
	}
}

// This method is used to set the parameters on a transaction from command line arguments (represented mostly as
// strings).
func SetTransactionParametersFromArgs(opts *bind.TransactOpts, nonce, value, gasPrice, maxFeePerGas, maxPriorityFeePerGas string, gasLimit uint64, noSend bool) {
	if nonce != "" {
		opts.Nonce = new(big.Int)
		opts.Nonce.SetString(nonce, 0)
	}

	if value != "" {
		opts.Value = new(big.Int)
		opts.Value.SetString(value, 0)
	}

	if gasPrice != "" {
		opts.GasPrice = new(big.Int)
		opts.GasPrice.SetString(gasPrice, 0)
	}

	if maxFeePerGas != "" {
		opts.GasFeeCap = new(big.Int)
		opts.GasFeeCap.SetString(maxFeePerGas, 0)
	}

	if maxPriorityFeePerGas != "" {
		opts.GasTipCap = new(big.Int)
		opts.GasTipCap.SetString(maxPriorityFeePerGas, 0)
	}

	if gasLimit != 0 {
		opts.GasLimit = gasLimit
	}

	opts.NoSend = noSend
}

func CreatePositionMetadataCommand() *cobra.Command {
	cmd := &cobra.Command{
		Use:   "position-metadata",
		Short: "Interact with the PositionMetadata contract",
		Run: func(cmd *cobra.Command, args []string) {
			cmd.Help()
		},
	}

	cmd.SetOut(os.Stdout)

	DeployGroup := &cobra.Group{
		ID: "deploy", Title: "Commands which deploy contracts",
	}
	cmd.AddGroup(DeployGroup)
	ViewGroup := &cobra.Group{
		ID: "view", Title: "Commands which view contract state",
	}
	TransactGroup := &cobra.Group{
		ID: "transact", Title: "Commands which submit transactions",
	}
	cmd.AddGroup(ViewGroup, TransactGroup)

	cmdDeployPositionMetadata := CreatePositionMetadataDeploymentCommand()
	cmdDeployPositionMetadata.GroupID = DeployGroup.ID
	cmd.AddCommand(cmdDeployPositionMetadata)

	cmdViewGenerateStakingPeriodElements := CreateGenerateStakingPeriodElementsCommand()
	cmdViewGenerateStakingPeriodElements.GroupID = ViewGroup.ID
	cmd.AddCommand(cmdViewGenerateStakingPeriodElements)
	cmdViewGenerateTokenIdOrAmountElement := CreateGenerateTokenIdOrAmountElementCommand()
	cmdViewGenerateTokenIdOrAmountElement.GroupID = ViewGroup.ID
	cmd.AddCommand(cmdViewGenerateTokenIdOrAmountElement)
	cmdViewGenerateTokenTypeElement := CreateGenerateTokenTypeElementCommand()
	cmdViewGenerateTokenTypeElement.GroupID = ViewGroup.ID
	cmd.AddCommand(cmdViewGenerateTokenTypeElement)
	cmdViewGetAddressSlice := CreateGetAddressSliceCommand()
	cmdViewGetAddressSlice.GroupID = ViewGroup.ID
	cmd.AddCommand(cmdViewGetAddressSlice)
	cmdViewMetadataBytes := CreateMetadataBytesCommand()
	cmdViewMetadataBytes.GroupID = ViewGroup.ID
	cmd.AddCommand(cmdViewMetadataBytes)
	cmdViewReturnTokenSymbol := CreateReturnTokenSymbolCommand()
	cmdViewReturnTokenSymbol.GroupID = ViewGroup.ID
	cmd.AddCommand(cmdViewReturnTokenSymbol)
	cmdViewReturnTokenSymbolNative := CreateReturnTokenSymbolNativeCommand()
	cmdViewReturnTokenSymbolNative.GroupID = ViewGroup.ID
	cmd.AddCommand(cmdViewReturnTokenSymbolNative)
	cmdViewGenerateLogo := CreateGenerateLogoCommand()
	cmdViewGenerateLogo.GroupID = ViewGroup.ID
	cmd.AddCommand(cmdViewGenerateLogo)
	cmdViewGenerateTokenSymbol := CreateGenerateTokenSymbolCommand()
	cmdViewGenerateTokenSymbol.GroupID = ViewGroup.ID
	cmd.AddCommand(cmdViewGenerateTokenSymbol)
	cmdViewMetadata := CreateMetadataCommand()
	cmdViewMetadata.GroupID = ViewGroup.ID
	cmd.AddCommand(cmdViewMetadata)
	cmdViewMetadataJSON := CreateMetadataJsonCommand()
	cmdViewMetadataJSON.GroupID = ViewGroup.ID
	cmd.AddCommand(cmdViewMetadataJSON)

	return cmd
}
