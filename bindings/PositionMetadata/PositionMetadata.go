// This file was generated by seer: https://github.com/moonstream-to/seer.
// seer version: 0.1.15
// seer command: seer evm generate --package PositionMetadata --cli --struct PositionMetadata --output bindings/PositionMetadata/PositionMetadata.go
// Code generated - DO NOT EDIT.
// This file is a generated binding and any manual changes will be lost.

package PositionMetadata

import (
	"errors"
	"math/big"
	"strings"

	"context"

	ethereum "github.com/ethereum/go-ethereum"
	"github.com/ethereum/go-ethereum/accounts/abi"
	"github.com/ethereum/go-ethereum/accounts/abi/bind"
	"github.com/ethereum/go-ethereum/common"
	"github.com/ethereum/go-ethereum/core/types"
	"github.com/ethereum/go-ethereum/event"

	// Reference imports to suppress errors if they are not otherwise used.
	"encoding/hex"
	"encoding/json"
	"fmt"
	"os"
	"time"

	"github.com/ethereum/go-ethereum/accounts/keystore"
	"github.com/ethereum/go-ethereum/ethclient"
	"github.com/spf13/cobra"
	"golang.org/x/term"
)

var (
	_ = errors.New
	_ = big.NewInt
	_ = strings.NewReader
	_ = ethereum.NotFound
	_ = bind.Bind
	_ = common.Big1
	_ = types.BloomLookup
	_ = event.NewSubscription
	_ = abi.ConvertType
)

// Position is an auto generated low-level Go binding around an user-defined struct.
type Position struct {
	PoolID             *big.Int
	AmountOrTokenID    *big.Int
	StakeTimestamp     *big.Int
	UnstakeInitiatedAt *big.Int
}

// StakingPool is an auto generated low-level Go binding around an user-defined struct.
type StakingPool struct {
	Administrator   common.Address
	TokenType       *big.Int
	TokenAddress    common.Address
	TokenID         *big.Int
	Transferable    bool
	LockupSeconds   *big.Int
	CooldownSeconds *big.Int
}

// PositionMetadataMetaData contains all meta data concerning the PositionMetadata contract.
var PositionMetadataMetaData = &bind.MetaData{
	ABI: "[{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"poolID\",\"type\":\"uint256\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"administrator\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenType\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"tokenAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenID\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"transferable\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"lockupSeconds\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"cooldownSeconds\",\"type\":\"uint256\"}],\"internalType\":\"structStakingPool\",\"name\":\"pool\",\"type\":\"tuple\"},{\"internalType\":\"uint256\",\"name\":\"positionTokenID\",\"type\":\"uint256\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"poolID\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amountOrTokenID\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"stakeTimestamp\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"unstakeInitiatedAt\",\"type\":\"uint256\"}],\"internalType\":\"structPosition\",\"name\":\"position\",\"type\":\"tuple\"}],\"name\":\"metadata\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"administrator\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenType\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"tokenAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenID\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"transferable\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"lockupSeconds\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"cooldownSeconds\",\"type\":\"uint256\"}],\"internalType\":\"structStakingPool\",\"name\":\"pool\",\"type\":\"tuple\"},{\"internalType\":\"uint256\",\"name\":\"positionTokenID\",\"type\":\"uint256\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"poolID\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amountOrTokenID\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"stakeTimestamp\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"unstakeInitiatedAt\",\"type\":\"uint256\"}],\"internalType\":\"structPosition\",\"name\":\"position\",\"type\":\"tuple\"}],\"name\":\"metadataBytes\",\"outputs\":[{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"poolID\",\"type\":\"uint256\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"administrator\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenType\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"tokenAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenID\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"transferable\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"lockupSeconds\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"cooldownSeconds\",\"type\":\"uint256\"}],\"internalType\":\"structStakingPool\",\"name\":\"pool\",\"type\":\"tuple\"},{\"internalType\":\"uint256\",\"name\":\"positionTokenID\",\"type\":\"uint256\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"poolID\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amountOrTokenID\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"stakeTimestamp\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"unstakeInitiatedAt\",\"type\":\"uint256\"}],\"internalType\":\"structPosition\",\"name\":\"position\",\"type\":\"tuple\"}],\"name\":\"metadataJSON\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"pure\",\"type\":\"function\"}]",
	Bin: "",
}

// PositionMetadataABI is the input ABI used to generate the binding from.
// Deprecated: Use PositionMetadataMetaData.ABI instead.
var PositionMetadataABI = PositionMetadataMetaData.ABI

// PositionMetadataBin is the compiled bytecode used for deploying new contracts.
// Deprecated: Use PositionMetadataMetaData.Bin instead.
var PositionMetadataBin = PositionMetadataMetaData.Bin

// DeployPositionMetadata deploys a new Ethereum contract, binding an instance of PositionMetadata to it.
func DeployPositionMetadata(auth *bind.TransactOpts, backend bind.ContractBackend) (common.Address, *types.Transaction, *PositionMetadata, error) {
	parsed, err := PositionMetadataMetaData.GetAbi()
	if err != nil {
		return common.Address{}, nil, nil, err
	}
	if parsed == nil {
		return common.Address{}, nil, nil, errors.New("GetABI returned nil")
	}

	address, tx, contract, err := bind.DeployContract(auth, *parsed, common.FromHex(PositionMetadataBin), backend)
	if err != nil {
		return common.Address{}, nil, nil, err
	}
	return address, tx, &PositionMetadata{PositionMetadataCaller: PositionMetadataCaller{contract: contract}, PositionMetadataTransactor: PositionMetadataTransactor{contract: contract}, PositionMetadataFilterer: PositionMetadataFilterer{contract: contract}}, nil
}

// PositionMetadata is an auto generated Go binding around an Ethereum contract.
type PositionMetadata struct {
	PositionMetadataCaller     // Read-only binding to the contract
	PositionMetadataTransactor // Write-only binding to the contract
	PositionMetadataFilterer   // Log filterer for contract events
}

// PositionMetadataCaller is an auto generated read-only Go binding around an Ethereum contract.
type PositionMetadataCaller struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// PositionMetadataTransactor is an auto generated write-only Go binding around an Ethereum contract.
type PositionMetadataTransactor struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// PositionMetadataFilterer is an auto generated log filtering Go binding around an Ethereum contract events.
type PositionMetadataFilterer struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// PositionMetadataSession is an auto generated Go binding around an Ethereum contract,
// with pre-set call and transact options.
type PositionMetadataSession struct {
	Contract     *PositionMetadata // Generic contract binding to set the session for
	CallOpts     bind.CallOpts     // Call options to use throughout this session
	TransactOpts bind.TransactOpts // Transaction auth options to use throughout this session
}

// PositionMetadataCallerSession is an auto generated read-only Go binding around an Ethereum contract,
// with pre-set call options.
type PositionMetadataCallerSession struct {
	Contract *PositionMetadataCaller // Generic contract caller binding to set the session for
	CallOpts bind.CallOpts           // Call options to use throughout this session
}

// PositionMetadataTransactorSession is an auto generated write-only Go binding around an Ethereum contract,
// with pre-set transact options.
type PositionMetadataTransactorSession struct {
	Contract     *PositionMetadataTransactor // Generic contract transactor binding to set the session for
	TransactOpts bind.TransactOpts           // Transaction auth options to use throughout this session
}

// PositionMetadataRaw is an auto generated low-level Go binding around an Ethereum contract.
type PositionMetadataRaw struct {
	Contract *PositionMetadata // Generic contract binding to access the raw methods on
}

// PositionMetadataCallerRaw is an auto generated low-level read-only Go binding around an Ethereum contract.
type PositionMetadataCallerRaw struct {
	Contract *PositionMetadataCaller // Generic read-only contract binding to access the raw methods on
}

// PositionMetadataTransactorRaw is an auto generated low-level write-only Go binding around an Ethereum contract.
type PositionMetadataTransactorRaw struct {
	Contract *PositionMetadataTransactor // Generic write-only contract binding to access the raw methods on
}

// NewPositionMetadata creates a new instance of PositionMetadata, bound to a specific deployed contract.
func NewPositionMetadata(address common.Address, backend bind.ContractBackend) (*PositionMetadata, error) {
	contract, err := bindPositionMetadata(address, backend, backend, backend)
	if err != nil {
		return nil, err
	}
	return &PositionMetadata{PositionMetadataCaller: PositionMetadataCaller{contract: contract}, PositionMetadataTransactor: PositionMetadataTransactor{contract: contract}, PositionMetadataFilterer: PositionMetadataFilterer{contract: contract}}, nil
}

// NewPositionMetadataCaller creates a new read-only instance of PositionMetadata, bound to a specific deployed contract.
func NewPositionMetadataCaller(address common.Address, caller bind.ContractCaller) (*PositionMetadataCaller, error) {
	contract, err := bindPositionMetadata(address, caller, nil, nil)
	if err != nil {
		return nil, err
	}
	return &PositionMetadataCaller{contract: contract}, nil
}

// NewPositionMetadataTransactor creates a new write-only instance of PositionMetadata, bound to a specific deployed contract.
func NewPositionMetadataTransactor(address common.Address, transactor bind.ContractTransactor) (*PositionMetadataTransactor, error) {
	contract, err := bindPositionMetadata(address, nil, transactor, nil)
	if err != nil {
		return nil, err
	}
	return &PositionMetadataTransactor{contract: contract}, nil
}

// NewPositionMetadataFilterer creates a new log filterer instance of PositionMetadata, bound to a specific deployed contract.
func NewPositionMetadataFilterer(address common.Address, filterer bind.ContractFilterer) (*PositionMetadataFilterer, error) {
	contract, err := bindPositionMetadata(address, nil, nil, filterer)
	if err != nil {
		return nil, err
	}
	return &PositionMetadataFilterer{contract: contract}, nil
}

// bindPositionMetadata binds a generic wrapper to an already deployed contract.
func bindPositionMetadata(address common.Address, caller bind.ContractCaller, transactor bind.ContractTransactor, filterer bind.ContractFilterer) (*bind.BoundContract, error) {
	parsed, err := PositionMetadataMetaData.GetAbi()
	if err != nil {
		return nil, err
	}
	return bind.NewBoundContract(address, *parsed, caller, transactor, filterer), nil
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_PositionMetadata *PositionMetadataRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _PositionMetadata.Contract.PositionMetadataCaller.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_PositionMetadata *PositionMetadataRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _PositionMetadata.Contract.PositionMetadataTransactor.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_PositionMetadata *PositionMetadataRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _PositionMetadata.Contract.PositionMetadataTransactor.contract.Transact(opts, method, params...)
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_PositionMetadata *PositionMetadataCallerRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _PositionMetadata.Contract.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_PositionMetadata *PositionMetadataTransactorRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _PositionMetadata.Contract.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_PositionMetadata *PositionMetadataTransactorRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _PositionMetadata.Contract.contract.Transact(opts, method, params...)
}

// Metadata is a free data retrieval call binding the contract method 0x2a0ab0e8.
//
// Solidity: function metadata(uint256 poolID, (address,uint256,address,uint256,bool,uint256,uint256) pool, uint256 positionTokenID, (uint256,uint256,uint256,uint256) position) pure returns(string)
func (_PositionMetadata *PositionMetadataCaller) Metadata(opts *bind.CallOpts, poolID *big.Int, pool StakingPool, positionTokenID *big.Int, position Position) (string, error) {
	var out []interface{}
	err := _PositionMetadata.contract.Call(opts, &out, "metadata", poolID, pool, positionTokenID, position)

	if err != nil {
		return *new(string), err
	}

	out0 := *abi.ConvertType(out[0], new(string)).(*string)

	return out0, err

}

// Metadata is a free data retrieval call binding the contract method 0x2a0ab0e8.
//
// Solidity: function metadata(uint256 poolID, (address,uint256,address,uint256,bool,uint256,uint256) pool, uint256 positionTokenID, (uint256,uint256,uint256,uint256) position) pure returns(string)
func (_PositionMetadata *PositionMetadataSession) Metadata(poolID *big.Int, pool StakingPool, positionTokenID *big.Int, position Position) (string, error) {
	return _PositionMetadata.Contract.Metadata(&_PositionMetadata.CallOpts, poolID, pool, positionTokenID, position)
}

// Metadata is a free data retrieval call binding the contract method 0x2a0ab0e8.
//
// Solidity: function metadata(uint256 poolID, (address,uint256,address,uint256,bool,uint256,uint256) pool, uint256 positionTokenID, (uint256,uint256,uint256,uint256) position) pure returns(string)
func (_PositionMetadata *PositionMetadataCallerSession) Metadata(poolID *big.Int, pool StakingPool, positionTokenID *big.Int, position Position) (string, error) {
	return _PositionMetadata.Contract.Metadata(&_PositionMetadata.CallOpts, poolID, pool, positionTokenID, position)
}

// MetadataBytes is a free data retrieval call binding the contract method 0x3fcb348b.
//
// Solidity: function metadataBytes(uint256 , (address,uint256,address,uint256,bool,uint256,uint256) pool, uint256 positionTokenID, (uint256,uint256,uint256,uint256) position) pure returns(bytes)
func (_PositionMetadata *PositionMetadataCaller) MetadataBytes(opts *bind.CallOpts, arg0 *big.Int, pool StakingPool, positionTokenID *big.Int, position Position) ([]byte, error) {
	var out []interface{}
	err := _PositionMetadata.contract.Call(opts, &out, "metadataBytes", arg0, pool, positionTokenID, position)

	if err != nil {
		return *new([]byte), err
	}

	out0 := *abi.ConvertType(out[0], new([]byte)).(*[]byte)

	return out0, err

}

// MetadataBytes is a free data retrieval call binding the contract method 0x3fcb348b.
//
// Solidity: function metadataBytes(uint256 , (address,uint256,address,uint256,bool,uint256,uint256) pool, uint256 positionTokenID, (uint256,uint256,uint256,uint256) position) pure returns(bytes)
func (_PositionMetadata *PositionMetadataSession) MetadataBytes(arg0 *big.Int, pool StakingPool, positionTokenID *big.Int, position Position) ([]byte, error) {
	return _PositionMetadata.Contract.MetadataBytes(&_PositionMetadata.CallOpts, arg0, pool, positionTokenID, position)
}

// MetadataBytes is a free data retrieval call binding the contract method 0x3fcb348b.
//
// Solidity: function metadataBytes(uint256 , (address,uint256,address,uint256,bool,uint256,uint256) pool, uint256 positionTokenID, (uint256,uint256,uint256,uint256) position) pure returns(bytes)
func (_PositionMetadata *PositionMetadataCallerSession) MetadataBytes(arg0 *big.Int, pool StakingPool, positionTokenID *big.Int, position Position) ([]byte, error) {
	return _PositionMetadata.Contract.MetadataBytes(&_PositionMetadata.CallOpts, arg0, pool, positionTokenID, position)
}

// MetadataJSON is a free data retrieval call binding the contract method 0xc034b724.
//
// Solidity: function metadataJSON(uint256 poolID, (address,uint256,address,uint256,bool,uint256,uint256) pool, uint256 positionTokenID, (uint256,uint256,uint256,uint256) position) pure returns(string)
func (_PositionMetadata *PositionMetadataCaller) MetadataJSON(opts *bind.CallOpts, poolID *big.Int, pool StakingPool, positionTokenID *big.Int, position Position) (string, error) {
	var out []interface{}
	err := _PositionMetadata.contract.Call(opts, &out, "metadataJSON", poolID, pool, positionTokenID, position)

	if err != nil {
		return *new(string), err
	}

	out0 := *abi.ConvertType(out[0], new(string)).(*string)

	return out0, err

}

// MetadataJSON is a free data retrieval call binding the contract method 0xc034b724.
//
// Solidity: function metadataJSON(uint256 poolID, (address,uint256,address,uint256,bool,uint256,uint256) pool, uint256 positionTokenID, (uint256,uint256,uint256,uint256) position) pure returns(string)
func (_PositionMetadata *PositionMetadataSession) MetadataJSON(poolID *big.Int, pool StakingPool, positionTokenID *big.Int, position Position) (string, error) {
	return _PositionMetadata.Contract.MetadataJSON(&_PositionMetadata.CallOpts, poolID, pool, positionTokenID, position)
}

// MetadataJSON is a free data retrieval call binding the contract method 0xc034b724.
//
// Solidity: function metadataJSON(uint256 poolID, (address,uint256,address,uint256,bool,uint256,uint256) pool, uint256 positionTokenID, (uint256,uint256,uint256,uint256) position) pure returns(string)
func (_PositionMetadata *PositionMetadataCallerSession) MetadataJSON(poolID *big.Int, pool StakingPool, positionTokenID *big.Int, position Position) (string, error) {
	return _PositionMetadata.Contract.MetadataJSON(&_PositionMetadata.CallOpts, poolID, pool, positionTokenID, position)
}

func CreatePositionMetadataDeploymentCommand() *cobra.Command {
	var keyfile, nonce, password, value, gasPrice, maxFeePerGas, maxPriorityFeePerGas, rpc string
	var gasLimit uint64
	var simulate bool
	var timeout uint

	cmd := &cobra.Command{
		Use:   "deploy",
		Short: "Deploy a new PositionMetadata contract",
		PreRunE: func(cmd *cobra.Command, args []string) error {
			if keyfile == "" {
				return fmt.Errorf("--keystore not specified (this should be a path to an Ethereum account keystore file)")
			}

			return nil
		},
		RunE: func(cmd *cobra.Command, args []string) error {
			client, clientErr := NewClient(rpc)
			if clientErr != nil {
				return clientErr
			}

			key, keyErr := KeyFromFile(keyfile, password)
			if keyErr != nil {
				return keyErr
			}

			chainIDCtx, cancelChainIDCtx := NewChainContext(timeout)
			defer cancelChainIDCtx()
			chainID, chainIDErr := client.ChainID(chainIDCtx)
			if chainIDErr != nil {
				return chainIDErr
			}

			transactionOpts, transactionOptsErr := bind.NewKeyedTransactorWithChainID(key.PrivateKey, chainID)
			if transactionOptsErr != nil {
				return transactionOptsErr
			}

			SetTransactionParametersFromArgs(transactionOpts, nonce, value, gasPrice, maxFeePerGas, maxPriorityFeePerGas, gasLimit, simulate)

			address, deploymentTransaction, _, deploymentErr := DeployPositionMetadata(
				transactionOpts,
				client,
			)
			if deploymentErr != nil {
				return deploymentErr
			}

			cmd.Printf("Transaction hash: %s\nContract address: %s\n", deploymentTransaction.Hash().Hex(), address.Hex())
			if transactionOpts.NoSend {
				estimationMessage := ethereum.CallMsg{
					From: transactionOpts.From,
					Data: deploymentTransaction.Data(),
				}

				gasEstimationCtx, cancelGasEstimationCtx := NewChainContext(timeout)
				defer cancelGasEstimationCtx()

				gasEstimate, gasEstimateErr := client.EstimateGas(gasEstimationCtx, estimationMessage)
				if gasEstimateErr != nil {
					return gasEstimateErr
				}

				transactionBinary, transactionBinaryErr := deploymentTransaction.MarshalBinary()
				if transactionBinaryErr != nil {
					return transactionBinaryErr
				}
				transactionBinaryHex := hex.EncodeToString(transactionBinary)

				cmd.Printf("Transaction: %s\nEstimated gas: %d\n", transactionBinaryHex, gasEstimate)
			} else {
				cmd.Println("Transaction submitted")
			}

			return nil
		},
	}

	cmd.Flags().StringVar(&rpc, "rpc", "", "URL of the JSONRPC API to use")
	cmd.Flags().StringVar(&keyfile, "keyfile", "", "Path to the keystore file to use for the transaction")
	cmd.Flags().StringVar(&password, "password", "", "Password to use to unlock the keystore (if not specified, you will be prompted for the password when the command executes)")
	cmd.Flags().StringVar(&nonce, "nonce", "", "Nonce to use for the transaction")
	cmd.Flags().StringVar(&value, "value", "", "Value to send with the transaction")
	cmd.Flags().StringVar(&gasPrice, "gas-price", "", "Gas price to use for the transaction")
	cmd.Flags().StringVar(&maxFeePerGas, "max-fee-per-gas", "", "Maximum fee per gas to use for the (EIP-1559) transaction")
	cmd.Flags().StringVar(&maxPriorityFeePerGas, "max-priority-fee-per-gas", "", "Maximum priority fee per gas to use for the (EIP-1559) transaction")
	cmd.Flags().Uint64Var(&gasLimit, "gas-limit", 0, "Gas limit for the transaction")
	cmd.Flags().BoolVar(&simulate, "simulate", false, "Simulate the transaction without sending it")
	cmd.Flags().UintVar(&timeout, "timeout", 60, "Timeout (in seconds) for interactions with the JSONRPC API")

	return cmd
}

func CreateMetadataCommand() *cobra.Command {
	var contractAddressRaw, rpc string
	var contractAddress common.Address
	var timeout uint

	var blockNumberRaw, fromAddressRaw string
	var pending bool

	var poolID *big.Int
	var poolIDRaw string
	var pool StakingPool
	var poolRaw string
	var positionTokenID *big.Int
	var positionTokenIDRaw string
	var position Position
	var positionRaw string

	var capture0 string

	cmd := &cobra.Command{
		Use:   "metadata",
		Short: "Call the Metadata view method on a PositionMetadata contract",
		PreRunE: func(cmd *cobra.Command, args []string) error {
			if contractAddressRaw == "" {
				return fmt.Errorf("--contract not specified")
			} else if !common.IsHexAddress(contractAddressRaw) {
				return fmt.Errorf("--contract is not a valid Ethereum address")
			}
			contractAddress = common.HexToAddress(contractAddressRaw)

			if poolIDRaw == "" {
				return fmt.Errorf("--pool-id argument not specified")
			}
			poolID = new(big.Int)
			poolID.SetString(poolIDRaw, 0)

			if poolRaw == "" {
				return fmt.Errorf("--pool argument not specified")
			} else if strings.HasPrefix(poolRaw, "@") {
				filename := strings.TrimPrefix(poolRaw, "@")
				contents, readErr := os.ReadFile(filename)
				if readErr != nil {
					return readErr
				}
				unmarshalErr := json.Unmarshal(contents, &pool)
				if unmarshalErr != nil {
					return unmarshalErr
				}
			} else {
				unmarshalErr := json.Unmarshal([]byte(poolRaw), &pool)
				if unmarshalErr != nil {
					return unmarshalErr
				}
			}

			if positionTokenIDRaw == "" {
				return fmt.Errorf("--position-token-id argument not specified")
			}
			positionTokenID = new(big.Int)
			positionTokenID.SetString(positionTokenIDRaw, 0)

			if positionRaw == "" {
				return fmt.Errorf("--position argument not specified")
			} else if strings.HasPrefix(positionRaw, "@") {
				filename := strings.TrimPrefix(positionRaw, "@")
				contents, readErr := os.ReadFile(filename)
				if readErr != nil {
					return readErr
				}
				unmarshalErr := json.Unmarshal(contents, &position)
				if unmarshalErr != nil {
					return unmarshalErr
				}
			} else {
				unmarshalErr := json.Unmarshal([]byte(positionRaw), &position)
				if unmarshalErr != nil {
					return unmarshalErr
				}
			}

			return nil
		},
		RunE: func(cmd *cobra.Command, args []string) error {
			client, clientErr := NewClient(rpc)
			if clientErr != nil {
				return clientErr
			}

			contract, contractErr := NewPositionMetadata(contractAddress, client)
			if contractErr != nil {
				return contractErr
			}

			callOpts := bind.CallOpts{}
			SetCallParametersFromArgs(&callOpts, pending, fromAddressRaw, blockNumberRaw)

			session := PositionMetadataCallerSession{
				Contract: &contract.PositionMetadataCaller,
				CallOpts: callOpts,
			}

			var callErr error
			capture0, callErr = session.Metadata(
				poolID,
				pool,
				positionTokenID,
				position,
			)
			if callErr != nil {
				return callErr
			}

			cmd.Printf("0: %s\n", capture0)

			return nil
		},
	}

	cmd.Flags().StringVar(&rpc, "rpc", "", "URL of the JSONRPC API to use")
	cmd.Flags().StringVar(&blockNumberRaw, "block", "", "Block number at which to call the view method")
	cmd.Flags().BoolVar(&pending, "pending", false, "Set this flag if it's ok to call the view method against pending state")
	cmd.Flags().UintVar(&timeout, "timeout", 60, "Timeout (in seconds) for interactions with the JSONRPC API")
	cmd.Flags().StringVar(&contractAddressRaw, "contract", "", "Address of the contract to interact with")
	cmd.Flags().StringVar(&fromAddressRaw, "from", "", "Optional address for caller of the view method")

	cmd.Flags().StringVar(&poolIDRaw, "pool-id", "", "pool-id argument")
	cmd.Flags().StringVar(&poolRaw, "pool", "", "pool argument (StakingPool)")
	cmd.Flags().StringVar(&positionTokenIDRaw, "position-token-id", "", "position-token-id argument")
	cmd.Flags().StringVar(&positionRaw, "position", "", "position argument (Position)")

	return cmd
}
func CreateMetadataBytesCommand() *cobra.Command {
	var contractAddressRaw, rpc string
	var contractAddress common.Address
	var timeout uint

	var blockNumberRaw, fromAddressRaw string
	var pending bool

	var arg0 *big.Int
	var arg0Raw string
	var pool StakingPool
	var poolRaw string
	var positionTokenID *big.Int
	var positionTokenIDRaw string
	var position Position
	var positionRaw string

	var capture0 []byte

	cmd := &cobra.Command{
		Use:   "metadata-bytes",
		Short: "Call the MetadataBytes view method on a PositionMetadata contract",
		PreRunE: func(cmd *cobra.Command, args []string) error {
			if contractAddressRaw == "" {
				return fmt.Errorf("--contract not specified")
			} else if !common.IsHexAddress(contractAddressRaw) {
				return fmt.Errorf("--contract is not a valid Ethereum address")
			}
			contractAddress = common.HexToAddress(contractAddressRaw)

			if arg0Raw == "" {
				return fmt.Errorf("--arg-0 argument not specified")
			}
			arg0 = new(big.Int)
			arg0.SetString(arg0Raw, 0)

			if poolRaw == "" {
				return fmt.Errorf("--pool argument not specified")
			} else if strings.HasPrefix(poolRaw, "@") {
				filename := strings.TrimPrefix(poolRaw, "@")
				contents, readErr := os.ReadFile(filename)
				if readErr != nil {
					return readErr
				}
				unmarshalErr := json.Unmarshal(contents, &pool)
				if unmarshalErr != nil {
					return unmarshalErr
				}
			} else {
				unmarshalErr := json.Unmarshal([]byte(poolRaw), &pool)
				if unmarshalErr != nil {
					return unmarshalErr
				}
			}

			if positionTokenIDRaw == "" {
				return fmt.Errorf("--position-token-id argument not specified")
			}
			positionTokenID = new(big.Int)
			positionTokenID.SetString(positionTokenIDRaw, 0)

			if positionRaw == "" {
				return fmt.Errorf("--position argument not specified")
			} else if strings.HasPrefix(positionRaw, "@") {
				filename := strings.TrimPrefix(positionRaw, "@")
				contents, readErr := os.ReadFile(filename)
				if readErr != nil {
					return readErr
				}
				unmarshalErr := json.Unmarshal(contents, &position)
				if unmarshalErr != nil {
					return unmarshalErr
				}
			} else {
				unmarshalErr := json.Unmarshal([]byte(positionRaw), &position)
				if unmarshalErr != nil {
					return unmarshalErr
				}
			}

			return nil
		},
		RunE: func(cmd *cobra.Command, args []string) error {
			client, clientErr := NewClient(rpc)
			if clientErr != nil {
				return clientErr
			}

			contract, contractErr := NewPositionMetadata(contractAddress, client)
			if contractErr != nil {
				return contractErr
			}

			callOpts := bind.CallOpts{}
			SetCallParametersFromArgs(&callOpts, pending, fromAddressRaw, blockNumberRaw)

			session := PositionMetadataCallerSession{
				Contract: &contract.PositionMetadataCaller,
				CallOpts: callOpts,
			}

			var callErr error
			capture0, callErr = session.MetadataBytes(
				arg0,
				pool,
				positionTokenID,
				position,
			)
			if callErr != nil {
				return callErr
			}

			cmd.Printf("0: %v\n", capture0)

			return nil
		},
	}

	cmd.Flags().StringVar(&rpc, "rpc", "", "URL of the JSONRPC API to use")
	cmd.Flags().StringVar(&blockNumberRaw, "block", "", "Block number at which to call the view method")
	cmd.Flags().BoolVar(&pending, "pending", false, "Set this flag if it's ok to call the view method against pending state")
	cmd.Flags().UintVar(&timeout, "timeout", 60, "Timeout (in seconds) for interactions with the JSONRPC API")
	cmd.Flags().StringVar(&contractAddressRaw, "contract", "", "Address of the contract to interact with")
	cmd.Flags().StringVar(&fromAddressRaw, "from", "", "Optional address for caller of the view method")

	cmd.Flags().StringVar(&arg0Raw, "arg-0", "", "arg-0 argument")
	cmd.Flags().StringVar(&poolRaw, "pool", "", "pool argument (StakingPool)")
	cmd.Flags().StringVar(&positionTokenIDRaw, "position-token-id", "", "position-token-id argument")
	cmd.Flags().StringVar(&positionRaw, "position", "", "position argument (Position)")

	return cmd
}
func CreateMetadataJsonCommand() *cobra.Command {
	var contractAddressRaw, rpc string
	var contractAddress common.Address
	var timeout uint

	var blockNumberRaw, fromAddressRaw string
	var pending bool

	var poolID *big.Int
	var poolIDRaw string
	var pool StakingPool
	var poolRaw string
	var positionTokenID *big.Int
	var positionTokenIDRaw string
	var position Position
	var positionRaw string

	var capture0 string

	cmd := &cobra.Command{
		Use:   "metadata-json",
		Short: "Call the MetadataJSON view method on a PositionMetadata contract",
		PreRunE: func(cmd *cobra.Command, args []string) error {
			if contractAddressRaw == "" {
				return fmt.Errorf("--contract not specified")
			} else if !common.IsHexAddress(contractAddressRaw) {
				return fmt.Errorf("--contract is not a valid Ethereum address")
			}
			contractAddress = common.HexToAddress(contractAddressRaw)

			if poolIDRaw == "" {
				return fmt.Errorf("--pool-id argument not specified")
			}
			poolID = new(big.Int)
			poolID.SetString(poolIDRaw, 0)

			if poolRaw == "" {
				return fmt.Errorf("--pool argument not specified")
			} else if strings.HasPrefix(poolRaw, "@") {
				filename := strings.TrimPrefix(poolRaw, "@")
				contents, readErr := os.ReadFile(filename)
				if readErr != nil {
					return readErr
				}
				unmarshalErr := json.Unmarshal(contents, &pool)
				if unmarshalErr != nil {
					return unmarshalErr
				}
			} else {
				unmarshalErr := json.Unmarshal([]byte(poolRaw), &pool)
				if unmarshalErr != nil {
					return unmarshalErr
				}
			}

			if positionTokenIDRaw == "" {
				return fmt.Errorf("--position-token-id argument not specified")
			}
			positionTokenID = new(big.Int)
			positionTokenID.SetString(positionTokenIDRaw, 0)

			if positionRaw == "" {
				return fmt.Errorf("--position argument not specified")
			} else if strings.HasPrefix(positionRaw, "@") {
				filename := strings.TrimPrefix(positionRaw, "@")
				contents, readErr := os.ReadFile(filename)
				if readErr != nil {
					return readErr
				}
				unmarshalErr := json.Unmarshal(contents, &position)
				if unmarshalErr != nil {
					return unmarshalErr
				}
			} else {
				unmarshalErr := json.Unmarshal([]byte(positionRaw), &position)
				if unmarshalErr != nil {
					return unmarshalErr
				}
			}

			return nil
		},
		RunE: func(cmd *cobra.Command, args []string) error {
			client, clientErr := NewClient(rpc)
			if clientErr != nil {
				return clientErr
			}

			contract, contractErr := NewPositionMetadata(contractAddress, client)
			if contractErr != nil {
				return contractErr
			}

			callOpts := bind.CallOpts{}
			SetCallParametersFromArgs(&callOpts, pending, fromAddressRaw, blockNumberRaw)

			session := PositionMetadataCallerSession{
				Contract: &contract.PositionMetadataCaller,
				CallOpts: callOpts,
			}

			var callErr error
			capture0, callErr = session.MetadataJSON(
				poolID,
				pool,
				positionTokenID,
				position,
			)
			if callErr != nil {
				return callErr
			}

			cmd.Printf("0: %s\n", capture0)

			return nil
		},
	}

	cmd.Flags().StringVar(&rpc, "rpc", "", "URL of the JSONRPC API to use")
	cmd.Flags().StringVar(&blockNumberRaw, "block", "", "Block number at which to call the view method")
	cmd.Flags().BoolVar(&pending, "pending", false, "Set this flag if it's ok to call the view method against pending state")
	cmd.Flags().UintVar(&timeout, "timeout", 60, "Timeout (in seconds) for interactions with the JSONRPC API")
	cmd.Flags().StringVar(&contractAddressRaw, "contract", "", "Address of the contract to interact with")
	cmd.Flags().StringVar(&fromAddressRaw, "from", "", "Optional address for caller of the view method")

	cmd.Flags().StringVar(&poolIDRaw, "pool-id", "", "pool-id argument")
	cmd.Flags().StringVar(&poolRaw, "pool", "", "pool argument (StakingPool)")
	cmd.Flags().StringVar(&positionTokenIDRaw, "position-token-id", "", "position-token-id argument")
	cmd.Flags().StringVar(&positionRaw, "position", "", "position argument (Position)")

	return cmd
}

var ErrNoRPCURL error = errors.New("no RPC URL provided -- please pass an RPC URL from the command line or set the POSITION_METADATA_RPC_URL environment variable")

// Generates an Ethereum client to the JSONRPC API at the given URL. If rpcURL is empty, then it
// attempts to read the RPC URL from the POSITION_METADATA_RPC_URL environment variable. If that is empty,
// too, then it returns an error.
func NewClient(rpcURL string) (*ethclient.Client, error) {
	if rpcURL == "" {
		rpcURL = os.Getenv("POSITION_METADATA_RPC_URL")
	}

	if rpcURL == "" {
		return nil, ErrNoRPCURL
	}

	client, err := ethclient.Dial(rpcURL)
	return client, err
}

// Creates a new context to be used when interacting with the chain client.
func NewChainContext(timeout uint) (context.Context, context.CancelFunc) {
	baseCtx := context.Background()
	parsedTimeout := time.Duration(timeout) * time.Second
	ctx, cancel := context.WithTimeout(baseCtx, parsedTimeout)
	return ctx, cancel
}

// Unlocks a key from a keystore (byte contents of a keystore file) with the given password.
func UnlockKeystore(keystoreData []byte, password string) (*keystore.Key, error) {
	key, err := keystore.DecryptKey(keystoreData, password)
	return key, err
}

// Loads a key from file, prompting the user for the password if it is not provided as a function argument.
func KeyFromFile(keystoreFile string, password string) (*keystore.Key, error) {
	var emptyKey *keystore.Key
	keystoreContent, readErr := os.ReadFile(keystoreFile)
	if readErr != nil {
		return emptyKey, readErr
	}

	// If password is "", prompt user for password.
	if password == "" {
		fmt.Printf("Please provide a password for keystore (%s): ", keystoreFile)
		passwordRaw, inputErr := term.ReadPassword(int(os.Stdin.Fd()))
		if inputErr != nil {
			return emptyKey, fmt.Errorf("error reading password: %s", inputErr.Error())
		}
		fmt.Print("\n")
		password = string(passwordRaw)
	}

	key, err := UnlockKeystore(keystoreContent, password)
	return key, err
}

// This method is used to set the parameters on a view call from command line arguments (represented mostly as
// strings).
func SetCallParametersFromArgs(opts *bind.CallOpts, pending bool, fromAddress, blockNumber string) {
	if pending {
		opts.Pending = true
	}

	if fromAddress != "" {
		opts.From = common.HexToAddress(fromAddress)
	}

	if blockNumber != "" {
		opts.BlockNumber = new(big.Int)
		opts.BlockNumber.SetString(blockNumber, 0)
	}
}

// This method is used to set the parameters on a transaction from command line arguments (represented mostly as
// strings).
func SetTransactionParametersFromArgs(opts *bind.TransactOpts, nonce, value, gasPrice, maxFeePerGas, maxPriorityFeePerGas string, gasLimit uint64, noSend bool) {
	if nonce != "" {
		opts.Nonce = new(big.Int)
		opts.Nonce.SetString(nonce, 0)
	}

	if value != "" {
		opts.Value = new(big.Int)
		opts.Value.SetString(value, 0)
	}

	if gasPrice != "" {
		opts.GasPrice = new(big.Int)
		opts.GasPrice.SetString(gasPrice, 0)
	}

	if maxFeePerGas != "" {
		opts.GasFeeCap = new(big.Int)
		opts.GasFeeCap.SetString(maxFeePerGas, 0)
	}

	if maxPriorityFeePerGas != "" {
		opts.GasTipCap = new(big.Int)
		opts.GasTipCap.SetString(maxPriorityFeePerGas, 0)
	}

	if gasLimit != 0 {
		opts.GasLimit = gasLimit
	}

	opts.NoSend = noSend
}

func CreatePositionMetadataCommand() *cobra.Command {
	cmd := &cobra.Command{
		Use:   "position-metadata",
		Short: "Interact with the PositionMetadata contract",
		Run: func(cmd *cobra.Command, args []string) {
			cmd.Help()
		},
	}

	cmd.SetOut(os.Stdout)

	DeployGroup := &cobra.Group{
		ID: "deploy", Title: "Commands which deploy contracts",
	}
	cmd.AddGroup(DeployGroup)
	ViewGroup := &cobra.Group{
		ID: "view", Title: "Commands which view contract state",
	}
	TransactGroup := &cobra.Group{
		ID: "transact", Title: "Commands which submit transactions",
	}
	cmd.AddGroup(ViewGroup, TransactGroup)

	cmdDeployPositionMetadata := CreatePositionMetadataDeploymentCommand()
	cmdDeployPositionMetadata.GroupID = DeployGroup.ID
	cmd.AddCommand(cmdDeployPositionMetadata)

	cmdViewMetadata := CreateMetadataCommand()
	cmdViewMetadata.GroupID = ViewGroup.ID
	cmd.AddCommand(cmdViewMetadata)
	cmdViewMetadataBytes := CreateMetadataBytesCommand()
	cmdViewMetadataBytes.GroupID = ViewGroup.ID
	cmd.AddCommand(cmdViewMetadataBytes)
	cmdViewMetadataJSON := CreateMetadataJsonCommand()
	cmdViewMetadataJSON.GroupID = ViewGroup.ID
	cmd.AddCommand(cmdViewMetadataJSON)

	return cmd
}
