// This file was generated by seer: https://github.com/moonstream-to/seer.
// seer version: 0.1.15
// seer command: seer evm generate --package ERC1155WithTerminusStorage --cli --struct ERC1155WithTerminusStorage --output bindings/Terminus/ERC1155WithTerminusStorage/ERC1155WithTerminusStorage.go
// Code generated - DO NOT EDIT.
// This file is a generated binding and any manual changes will be lost.

package ERC1155WithTerminusStorage

import (
	"errors"
	"math/big"
	"strings"

	"context"

	ethereum "github.com/ethereum/go-ethereum"
	"github.com/ethereum/go-ethereum/accounts/abi"
	"github.com/ethereum/go-ethereum/accounts/abi/bind"
	"github.com/ethereum/go-ethereum/common"
	"github.com/ethereum/go-ethereum/core/types"
	"github.com/ethereum/go-ethereum/event"

	// Reference imports to suppress errors if they are not otherwise used.
	"encoding/hex"
	"encoding/json"
	"fmt"
	"os"
	"time"

	"github.com/ethereum/go-ethereum/accounts/keystore"
	"github.com/ethereum/go-ethereum/ethclient"
	"github.com/spf13/cobra"
	"golang.org/x/term"
)

var (
	_ = errors.New
	_ = big.NewInt
	_ = strings.NewReader
	_ = ethereum.NotFound
	_ = bind.Bind
	_ = common.Big1
	_ = types.BloomLookup
	_ = event.NewSubscription
	_ = abi.ConvertType
)

// ERC1155WithTerminusStorageMetaData contains all meta data concerning the ERC1155WithTerminusStorage contract.
var ERC1155WithTerminusStorageMetaData = &bind.MetaData{
	ABI: "[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"ApprovalForAll\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256[]\",\"name\":\"ids\",\"type\":\"uint256[]\"},{\"indexed\":false,\"internalType\":\"uint256[]\",\"name\":\"values\",\"type\":\"uint256[]\"}],\"name\":\"TransferBatch\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"TransferSingle\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"string\",\"name\":\"value\",\"type\":\"string\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"}],\"name\":\"URI\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"poolID\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"}],\"name\":\"approveForPool\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"accounts\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"ids\",\"type\":\"uint256[]\"}],\"name\":\"balanceOfBatch\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"}],\"name\":\"isApprovedForAll\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"poolID\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"}],\"name\":\"isApprovedForPool\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256[]\",\"name\":\"ids\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"amounts\",\"type\":\"uint256[]\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"safeBatchTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"setApprovalForAll\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"poolID\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"}],\"name\":\"unapproveForPool\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"poolID\",\"type\":\"uint256\"}],\"name\":\"uri\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"}]",
	Bin: "0x608060405234801561001057600080fd5b50612c5c806100206000396000f3fe608060405234801561001057600080fd5b50600436106100a85760003560e01c80632eb2c2d6116100715780632eb2c2d6146101895780634e1273f4146101a557806385bc82e2146101d5578063a22cb465146101f1578063e985e9c51461020d578063f242432a1461023d576100a8565b8062fdd58e146100ad57806301ffc9a7146100dd578063027b3fc21461010d5780630e89341c1461013d5780631fbeae861461016d575b600080fd5b6100c760048036038101906100c2919061183d565b610259565b6040516100d4919061188c565b60405180910390f35b6100f760048036038101906100f291906118ff565b61032b565b6040516101049190611947565b60405180910390f35b61012760048036038101906101229190611962565b61040d565b6040516101349190611947565b60405180910390f35b610157600480360381019061015291906119a2565b610421565b6040516101649190611a5f565b60405180910390f35b61018760048036038101906101829190611962565b6104cf565b005b6101a3600480360381019061019e9190611c7e565b6104ee565b005b6101bf60048036038101906101ba9190611e10565b61058f565b6040516101cc9190611f46565b60405180910390f35b6101ef60048036038101906101ea9190611962565b6106a2565b005b61020b60048036038101906102069190611f94565b6106c1565b005b61022760048036038101906102229190611fd4565b6106d7565b6040516102349190611947565b60405180910390f35b61025760048036038101906102529190612014565b610774565b005b60008073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff16036102c9576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016102c09061211d565b60405180910390fd5b6102d161082d565b600801600083815260200190815260200160002060008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054905092915050565b60007fd9b67a26000000000000000000000000000000000000000000000000000000007bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916827bffffffffffffffffffffffffffffffffffffffffffffffffffffffff191614806103f657507f0e89341c000000000000000000000000000000000000000000000000000000007bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916827bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916145b8061040657506104058261085a565b5b9050919050565b600061041983836108c4565b905092915050565b606061042b61082d565b6005016000838152602001908152602001600020805461044a9061216c565b80601f01602080910402602001604051908101604052809291908181526020018280546104769061216c565b80156104c35780601f10610498576101008083540402835291602001916104c3565b820191906000526020600020905b8154815290600101906020018083116104a657829003601f168201915b50505050509050919050565b6104e0826104db6109be565b6109c6565b6104ea8282610a7a565b5050565b6104f66109be565b73ffffffffffffffffffffffffffffffffffffffff168573ffffffffffffffffffffffffffffffffffffffff16148061053c575061053b856105366109be565b6106d7565b5b61057b576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161057290612235565b60405180910390fd5b6105888585858585610af6565b5050505050565b606081518351146105d5576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016105cc906122c7565b60405180910390fd5b6000835167ffffffffffffffff8111156105f2576105f1611a86565b5b6040519080825280602002602001820160405280156106205781602001602082028036833780820191505090505b50905060005b84518110156106975761066d858281518110610645576106446122e7565b5b60200260200101518583815181106106605761065f6122e7565b5b6020026020010151610259565b8282815181106106805761067f6122e7565b5b602002602001018181525050806001019050610626565b508091505092915050565b6106b3826106ae6109be565b6109c6565b6106bd8282610e7c565b5050565b6106d36106cc6109be565b8383610ef8565b5050565b60006106e161082d565b600b0160008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff16905092915050565b61077c6109be565b73ffffffffffffffffffffffffffffffffffffffff168573ffffffffffffffffffffffffffffffffffffffff1614806107c257506107c1856107bc6109be565b6106d7565b5b806107da57506107d9836107d46109be565b61040d565b5b610819576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161081090612388565b60405180910390fd5b6108268585858585611073565b5050505050565b6000807f5b75cffee14646b6a66e69def89545550d8d264a0f3260af2fdc807d91004caf90508091505090565b60007f01ffc9a7000000000000000000000000000000000000000000000000000000007bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916827bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916149050919050565b6000806108cf61082d565b905080600401600085815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff16036109435760019150506109b8565b80600c01600085815260200190815260200160002060008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff16156109b25760019150506109b8565b60009150505b92915050565b600033905090565b60006109d061082d565b90508173ffffffffffffffffffffffffffffffffffffffff1681600401600085815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1614610a75576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610a6c9061241a565b60405180910390fd5b505050565b6000610a8461082d565b9050600081600c01600085815260200190815260200160002060008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff021916908315150217905550505050565b8151835114610b3a576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610b31906124ac565b60405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff1603610ba9576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610ba09061253e565b60405180910390fd5b6000610bb36109be565b9050610bc381878787878761136d565b6000610bcd61082d565b905060005b8551811015610de6576000868281518110610bf057610bef6122e7565b5b602002602001015190506000868381518110610c0f57610c0e6122e7565b5b6020026020010151905083600901600083815260200190815260200160002060009054906101000a900460ff1615610c7c576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610c73906125f6565b60405180910390fd5b600084600801600084815260200190815260200160002060008c73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054905081811015610d16576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610d0d90612688565b60405180910390fd5b81810385600801600085815260200190815260200160002060008d73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055508185600801600085815260200190815260200160002060008c73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206000828254610dd191906126d7565b92505081905550505050806001019050610bd2565b508573ffffffffffffffffffffffffffffffffffffffff168773ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff167f4a39dc06d4c0dbc64b70af90fd698a233a518aa5d07e595d983b8c0526c8f7fb8888604051610e5d92919061270b565b60405180910390a4610e73828888888888611375565b50505050505050565b6000610e8661082d565b9050600181600c01600085815260200190815260200160002060008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff021916908315150217905550505050565b8173ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff1603610f66576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610f5d906127b4565b60405180910390fd5b6000610f7061082d565b90508181600b0160008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff0219169083151502179055508273ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff167f17307eab39ab6107e8899845ad3d59bd9653f200f220920489ca2b5937696c31846040516110659190611947565b60405180910390a350505050565b600073ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff16036110e2576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016110d99061253e565b60405180910390fd5b60006110ec61082d565b905080600901600085815260200190815260200160002060009054906101000a900460ff1615611151576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016111489061286c565b60405180910390fd5b600061115b6109be565b905061117b81888861116c89611548565b61117589611548565b8861136d565b600082600801600087815260200190815260200160002060008973ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054905084811015611215576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161120c90612688565b60405180910390fd5b84810383600801600088815260200190815260200160002060008a73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055508483600801600088815260200190815260200160002060008973ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008282546112d091906126d7565b925050819055508673ffffffffffffffffffffffffffffffffffffffff168873ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff167fc3d58168c5ae7397731d063d5bbf3d657854427343f4c083240f7aacaa2d0f62898960405161134d92919061288c565b60405180910390a46113638289898989896115c2565b5050505050505050565b505050505050565b60008473ffffffffffffffffffffffffffffffffffffffff163b1115611540578373ffffffffffffffffffffffffffffffffffffffff1663bc197c8187878686866040518663ffffffff1660e01b81526004016113d6959493929190612919565b6020604051808303816000875af192505050801561141257506040513d601f19601f8201168201806040525081019061140f9190612996565b60015b6114b75761141e6129d0565b806308c379a00361147a57506114326129f2565b8061143d575061147c565b806040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016114719190611a5f565b60405180910390fd5b505b6040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016114ae90612b1a565b60405180910390fd5b63bc197c8160e01b7bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916817bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19161461153e576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161153590612bac565b60405180910390fd5b505b505050505050565b60606000600167ffffffffffffffff81111561156757611566611a86565b5b6040519080825280602002602001820160405280156115955781602001602082028036833780820191505090505b50905082816000815181106115ad576115ac6122e7565b5b60200260200101818152505080915050919050565b60008473ffffffffffffffffffffffffffffffffffffffff163b111561178d578373ffffffffffffffffffffffffffffffffffffffff1663f23a6e6187878686866040518663ffffffff1660e01b8152600401611623959493929190612bcc565b6020604051808303816000875af192505050801561165f57506040513d601f19601f8201168201806040525081019061165c9190612996565b60015b6117045761166b6129d0565b806308c379a0036116c7575061167f6129f2565b8061168a57506116c9565b806040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016116be9190611a5f565b60405180910390fd5b505b6040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016116fb90612b1a565b60405180910390fd5b63f23a6e6160e01b7bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916817bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19161461178b576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161178290612bac565b60405180910390fd5b505b505050505050565b6000604051905090565b600080fd5b600080fd5b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b60006117d4826117a9565b9050919050565b6117e4816117c9565b81146117ef57600080fd5b50565b600081359050611801816117db565b92915050565b6000819050919050565b61181a81611807565b811461182557600080fd5b50565b60008135905061183781611811565b92915050565b600080604083850312156118545761185361179f565b5b6000611862858286016117f2565b925050602061187385828601611828565b9150509250929050565b61188681611807565b82525050565b60006020820190506118a1600083018461187d565b92915050565b60007fffffffff0000000000000000000000000000000000000000000000000000000082169050919050565b6118dc816118a7565b81146118e757600080fd5b50565b6000813590506118f9816118d3565b92915050565b6000602082840312156119155761191461179f565b5b6000611923848285016118ea565b91505092915050565b60008115159050919050565b6119418161192c565b82525050565b600060208201905061195c6000830184611938565b92915050565b600080604083850312156119795761197861179f565b5b600061198785828601611828565b9250506020611998858286016117f2565b9150509250929050565b6000602082840312156119b8576119b761179f565b5b60006119c684828501611828565b91505092915050565b600081519050919050565b600082825260208201905092915050565b60005b83811015611a095780820151818401526020810190506119ee565b60008484015250505050565b6000601f19601f8301169050919050565b6000611a31826119cf565b611a3b81856119da565b9350611a4b8185602086016119eb565b611a5481611a15565b840191505092915050565b60006020820190508181036000830152611a798184611a26565b905092915050565b600080fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b611abe82611a15565b810181811067ffffffffffffffff82111715611add57611adc611a86565b5b80604052505050565b6000611af0611795565b9050611afc8282611ab5565b919050565b600067ffffffffffffffff821115611b1c57611b1b611a86565b5b602082029050602081019050919050565b600080fd5b6000611b45611b4084611b01565b611ae6565b90508083825260208201905060208402830185811115611b6857611b67611b2d565b5b835b81811015611b915780611b7d8882611828565b845260208401935050602081019050611b6a565b5050509392505050565b600082601f830112611bb057611baf611a81565b5b8135611bc0848260208601611b32565b91505092915050565b600080fd5b600067ffffffffffffffff821115611be957611be8611a86565b5b611bf282611a15565b9050602081019050919050565b82818337600083830152505050565b6000611c21611c1c84611bce565b611ae6565b905082815260208101848484011115611c3d57611c3c611bc9565b5b611c48848285611bff565b509392505050565b600082601f830112611c6557611c64611a81565b5b8135611c75848260208601611c0e565b91505092915050565b600080600080600060a08688031215611c9a57611c9961179f565b5b6000611ca8888289016117f2565b9550506020611cb9888289016117f2565b945050604086013567ffffffffffffffff811115611cda57611cd96117a4565b5b611ce688828901611b9b565b935050606086013567ffffffffffffffff811115611d0757611d066117a4565b5b611d1388828901611b9b565b925050608086013567ffffffffffffffff811115611d3457611d336117a4565b5b611d4088828901611c50565b9150509295509295909350565b600067ffffffffffffffff821115611d6857611d67611a86565b5b602082029050602081019050919050565b6000611d8c611d8784611d4d565b611ae6565b90508083825260208201905060208402830185811115611daf57611dae611b2d565b5b835b81811015611dd85780611dc488826117f2565b845260208401935050602081019050611db1565b5050509392505050565b600082601f830112611df757611df6611a81565b5b8135611e07848260208601611d79565b91505092915050565b60008060408385031215611e2757611e2661179f565b5b600083013567ffffffffffffffff811115611e4557611e446117a4565b5b611e5185828601611de2565b925050602083013567ffffffffffffffff811115611e7257611e716117a4565b5b611e7e85828601611b9b565b9150509250929050565b600081519050919050565b600082825260208201905092915050565b6000819050602082019050919050565b611ebd81611807565b82525050565b6000611ecf8383611eb4565b60208301905092915050565b6000602082019050919050565b6000611ef382611e88565b611efd8185611e93565b9350611f0883611ea4565b8060005b83811015611f39578151611f208882611ec3565b9750611f2b83611edb565b925050600181019050611f0c565b5085935050505092915050565b60006020820190508181036000830152611f608184611ee8565b905092915050565b611f718161192c565b8114611f7c57600080fd5b50565b600081359050611f8e81611f68565b92915050565b60008060408385031215611fab57611faa61179f565b5b6000611fb9858286016117f2565b9250506020611fca85828601611f7f565b9150509250929050565b60008060408385031215611feb57611fea61179f565b5b6000611ff9858286016117f2565b925050602061200a858286016117f2565b9150509250929050565b600080600080600060a086880312156120305761202f61179f565b5b600061203e888289016117f2565b955050602061204f888289016117f2565b945050604061206088828901611828565b935050606061207188828901611828565b925050608086013567ffffffffffffffff811115612092576120916117a4565b5b61209e88828901611c50565b9150509295509295909350565b7f45524331313535576974685465726d696e757353746f726167653a2062616c6160008201527f6e636520717565727920666f7220746865207a65726f20616464726573730000602082015250565b6000612107603e836119da565b9150612112826120ab565b604082019050919050565b60006020820190508181036000830152612136816120fa565b9050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b6000600282049050600182168061218457607f821691505b6020821081036121975761219661213d565b5b50919050565b7f45524331313535576974685465726d696e757353746f726167653a207472616e60008201527f736665722063616c6c6572206973206e6f74206f776e6572206e6f722061707060208201527f726f766564000000000000000000000000000000000000000000000000000000604082015250565b600061221f6045836119da565b915061222a8261219d565b606082019050919050565b6000602082019050818103600083015261224e81612212565b9050919050565b7f45524331313535576974685465726d696e757353746f726167653a206163636f60008201527f756e747320616e6420696473206c656e677468206d69736d6174636800000000602082015250565b60006122b1603c836119da565b91506122bc82612255565b604082019050919050565b600060208201905081810360008301526122e0816122a4565b9050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b7f45524331313535576974685465726d696e757353746f726167653a2063616c6c60008201527f6572206973206e6f74206f776e6572206e6f7220617070726f76656400000000602082015250565b6000612372603c836119da565b915061237d82612316565b604082019050919050565b600060208201905081810360008301526123a181612365565b9050919050565b7f4c69625465726d696e75733a204d75737420626520706f6f6c20636f6e74726f60008201527f6c6c657200000000000000000000000000000000000000000000000000000000602082015250565b60006124046024836119da565b915061240f826123a8565b604082019050919050565b60006020820190508181036000830152612433816123f7565b9050919050565b7f45524331313535576974685465726d696e757353746f726167653a206964732060008201527f616e6420616d6f756e7473206c656e677468206d69736d617463680000000000602082015250565b6000612496603b836119da565b91506124a18261243a565b604082019050919050565b600060208201905081810360008301526124c581612489565b9050919050565b7f45524331313535576974685465726d696e757353746f726167653a207472616e60008201527f7366657220746f20746865207a65726f20616464726573730000000000000000602082015250565b60006125286038836119da565b9150612533826124cc565b604082019050919050565b600060208201905081810360008301526125578161251b565b9050919050565b7f45524331313535576974685465726d696e757353746f726167653a205f73616660008201527f6542617463685472616e7366657246726f6d202d2d20706f6f6c206973206e6f60208201527f74207472616e7366657261626c65000000000000000000000000000000000000604082015250565b60006125e0604e836119da565b91506125eb8261255e565b606082019050919050565b6000602082019050818103600083015261260f816125d3565b9050919050565b7f45524331313535576974685465726d696e757353746f726167653a20696e737560008201527f6666696369656e742062616c616e636520666f72207472616e73666572000000602082015250565b6000612672603d836119da565b915061267d82612616565b604082019050919050565b600060208201905081810360008301526126a181612665565b9050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b60006126e282611807565b91506126ed83611807565b9250828201905080821115612705576127046126a8565b5b92915050565b600060408201905081810360008301526127258185611ee8565b905081810360208301526127398184611ee8565b90509392505050565b7f45524331313535576974685465726d696e757353746f726167653a207365747460008201527f696e6720617070726f76616c2073746174757320666f722073656c6600000000602082015250565b600061279e603c836119da565b91506127a982612742565b604082019050919050565b600060208201905081810360008301526127cd81612791565b9050919050565b7f45524331313535576974685465726d696e757353746f726167653a205f73616660008201527f655472616e7366657246726f6d202d2d20706f6f6c206973206e6f742074726160208201527f6e7366657261626c650000000000000000000000000000000000000000000000604082015250565b60006128566049836119da565b9150612861826127d4565b606082019050919050565b6000602082019050818103600083015261288581612849565b9050919050565b60006040820190506128a1600083018561187d565b6128ae602083018461187d565b9392505050565b6128be816117c9565b82525050565b600081519050919050565b600082825260208201905092915050565b60006128eb826128c4565b6128f581856128cf565b93506129058185602086016119eb565b61290e81611a15565b840191505092915050565b600060a08201905061292e60008301886128b5565b61293b60208301876128b5565b818103604083015261294d8186611ee8565b905081810360608301526129618185611ee8565b9050818103608083015261297581846128e0565b90509695505050505050565b600081519050612990816118d3565b92915050565b6000602082840312156129ac576129ab61179f565b5b60006129ba84828501612981565b91505092915050565b60008160e01c9050919050565b600060033d11156129ef5760046000803e6129ec6000516129c3565b90505b90565b600060443d10612a7f57612a04611795565b60043d036004823e80513d602482011167ffffffffffffffff82111715612a2c575050612a7f565b808201805167ffffffffffffffff811115612a4a5750505050612a7f565b80602083010160043d038501811115612a67575050505050612a7f565b612a7682602001850186611ab5565b82955050505050505b90565b7f45524331313535576974685465726d696e757353746f726167653a207472616e60008201527f7366657220746f206e6f6e2045524331313535526563656976657220696d706c60208201527f656d656e74657200000000000000000000000000000000000000000000000000604082015250565b6000612b046047836119da565b9150612b0f82612a82565b606082019050919050565b60006020820190508181036000830152612b3381612af7565b9050919050565b7f45524331313535576974685465726d696e757353746f726167653a204552433160008201527f31353552656365697665722072656a656374656420746f6b656e730000000000602082015250565b6000612b96603b836119da565b9150612ba182612b3a565b604082019050919050565b60006020820190508181036000830152612bc581612b89565b9050919050565b600060a082019050612be160008301886128b5565b612bee60208301876128b5565b612bfb604083018661187d565b612c08606083018561187d565b8181036080830152612c1a81846128e0565b9050969550505050505056fea2646970667358221220338b10d18fb75081ee89fd40955957fae15f555d66eae80710ae62ff14b9941264736f6c63430008180033",
}

// ERC1155WithTerminusStorageABI is the input ABI used to generate the binding from.
// Deprecated: Use ERC1155WithTerminusStorageMetaData.ABI instead.
var ERC1155WithTerminusStorageABI = ERC1155WithTerminusStorageMetaData.ABI

// ERC1155WithTerminusStorageBin is the compiled bytecode used for deploying new contracts.
// Deprecated: Use ERC1155WithTerminusStorageMetaData.Bin instead.
var ERC1155WithTerminusStorageBin = ERC1155WithTerminusStorageMetaData.Bin

// DeployERC1155WithTerminusStorage deploys a new Ethereum contract, binding an instance of ERC1155WithTerminusStorage to it.
func DeployERC1155WithTerminusStorage(auth *bind.TransactOpts, backend bind.ContractBackend) (common.Address, *types.Transaction, *ERC1155WithTerminusStorage, error) {
	parsed, err := ERC1155WithTerminusStorageMetaData.GetAbi()
	if err != nil {
		return common.Address{}, nil, nil, err
	}
	if parsed == nil {
		return common.Address{}, nil, nil, errors.New("GetABI returned nil")
	}

	address, tx, contract, err := bind.DeployContract(auth, *parsed, common.FromHex(ERC1155WithTerminusStorageBin), backend)
	if err != nil {
		return common.Address{}, nil, nil, err
	}
	return address, tx, &ERC1155WithTerminusStorage{ERC1155WithTerminusStorageCaller: ERC1155WithTerminusStorageCaller{contract: contract}, ERC1155WithTerminusStorageTransactor: ERC1155WithTerminusStorageTransactor{contract: contract}, ERC1155WithTerminusStorageFilterer: ERC1155WithTerminusStorageFilterer{contract: contract}}, nil
}

// ERC1155WithTerminusStorage is an auto generated Go binding around an Ethereum contract.
type ERC1155WithTerminusStorage struct {
	ERC1155WithTerminusStorageCaller     // Read-only binding to the contract
	ERC1155WithTerminusStorageTransactor // Write-only binding to the contract
	ERC1155WithTerminusStorageFilterer   // Log filterer for contract events
}

// ERC1155WithTerminusStorageCaller is an auto generated read-only Go binding around an Ethereum contract.
type ERC1155WithTerminusStorageCaller struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// ERC1155WithTerminusStorageTransactor is an auto generated write-only Go binding around an Ethereum contract.
type ERC1155WithTerminusStorageTransactor struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// ERC1155WithTerminusStorageFilterer is an auto generated log filtering Go binding around an Ethereum contract events.
type ERC1155WithTerminusStorageFilterer struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// ERC1155WithTerminusStorageSession is an auto generated Go binding around an Ethereum contract,
// with pre-set call and transact options.
type ERC1155WithTerminusStorageSession struct {
	Contract     *ERC1155WithTerminusStorage // Generic contract binding to set the session for
	CallOpts     bind.CallOpts               // Call options to use throughout this session
	TransactOpts bind.TransactOpts           // Transaction auth options to use throughout this session
}

// ERC1155WithTerminusStorageCallerSession is an auto generated read-only Go binding around an Ethereum contract,
// with pre-set call options.
type ERC1155WithTerminusStorageCallerSession struct {
	Contract *ERC1155WithTerminusStorageCaller // Generic contract caller binding to set the session for
	CallOpts bind.CallOpts                     // Call options to use throughout this session
}

// ERC1155WithTerminusStorageTransactorSession is an auto generated write-only Go binding around an Ethereum contract,
// with pre-set transact options.
type ERC1155WithTerminusStorageTransactorSession struct {
	Contract     *ERC1155WithTerminusStorageTransactor // Generic contract transactor binding to set the session for
	TransactOpts bind.TransactOpts                     // Transaction auth options to use throughout this session
}

// ERC1155WithTerminusStorageRaw is an auto generated low-level Go binding around an Ethereum contract.
type ERC1155WithTerminusStorageRaw struct {
	Contract *ERC1155WithTerminusStorage // Generic contract binding to access the raw methods on
}

// ERC1155WithTerminusStorageCallerRaw is an auto generated low-level read-only Go binding around an Ethereum contract.
type ERC1155WithTerminusStorageCallerRaw struct {
	Contract *ERC1155WithTerminusStorageCaller // Generic read-only contract binding to access the raw methods on
}

// ERC1155WithTerminusStorageTransactorRaw is an auto generated low-level write-only Go binding around an Ethereum contract.
type ERC1155WithTerminusStorageTransactorRaw struct {
	Contract *ERC1155WithTerminusStorageTransactor // Generic write-only contract binding to access the raw methods on
}

// NewERC1155WithTerminusStorage creates a new instance of ERC1155WithTerminusStorage, bound to a specific deployed contract.
func NewERC1155WithTerminusStorage(address common.Address, backend bind.ContractBackend) (*ERC1155WithTerminusStorage, error) {
	contract, err := bindERC1155WithTerminusStorage(address, backend, backend, backend)
	if err != nil {
		return nil, err
	}
	return &ERC1155WithTerminusStorage{ERC1155WithTerminusStorageCaller: ERC1155WithTerminusStorageCaller{contract: contract}, ERC1155WithTerminusStorageTransactor: ERC1155WithTerminusStorageTransactor{contract: contract}, ERC1155WithTerminusStorageFilterer: ERC1155WithTerminusStorageFilterer{contract: contract}}, nil
}

// NewERC1155WithTerminusStorageCaller creates a new read-only instance of ERC1155WithTerminusStorage, bound to a specific deployed contract.
func NewERC1155WithTerminusStorageCaller(address common.Address, caller bind.ContractCaller) (*ERC1155WithTerminusStorageCaller, error) {
	contract, err := bindERC1155WithTerminusStorage(address, caller, nil, nil)
	if err != nil {
		return nil, err
	}
	return &ERC1155WithTerminusStorageCaller{contract: contract}, nil
}

// NewERC1155WithTerminusStorageTransactor creates a new write-only instance of ERC1155WithTerminusStorage, bound to a specific deployed contract.
func NewERC1155WithTerminusStorageTransactor(address common.Address, transactor bind.ContractTransactor) (*ERC1155WithTerminusStorageTransactor, error) {
	contract, err := bindERC1155WithTerminusStorage(address, nil, transactor, nil)
	if err != nil {
		return nil, err
	}
	return &ERC1155WithTerminusStorageTransactor{contract: contract}, nil
}

// NewERC1155WithTerminusStorageFilterer creates a new log filterer instance of ERC1155WithTerminusStorage, bound to a specific deployed contract.
func NewERC1155WithTerminusStorageFilterer(address common.Address, filterer bind.ContractFilterer) (*ERC1155WithTerminusStorageFilterer, error) {
	contract, err := bindERC1155WithTerminusStorage(address, nil, nil, filterer)
	if err != nil {
		return nil, err
	}
	return &ERC1155WithTerminusStorageFilterer{contract: contract}, nil
}

// bindERC1155WithTerminusStorage binds a generic wrapper to an already deployed contract.
func bindERC1155WithTerminusStorage(address common.Address, caller bind.ContractCaller, transactor bind.ContractTransactor, filterer bind.ContractFilterer) (*bind.BoundContract, error) {
	parsed, err := ERC1155WithTerminusStorageMetaData.GetAbi()
	if err != nil {
		return nil, err
	}
	return bind.NewBoundContract(address, *parsed, caller, transactor, filterer), nil
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_ERC1155WithTerminusStorage *ERC1155WithTerminusStorageRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _ERC1155WithTerminusStorage.Contract.ERC1155WithTerminusStorageCaller.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_ERC1155WithTerminusStorage *ERC1155WithTerminusStorageRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _ERC1155WithTerminusStorage.Contract.ERC1155WithTerminusStorageTransactor.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_ERC1155WithTerminusStorage *ERC1155WithTerminusStorageRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _ERC1155WithTerminusStorage.Contract.ERC1155WithTerminusStorageTransactor.contract.Transact(opts, method, params...)
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_ERC1155WithTerminusStorage *ERC1155WithTerminusStorageCallerRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _ERC1155WithTerminusStorage.Contract.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_ERC1155WithTerminusStorage *ERC1155WithTerminusStorageTransactorRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _ERC1155WithTerminusStorage.Contract.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_ERC1155WithTerminusStorage *ERC1155WithTerminusStorageTransactorRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _ERC1155WithTerminusStorage.Contract.contract.Transact(opts, method, params...)
}

// BalanceOf is a free data retrieval call binding the contract method 0x00fdd58e.
//
// Solidity: function balanceOf(address account, uint256 id) view returns(uint256)
func (_ERC1155WithTerminusStorage *ERC1155WithTerminusStorageCaller) BalanceOf(opts *bind.CallOpts, account common.Address, id *big.Int) (*big.Int, error) {
	var out []interface{}
	err := _ERC1155WithTerminusStorage.contract.Call(opts, &out, "balanceOf", account, id)

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// BalanceOf is a free data retrieval call binding the contract method 0x00fdd58e.
//
// Solidity: function balanceOf(address account, uint256 id) view returns(uint256)
func (_ERC1155WithTerminusStorage *ERC1155WithTerminusStorageSession) BalanceOf(account common.Address, id *big.Int) (*big.Int, error) {
	return _ERC1155WithTerminusStorage.Contract.BalanceOf(&_ERC1155WithTerminusStorage.CallOpts, account, id)
}

// BalanceOf is a free data retrieval call binding the contract method 0x00fdd58e.
//
// Solidity: function balanceOf(address account, uint256 id) view returns(uint256)
func (_ERC1155WithTerminusStorage *ERC1155WithTerminusStorageCallerSession) BalanceOf(account common.Address, id *big.Int) (*big.Int, error) {
	return _ERC1155WithTerminusStorage.Contract.BalanceOf(&_ERC1155WithTerminusStorage.CallOpts, account, id)
}

// BalanceOfBatch is a free data retrieval call binding the contract method 0x4e1273f4.
//
// Solidity: function balanceOfBatch(address[] accounts, uint256[] ids) view returns(uint256[])
func (_ERC1155WithTerminusStorage *ERC1155WithTerminusStorageCaller) BalanceOfBatch(opts *bind.CallOpts, accounts []common.Address, ids []*big.Int) ([]*big.Int, error) {
	var out []interface{}
	err := _ERC1155WithTerminusStorage.contract.Call(opts, &out, "balanceOfBatch", accounts, ids)

	if err != nil {
		return *new([]*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new([]*big.Int)).(*[]*big.Int)

	return out0, err

}

// BalanceOfBatch is a free data retrieval call binding the contract method 0x4e1273f4.
//
// Solidity: function balanceOfBatch(address[] accounts, uint256[] ids) view returns(uint256[])
func (_ERC1155WithTerminusStorage *ERC1155WithTerminusStorageSession) BalanceOfBatch(accounts []common.Address, ids []*big.Int) ([]*big.Int, error) {
	return _ERC1155WithTerminusStorage.Contract.BalanceOfBatch(&_ERC1155WithTerminusStorage.CallOpts, accounts, ids)
}

// BalanceOfBatch is a free data retrieval call binding the contract method 0x4e1273f4.
//
// Solidity: function balanceOfBatch(address[] accounts, uint256[] ids) view returns(uint256[])
func (_ERC1155WithTerminusStorage *ERC1155WithTerminusStorageCallerSession) BalanceOfBatch(accounts []common.Address, ids []*big.Int) ([]*big.Int, error) {
	return _ERC1155WithTerminusStorage.Contract.BalanceOfBatch(&_ERC1155WithTerminusStorage.CallOpts, accounts, ids)
}

// IsApprovedForAll is a free data retrieval call binding the contract method 0xe985e9c5.
//
// Solidity: function isApprovedForAll(address account, address operator) view returns(bool)
func (_ERC1155WithTerminusStorage *ERC1155WithTerminusStorageCaller) IsApprovedForAll(opts *bind.CallOpts, account common.Address, operator common.Address) (bool, error) {
	var out []interface{}
	err := _ERC1155WithTerminusStorage.contract.Call(opts, &out, "isApprovedForAll", account, operator)

	if err != nil {
		return *new(bool), err
	}

	out0 := *abi.ConvertType(out[0], new(bool)).(*bool)

	return out0, err

}

// IsApprovedForAll is a free data retrieval call binding the contract method 0xe985e9c5.
//
// Solidity: function isApprovedForAll(address account, address operator) view returns(bool)
func (_ERC1155WithTerminusStorage *ERC1155WithTerminusStorageSession) IsApprovedForAll(account common.Address, operator common.Address) (bool, error) {
	return _ERC1155WithTerminusStorage.Contract.IsApprovedForAll(&_ERC1155WithTerminusStorage.CallOpts, account, operator)
}

// IsApprovedForAll is a free data retrieval call binding the contract method 0xe985e9c5.
//
// Solidity: function isApprovedForAll(address account, address operator) view returns(bool)
func (_ERC1155WithTerminusStorage *ERC1155WithTerminusStorageCallerSession) IsApprovedForAll(account common.Address, operator common.Address) (bool, error) {
	return _ERC1155WithTerminusStorage.Contract.IsApprovedForAll(&_ERC1155WithTerminusStorage.CallOpts, account, operator)
}

// IsApprovedForPool is a free data retrieval call binding the contract method 0x027b3fc2.
//
// Solidity: function isApprovedForPool(uint256 poolID, address operator) view returns(bool)
func (_ERC1155WithTerminusStorage *ERC1155WithTerminusStorageCaller) IsApprovedForPool(opts *bind.CallOpts, poolID *big.Int, operator common.Address) (bool, error) {
	var out []interface{}
	err := _ERC1155WithTerminusStorage.contract.Call(opts, &out, "isApprovedForPool", poolID, operator)

	if err != nil {
		return *new(bool), err
	}

	out0 := *abi.ConvertType(out[0], new(bool)).(*bool)

	return out0, err

}

// IsApprovedForPool is a free data retrieval call binding the contract method 0x027b3fc2.
//
// Solidity: function isApprovedForPool(uint256 poolID, address operator) view returns(bool)
func (_ERC1155WithTerminusStorage *ERC1155WithTerminusStorageSession) IsApprovedForPool(poolID *big.Int, operator common.Address) (bool, error) {
	return _ERC1155WithTerminusStorage.Contract.IsApprovedForPool(&_ERC1155WithTerminusStorage.CallOpts, poolID, operator)
}

// IsApprovedForPool is a free data retrieval call binding the contract method 0x027b3fc2.
//
// Solidity: function isApprovedForPool(uint256 poolID, address operator) view returns(bool)
func (_ERC1155WithTerminusStorage *ERC1155WithTerminusStorageCallerSession) IsApprovedForPool(poolID *big.Int, operator common.Address) (bool, error) {
	return _ERC1155WithTerminusStorage.Contract.IsApprovedForPool(&_ERC1155WithTerminusStorage.CallOpts, poolID, operator)
}

// SupportsInterface is a free data retrieval call binding the contract method 0x01ffc9a7.
//
// Solidity: function supportsInterface(bytes4 interfaceId) view returns(bool)
func (_ERC1155WithTerminusStorage *ERC1155WithTerminusStorageCaller) SupportsInterface(opts *bind.CallOpts, interfaceId [4]byte) (bool, error) {
	var out []interface{}
	err := _ERC1155WithTerminusStorage.contract.Call(opts, &out, "supportsInterface", interfaceId)

	if err != nil {
		return *new(bool), err
	}

	out0 := *abi.ConvertType(out[0], new(bool)).(*bool)

	return out0, err

}

// SupportsInterface is a free data retrieval call binding the contract method 0x01ffc9a7.
//
// Solidity: function supportsInterface(bytes4 interfaceId) view returns(bool)
func (_ERC1155WithTerminusStorage *ERC1155WithTerminusStorageSession) SupportsInterface(interfaceId [4]byte) (bool, error) {
	return _ERC1155WithTerminusStorage.Contract.SupportsInterface(&_ERC1155WithTerminusStorage.CallOpts, interfaceId)
}

// SupportsInterface is a free data retrieval call binding the contract method 0x01ffc9a7.
//
// Solidity: function supportsInterface(bytes4 interfaceId) view returns(bool)
func (_ERC1155WithTerminusStorage *ERC1155WithTerminusStorageCallerSession) SupportsInterface(interfaceId [4]byte) (bool, error) {
	return _ERC1155WithTerminusStorage.Contract.SupportsInterface(&_ERC1155WithTerminusStorage.CallOpts, interfaceId)
}

// Uri is a free data retrieval call binding the contract method 0x0e89341c.
//
// Solidity: function uri(uint256 poolID) view returns(string)
func (_ERC1155WithTerminusStorage *ERC1155WithTerminusStorageCaller) Uri(opts *bind.CallOpts, poolID *big.Int) (string, error) {
	var out []interface{}
	err := _ERC1155WithTerminusStorage.contract.Call(opts, &out, "uri", poolID)

	if err != nil {
		return *new(string), err
	}

	out0 := *abi.ConvertType(out[0], new(string)).(*string)

	return out0, err

}

// Uri is a free data retrieval call binding the contract method 0x0e89341c.
//
// Solidity: function uri(uint256 poolID) view returns(string)
func (_ERC1155WithTerminusStorage *ERC1155WithTerminusStorageSession) Uri(poolID *big.Int) (string, error) {
	return _ERC1155WithTerminusStorage.Contract.Uri(&_ERC1155WithTerminusStorage.CallOpts, poolID)
}

// Uri is a free data retrieval call binding the contract method 0x0e89341c.
//
// Solidity: function uri(uint256 poolID) view returns(string)
func (_ERC1155WithTerminusStorage *ERC1155WithTerminusStorageCallerSession) Uri(poolID *big.Int) (string, error) {
	return _ERC1155WithTerminusStorage.Contract.Uri(&_ERC1155WithTerminusStorage.CallOpts, poolID)
}

// ApproveForPool is a paid mutator transaction binding the contract method 0x85bc82e2.
//
// Solidity: function approveForPool(uint256 poolID, address operator) returns()
func (_ERC1155WithTerminusStorage *ERC1155WithTerminusStorageTransactor) ApproveForPool(opts *bind.TransactOpts, poolID *big.Int, operator common.Address) (*types.Transaction, error) {
	return _ERC1155WithTerminusStorage.contract.Transact(opts, "approveForPool", poolID, operator)
}

// ApproveForPool is a paid mutator transaction binding the contract method 0x85bc82e2.
//
// Solidity: function approveForPool(uint256 poolID, address operator) returns()
func (_ERC1155WithTerminusStorage *ERC1155WithTerminusStorageSession) ApproveForPool(poolID *big.Int, operator common.Address) (*types.Transaction, error) {
	return _ERC1155WithTerminusStorage.Contract.ApproveForPool(&_ERC1155WithTerminusStorage.TransactOpts, poolID, operator)
}

// ApproveForPool is a paid mutator transaction binding the contract method 0x85bc82e2.
//
// Solidity: function approveForPool(uint256 poolID, address operator) returns()
func (_ERC1155WithTerminusStorage *ERC1155WithTerminusStorageTransactorSession) ApproveForPool(poolID *big.Int, operator common.Address) (*types.Transaction, error) {
	return _ERC1155WithTerminusStorage.Contract.ApproveForPool(&_ERC1155WithTerminusStorage.TransactOpts, poolID, operator)
}

// SafeBatchTransferFrom is a paid mutator transaction binding the contract method 0x2eb2c2d6.
//
// Solidity: function safeBatchTransferFrom(address from, address to, uint256[] ids, uint256[] amounts, bytes data) returns()
func (_ERC1155WithTerminusStorage *ERC1155WithTerminusStorageTransactor) SafeBatchTransferFrom(opts *bind.TransactOpts, from common.Address, to common.Address, ids []*big.Int, amounts []*big.Int, data []byte) (*types.Transaction, error) {
	return _ERC1155WithTerminusStorage.contract.Transact(opts, "safeBatchTransferFrom", from, to, ids, amounts, data)
}

// SafeBatchTransferFrom is a paid mutator transaction binding the contract method 0x2eb2c2d6.
//
// Solidity: function safeBatchTransferFrom(address from, address to, uint256[] ids, uint256[] amounts, bytes data) returns()
func (_ERC1155WithTerminusStorage *ERC1155WithTerminusStorageSession) SafeBatchTransferFrom(from common.Address, to common.Address, ids []*big.Int, amounts []*big.Int, data []byte) (*types.Transaction, error) {
	return _ERC1155WithTerminusStorage.Contract.SafeBatchTransferFrom(&_ERC1155WithTerminusStorage.TransactOpts, from, to, ids, amounts, data)
}

// SafeBatchTransferFrom is a paid mutator transaction binding the contract method 0x2eb2c2d6.
//
// Solidity: function safeBatchTransferFrom(address from, address to, uint256[] ids, uint256[] amounts, bytes data) returns()
func (_ERC1155WithTerminusStorage *ERC1155WithTerminusStorageTransactorSession) SafeBatchTransferFrom(from common.Address, to common.Address, ids []*big.Int, amounts []*big.Int, data []byte) (*types.Transaction, error) {
	return _ERC1155WithTerminusStorage.Contract.SafeBatchTransferFrom(&_ERC1155WithTerminusStorage.TransactOpts, from, to, ids, amounts, data)
}

// SafeTransferFrom is a paid mutator transaction binding the contract method 0xf242432a.
//
// Solidity: function safeTransferFrom(address from, address to, uint256 id, uint256 amount, bytes data) returns()
func (_ERC1155WithTerminusStorage *ERC1155WithTerminusStorageTransactor) SafeTransferFrom(opts *bind.TransactOpts, from common.Address, to common.Address, id *big.Int, amount *big.Int, data []byte) (*types.Transaction, error) {
	return _ERC1155WithTerminusStorage.contract.Transact(opts, "safeTransferFrom", from, to, id, amount, data)
}

// SafeTransferFrom is a paid mutator transaction binding the contract method 0xf242432a.
//
// Solidity: function safeTransferFrom(address from, address to, uint256 id, uint256 amount, bytes data) returns()
func (_ERC1155WithTerminusStorage *ERC1155WithTerminusStorageSession) SafeTransferFrom(from common.Address, to common.Address, id *big.Int, amount *big.Int, data []byte) (*types.Transaction, error) {
	return _ERC1155WithTerminusStorage.Contract.SafeTransferFrom(&_ERC1155WithTerminusStorage.TransactOpts, from, to, id, amount, data)
}

// SafeTransferFrom is a paid mutator transaction binding the contract method 0xf242432a.
//
// Solidity: function safeTransferFrom(address from, address to, uint256 id, uint256 amount, bytes data) returns()
func (_ERC1155WithTerminusStorage *ERC1155WithTerminusStorageTransactorSession) SafeTransferFrom(from common.Address, to common.Address, id *big.Int, amount *big.Int, data []byte) (*types.Transaction, error) {
	return _ERC1155WithTerminusStorage.Contract.SafeTransferFrom(&_ERC1155WithTerminusStorage.TransactOpts, from, to, id, amount, data)
}

// SetApprovalForAll is a paid mutator transaction binding the contract method 0xa22cb465.
//
// Solidity: function setApprovalForAll(address operator, bool approved) returns()
func (_ERC1155WithTerminusStorage *ERC1155WithTerminusStorageTransactor) SetApprovalForAll(opts *bind.TransactOpts, operator common.Address, approved bool) (*types.Transaction, error) {
	return _ERC1155WithTerminusStorage.contract.Transact(opts, "setApprovalForAll", operator, approved)
}

// SetApprovalForAll is a paid mutator transaction binding the contract method 0xa22cb465.
//
// Solidity: function setApprovalForAll(address operator, bool approved) returns()
func (_ERC1155WithTerminusStorage *ERC1155WithTerminusStorageSession) SetApprovalForAll(operator common.Address, approved bool) (*types.Transaction, error) {
	return _ERC1155WithTerminusStorage.Contract.SetApprovalForAll(&_ERC1155WithTerminusStorage.TransactOpts, operator, approved)
}

// SetApprovalForAll is a paid mutator transaction binding the contract method 0xa22cb465.
//
// Solidity: function setApprovalForAll(address operator, bool approved) returns()
func (_ERC1155WithTerminusStorage *ERC1155WithTerminusStorageTransactorSession) SetApprovalForAll(operator common.Address, approved bool) (*types.Transaction, error) {
	return _ERC1155WithTerminusStorage.Contract.SetApprovalForAll(&_ERC1155WithTerminusStorage.TransactOpts, operator, approved)
}

// UnapproveForPool is a paid mutator transaction binding the contract method 0x1fbeae86.
//
// Solidity: function unapproveForPool(uint256 poolID, address operator) returns()
func (_ERC1155WithTerminusStorage *ERC1155WithTerminusStorageTransactor) UnapproveForPool(opts *bind.TransactOpts, poolID *big.Int, operator common.Address) (*types.Transaction, error) {
	return _ERC1155WithTerminusStorage.contract.Transact(opts, "unapproveForPool", poolID, operator)
}

// UnapproveForPool is a paid mutator transaction binding the contract method 0x1fbeae86.
//
// Solidity: function unapproveForPool(uint256 poolID, address operator) returns()
func (_ERC1155WithTerminusStorage *ERC1155WithTerminusStorageSession) UnapproveForPool(poolID *big.Int, operator common.Address) (*types.Transaction, error) {
	return _ERC1155WithTerminusStorage.Contract.UnapproveForPool(&_ERC1155WithTerminusStorage.TransactOpts, poolID, operator)
}

// UnapproveForPool is a paid mutator transaction binding the contract method 0x1fbeae86.
//
// Solidity: function unapproveForPool(uint256 poolID, address operator) returns()
func (_ERC1155WithTerminusStorage *ERC1155WithTerminusStorageTransactorSession) UnapproveForPool(poolID *big.Int, operator common.Address) (*types.Transaction, error) {
	return _ERC1155WithTerminusStorage.Contract.UnapproveForPool(&_ERC1155WithTerminusStorage.TransactOpts, poolID, operator)
}

// ERC1155WithTerminusStorageApprovalForAllIterator is returned from FilterApprovalForAll and is used to iterate over the raw logs and unpacked data for ApprovalForAll events raised by the ERC1155WithTerminusStorage contract.
type ERC1155WithTerminusStorageApprovalForAllIterator struct {
	Event *ERC1155WithTerminusStorageApprovalForAll // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *ERC1155WithTerminusStorageApprovalForAllIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(ERC1155WithTerminusStorageApprovalForAll)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(ERC1155WithTerminusStorageApprovalForAll)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *ERC1155WithTerminusStorageApprovalForAllIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *ERC1155WithTerminusStorageApprovalForAllIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// ERC1155WithTerminusStorageApprovalForAll represents a ApprovalForAll event raised by the ERC1155WithTerminusStorage contract.
type ERC1155WithTerminusStorageApprovalForAll struct {
	Account  common.Address
	Operator common.Address
	Approved bool
	Raw      types.Log // Blockchain specific contextual infos
}

// FilterApprovalForAll is a free log retrieval operation binding the contract event 0x17307eab39ab6107e8899845ad3d59bd9653f200f220920489ca2b5937696c31.
//
// Solidity: event ApprovalForAll(address indexed account, address indexed operator, bool approved)
func (_ERC1155WithTerminusStorage *ERC1155WithTerminusStorageFilterer) FilterApprovalForAll(opts *bind.FilterOpts, account []common.Address, operator []common.Address) (*ERC1155WithTerminusStorageApprovalForAllIterator, error) {

	var accountRule []interface{}
	for _, accountItem := range account {
		accountRule = append(accountRule, accountItem)
	}
	var operatorRule []interface{}
	for _, operatorItem := range operator {
		operatorRule = append(operatorRule, operatorItem)
	}

	logs, sub, err := _ERC1155WithTerminusStorage.contract.FilterLogs(opts, "ApprovalForAll", accountRule, operatorRule)
	if err != nil {
		return nil, err
	}
	return &ERC1155WithTerminusStorageApprovalForAllIterator{contract: _ERC1155WithTerminusStorage.contract, event: "ApprovalForAll", logs: logs, sub: sub}, nil
}

// WatchApprovalForAll is a free log subscription operation binding the contract event 0x17307eab39ab6107e8899845ad3d59bd9653f200f220920489ca2b5937696c31.
//
// Solidity: event ApprovalForAll(address indexed account, address indexed operator, bool approved)
func (_ERC1155WithTerminusStorage *ERC1155WithTerminusStorageFilterer) WatchApprovalForAll(opts *bind.WatchOpts, sink chan<- *ERC1155WithTerminusStorageApprovalForAll, account []common.Address, operator []common.Address) (event.Subscription, error) {

	var accountRule []interface{}
	for _, accountItem := range account {
		accountRule = append(accountRule, accountItem)
	}
	var operatorRule []interface{}
	for _, operatorItem := range operator {
		operatorRule = append(operatorRule, operatorItem)
	}

	logs, sub, err := _ERC1155WithTerminusStorage.contract.WatchLogs(opts, "ApprovalForAll", accountRule, operatorRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(ERC1155WithTerminusStorageApprovalForAll)
				if err := _ERC1155WithTerminusStorage.contract.UnpackLog(event, "ApprovalForAll", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseApprovalForAll is a log parse operation binding the contract event 0x17307eab39ab6107e8899845ad3d59bd9653f200f220920489ca2b5937696c31.
//
// Solidity: event ApprovalForAll(address indexed account, address indexed operator, bool approved)
func (_ERC1155WithTerminusStorage *ERC1155WithTerminusStorageFilterer) ParseApprovalForAll(log types.Log) (*ERC1155WithTerminusStorageApprovalForAll, error) {
	event := new(ERC1155WithTerminusStorageApprovalForAll)
	if err := _ERC1155WithTerminusStorage.contract.UnpackLog(event, "ApprovalForAll", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// ERC1155WithTerminusStorageTransferBatchIterator is returned from FilterTransferBatch and is used to iterate over the raw logs and unpacked data for TransferBatch events raised by the ERC1155WithTerminusStorage contract.
type ERC1155WithTerminusStorageTransferBatchIterator struct {
	Event *ERC1155WithTerminusStorageTransferBatch // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *ERC1155WithTerminusStorageTransferBatchIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(ERC1155WithTerminusStorageTransferBatch)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(ERC1155WithTerminusStorageTransferBatch)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *ERC1155WithTerminusStorageTransferBatchIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *ERC1155WithTerminusStorageTransferBatchIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// ERC1155WithTerminusStorageTransferBatch represents a TransferBatch event raised by the ERC1155WithTerminusStorage contract.
type ERC1155WithTerminusStorageTransferBatch struct {
	Operator common.Address
	From     common.Address
	To       common.Address
	Ids      []*big.Int
	Values   []*big.Int
	Raw      types.Log // Blockchain specific contextual infos
}

// FilterTransferBatch is a free log retrieval operation binding the contract event 0x4a39dc06d4c0dbc64b70af90fd698a233a518aa5d07e595d983b8c0526c8f7fb.
//
// Solidity: event TransferBatch(address indexed operator, address indexed from, address indexed to, uint256[] ids, uint256[] values)
func (_ERC1155WithTerminusStorage *ERC1155WithTerminusStorageFilterer) FilterTransferBatch(opts *bind.FilterOpts, operator []common.Address, from []common.Address, to []common.Address) (*ERC1155WithTerminusStorageTransferBatchIterator, error) {

	var operatorRule []interface{}
	for _, operatorItem := range operator {
		operatorRule = append(operatorRule, operatorItem)
	}
	var fromRule []interface{}
	for _, fromItem := range from {
		fromRule = append(fromRule, fromItem)
	}
	var toRule []interface{}
	for _, toItem := range to {
		toRule = append(toRule, toItem)
	}

	logs, sub, err := _ERC1155WithTerminusStorage.contract.FilterLogs(opts, "TransferBatch", operatorRule, fromRule, toRule)
	if err != nil {
		return nil, err
	}
	return &ERC1155WithTerminusStorageTransferBatchIterator{contract: _ERC1155WithTerminusStorage.contract, event: "TransferBatch", logs: logs, sub: sub}, nil
}

// WatchTransferBatch is a free log subscription operation binding the contract event 0x4a39dc06d4c0dbc64b70af90fd698a233a518aa5d07e595d983b8c0526c8f7fb.
//
// Solidity: event TransferBatch(address indexed operator, address indexed from, address indexed to, uint256[] ids, uint256[] values)
func (_ERC1155WithTerminusStorage *ERC1155WithTerminusStorageFilterer) WatchTransferBatch(opts *bind.WatchOpts, sink chan<- *ERC1155WithTerminusStorageTransferBatch, operator []common.Address, from []common.Address, to []common.Address) (event.Subscription, error) {

	var operatorRule []interface{}
	for _, operatorItem := range operator {
		operatorRule = append(operatorRule, operatorItem)
	}
	var fromRule []interface{}
	for _, fromItem := range from {
		fromRule = append(fromRule, fromItem)
	}
	var toRule []interface{}
	for _, toItem := range to {
		toRule = append(toRule, toItem)
	}

	logs, sub, err := _ERC1155WithTerminusStorage.contract.WatchLogs(opts, "TransferBatch", operatorRule, fromRule, toRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(ERC1155WithTerminusStorageTransferBatch)
				if err := _ERC1155WithTerminusStorage.contract.UnpackLog(event, "TransferBatch", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseTransferBatch is a log parse operation binding the contract event 0x4a39dc06d4c0dbc64b70af90fd698a233a518aa5d07e595d983b8c0526c8f7fb.
//
// Solidity: event TransferBatch(address indexed operator, address indexed from, address indexed to, uint256[] ids, uint256[] values)
func (_ERC1155WithTerminusStorage *ERC1155WithTerminusStorageFilterer) ParseTransferBatch(log types.Log) (*ERC1155WithTerminusStorageTransferBatch, error) {
	event := new(ERC1155WithTerminusStorageTransferBatch)
	if err := _ERC1155WithTerminusStorage.contract.UnpackLog(event, "TransferBatch", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// ERC1155WithTerminusStorageTransferSingleIterator is returned from FilterTransferSingle and is used to iterate over the raw logs and unpacked data for TransferSingle events raised by the ERC1155WithTerminusStorage contract.
type ERC1155WithTerminusStorageTransferSingleIterator struct {
	Event *ERC1155WithTerminusStorageTransferSingle // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *ERC1155WithTerminusStorageTransferSingleIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(ERC1155WithTerminusStorageTransferSingle)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(ERC1155WithTerminusStorageTransferSingle)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *ERC1155WithTerminusStorageTransferSingleIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *ERC1155WithTerminusStorageTransferSingleIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// ERC1155WithTerminusStorageTransferSingle represents a TransferSingle event raised by the ERC1155WithTerminusStorage contract.
type ERC1155WithTerminusStorageTransferSingle struct {
	Operator common.Address
	From     common.Address
	To       common.Address
	Id       *big.Int
	Value    *big.Int
	Raw      types.Log // Blockchain specific contextual infos
}

// FilterTransferSingle is a free log retrieval operation binding the contract event 0xc3d58168c5ae7397731d063d5bbf3d657854427343f4c083240f7aacaa2d0f62.
//
// Solidity: event TransferSingle(address indexed operator, address indexed from, address indexed to, uint256 id, uint256 value)
func (_ERC1155WithTerminusStorage *ERC1155WithTerminusStorageFilterer) FilterTransferSingle(opts *bind.FilterOpts, operator []common.Address, from []common.Address, to []common.Address) (*ERC1155WithTerminusStorageTransferSingleIterator, error) {

	var operatorRule []interface{}
	for _, operatorItem := range operator {
		operatorRule = append(operatorRule, operatorItem)
	}
	var fromRule []interface{}
	for _, fromItem := range from {
		fromRule = append(fromRule, fromItem)
	}
	var toRule []interface{}
	for _, toItem := range to {
		toRule = append(toRule, toItem)
	}

	logs, sub, err := _ERC1155WithTerminusStorage.contract.FilterLogs(opts, "TransferSingle", operatorRule, fromRule, toRule)
	if err != nil {
		return nil, err
	}
	return &ERC1155WithTerminusStorageTransferSingleIterator{contract: _ERC1155WithTerminusStorage.contract, event: "TransferSingle", logs: logs, sub: sub}, nil
}

// WatchTransferSingle is a free log subscription operation binding the contract event 0xc3d58168c5ae7397731d063d5bbf3d657854427343f4c083240f7aacaa2d0f62.
//
// Solidity: event TransferSingle(address indexed operator, address indexed from, address indexed to, uint256 id, uint256 value)
func (_ERC1155WithTerminusStorage *ERC1155WithTerminusStorageFilterer) WatchTransferSingle(opts *bind.WatchOpts, sink chan<- *ERC1155WithTerminusStorageTransferSingle, operator []common.Address, from []common.Address, to []common.Address) (event.Subscription, error) {

	var operatorRule []interface{}
	for _, operatorItem := range operator {
		operatorRule = append(operatorRule, operatorItem)
	}
	var fromRule []interface{}
	for _, fromItem := range from {
		fromRule = append(fromRule, fromItem)
	}
	var toRule []interface{}
	for _, toItem := range to {
		toRule = append(toRule, toItem)
	}

	logs, sub, err := _ERC1155WithTerminusStorage.contract.WatchLogs(opts, "TransferSingle", operatorRule, fromRule, toRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(ERC1155WithTerminusStorageTransferSingle)
				if err := _ERC1155WithTerminusStorage.contract.UnpackLog(event, "TransferSingle", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseTransferSingle is a log parse operation binding the contract event 0xc3d58168c5ae7397731d063d5bbf3d657854427343f4c083240f7aacaa2d0f62.
//
// Solidity: event TransferSingle(address indexed operator, address indexed from, address indexed to, uint256 id, uint256 value)
func (_ERC1155WithTerminusStorage *ERC1155WithTerminusStorageFilterer) ParseTransferSingle(log types.Log) (*ERC1155WithTerminusStorageTransferSingle, error) {
	event := new(ERC1155WithTerminusStorageTransferSingle)
	if err := _ERC1155WithTerminusStorage.contract.UnpackLog(event, "TransferSingle", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// ERC1155WithTerminusStorageURIIterator is returned from FilterURI and is used to iterate over the raw logs and unpacked data for URI events raised by the ERC1155WithTerminusStorage contract.
type ERC1155WithTerminusStorageURIIterator struct {
	Event *ERC1155WithTerminusStorageURI // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *ERC1155WithTerminusStorageURIIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(ERC1155WithTerminusStorageURI)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(ERC1155WithTerminusStorageURI)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *ERC1155WithTerminusStorageURIIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *ERC1155WithTerminusStorageURIIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// ERC1155WithTerminusStorageURI represents a URI event raised by the ERC1155WithTerminusStorage contract.
type ERC1155WithTerminusStorageURI struct {
	Value string
	Id    *big.Int
	Raw   types.Log // Blockchain specific contextual infos
}

// FilterURI is a free log retrieval operation binding the contract event 0x6bb7ff708619ba0610cba295a58592e0451dee2622938c8755667688daf3529b.
//
// Solidity: event URI(string value, uint256 indexed id)
func (_ERC1155WithTerminusStorage *ERC1155WithTerminusStorageFilterer) FilterURI(opts *bind.FilterOpts, id []*big.Int) (*ERC1155WithTerminusStorageURIIterator, error) {

	var idRule []interface{}
	for _, idItem := range id {
		idRule = append(idRule, idItem)
	}

	logs, sub, err := _ERC1155WithTerminusStorage.contract.FilterLogs(opts, "URI", idRule)
	if err != nil {
		return nil, err
	}
	return &ERC1155WithTerminusStorageURIIterator{contract: _ERC1155WithTerminusStorage.contract, event: "URI", logs: logs, sub: sub}, nil
}

// WatchURI is a free log subscription operation binding the contract event 0x6bb7ff708619ba0610cba295a58592e0451dee2622938c8755667688daf3529b.
//
// Solidity: event URI(string value, uint256 indexed id)
func (_ERC1155WithTerminusStorage *ERC1155WithTerminusStorageFilterer) WatchURI(opts *bind.WatchOpts, sink chan<- *ERC1155WithTerminusStorageURI, id []*big.Int) (event.Subscription, error) {

	var idRule []interface{}
	for _, idItem := range id {
		idRule = append(idRule, idItem)
	}

	logs, sub, err := _ERC1155WithTerminusStorage.contract.WatchLogs(opts, "URI", idRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(ERC1155WithTerminusStorageURI)
				if err := _ERC1155WithTerminusStorage.contract.UnpackLog(event, "URI", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseURI is a log parse operation binding the contract event 0x6bb7ff708619ba0610cba295a58592e0451dee2622938c8755667688daf3529b.
//
// Solidity: event URI(string value, uint256 indexed id)
func (_ERC1155WithTerminusStorage *ERC1155WithTerminusStorageFilterer) ParseURI(log types.Log) (*ERC1155WithTerminusStorageURI, error) {
	event := new(ERC1155WithTerminusStorageURI)
	if err := _ERC1155WithTerminusStorage.contract.UnpackLog(event, "URI", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

func CreateERC1155WithTerminusStorageDeploymentCommand() *cobra.Command {
	var keyfile, nonce, password, value, gasPrice, maxFeePerGas, maxPriorityFeePerGas, rpc string
	var gasLimit uint64
	var simulate bool
	var timeout uint

	cmd := &cobra.Command{
		Use:   "deploy",
		Short: "Deploy a new ERC1155WithTerminusStorage contract",
		PreRunE: func(cmd *cobra.Command, args []string) error {
			if keyfile == "" {
				return fmt.Errorf("--keystore not specified (this should be a path to an Ethereum account keystore file)")
			}

			return nil
		},
		RunE: func(cmd *cobra.Command, args []string) error {
			client, clientErr := NewClient(rpc)
			if clientErr != nil {
				return clientErr
			}

			key, keyErr := KeyFromFile(keyfile, password)
			if keyErr != nil {
				return keyErr
			}

			chainIDCtx, cancelChainIDCtx := NewChainContext(timeout)
			defer cancelChainIDCtx()
			chainID, chainIDErr := client.ChainID(chainIDCtx)
			if chainIDErr != nil {
				return chainIDErr
			}

			transactionOpts, transactionOptsErr := bind.NewKeyedTransactorWithChainID(key.PrivateKey, chainID)
			if transactionOptsErr != nil {
				return transactionOptsErr
			}

			SetTransactionParametersFromArgs(transactionOpts, nonce, value, gasPrice, maxFeePerGas, maxPriorityFeePerGas, gasLimit, simulate)

			address, deploymentTransaction, _, deploymentErr := DeployERC1155WithTerminusStorage(
				transactionOpts,
				client,
			)
			if deploymentErr != nil {
				return deploymentErr
			}

			cmd.Printf("Transaction hash: %s\nContract address: %s\n", deploymentTransaction.Hash().Hex(), address.Hex())
			if transactionOpts.NoSend {
				estimationMessage := ethereum.CallMsg{
					From: transactionOpts.From,
					Data: deploymentTransaction.Data(),
				}

				gasEstimationCtx, cancelGasEstimationCtx := NewChainContext(timeout)
				defer cancelGasEstimationCtx()

				gasEstimate, gasEstimateErr := client.EstimateGas(gasEstimationCtx, estimationMessage)
				if gasEstimateErr != nil {
					return gasEstimateErr
				}

				transactionBinary, transactionBinaryErr := deploymentTransaction.MarshalBinary()
				if transactionBinaryErr != nil {
					return transactionBinaryErr
				}
				transactionBinaryHex := hex.EncodeToString(transactionBinary)

				cmd.Printf("Transaction: %s\nEstimated gas: %d\n", transactionBinaryHex, gasEstimate)
			} else {
				cmd.Println("Transaction submitted")
			}

			return nil
		},
	}

	cmd.Flags().StringVar(&rpc, "rpc", "", "URL of the JSONRPC API to use")
	cmd.Flags().StringVar(&keyfile, "keyfile", "", "Path to the keystore file to use for the transaction")
	cmd.Flags().StringVar(&password, "password", "", "Password to use to unlock the keystore (if not specified, you will be prompted for the password when the command executes)")
	cmd.Flags().StringVar(&nonce, "nonce", "", "Nonce to use for the transaction")
	cmd.Flags().StringVar(&value, "value", "", "Value to send with the transaction")
	cmd.Flags().StringVar(&gasPrice, "gas-price", "", "Gas price to use for the transaction")
	cmd.Flags().StringVar(&maxFeePerGas, "max-fee-per-gas", "", "Maximum fee per gas to use for the (EIP-1559) transaction")
	cmd.Flags().StringVar(&maxPriorityFeePerGas, "max-priority-fee-per-gas", "", "Maximum priority fee per gas to use for the (EIP-1559) transaction")
	cmd.Flags().Uint64Var(&gasLimit, "gas-limit", 0, "Gas limit for the transaction")
	cmd.Flags().BoolVar(&simulate, "simulate", false, "Simulate the transaction without sending it")
	cmd.Flags().UintVar(&timeout, "timeout", 60, "Timeout (in seconds) for interactions with the JSONRPC API")

	return cmd
}

func CreateSupportsInterfaceCommand() *cobra.Command {
	var contractAddressRaw, rpc string
	var contractAddress common.Address
	var timeout uint

	var blockNumberRaw, fromAddressRaw string
	var pending bool

	var interfaceId [4]byte
	var interfaceIdRaw string

	var capture0 bool

	cmd := &cobra.Command{
		Use:   "supports-interface",
		Short: "Call the SupportsInterface view method on a ERC1155WithTerminusStorage contract",
		PreRunE: func(cmd *cobra.Command, args []string) error {
			if contractAddressRaw == "" {
				return fmt.Errorf("--contract not specified")
			} else if !common.IsHexAddress(contractAddressRaw) {
				return fmt.Errorf("--contract is not a valid Ethereum address")
			}
			contractAddress = common.HexToAddress(contractAddressRaw)

			var interfaceIdIntermediate []byte

			var interfaceIdIntermediateHexDecodeErr error
			interfaceIdIntermediate, interfaceIdIntermediateHexDecodeErr = hex.DecodeString(interfaceIdRaw)
			if interfaceIdIntermediateHexDecodeErr != nil {
				return interfaceIdIntermediateHexDecodeErr
			}

			copy(interfaceId[:], interfaceIdIntermediate)

			return nil
		},
		RunE: func(cmd *cobra.Command, args []string) error {
			client, clientErr := NewClient(rpc)
			if clientErr != nil {
				return clientErr
			}

			contract, contractErr := NewERC1155WithTerminusStorage(contractAddress, client)
			if contractErr != nil {
				return contractErr
			}

			callOpts := bind.CallOpts{}
			SetCallParametersFromArgs(&callOpts, pending, fromAddressRaw, blockNumberRaw)

			session := ERC1155WithTerminusStorageCallerSession{
				Contract: &contract.ERC1155WithTerminusStorageCaller,
				CallOpts: callOpts,
			}

			var callErr error
			capture0, callErr = session.SupportsInterface(
				interfaceId,
			)
			if callErr != nil {
				return callErr
			}

			cmd.Printf("0: %t\n", capture0)

			return nil
		},
	}

	cmd.Flags().StringVar(&rpc, "rpc", "", "URL of the JSONRPC API to use")
	cmd.Flags().StringVar(&blockNumberRaw, "block", "", "Block number at which to call the view method")
	cmd.Flags().BoolVar(&pending, "pending", false, "Set this flag if it's ok to call the view method against pending state")
	cmd.Flags().UintVar(&timeout, "timeout", 60, "Timeout (in seconds) for interactions with the JSONRPC API")
	cmd.Flags().StringVar(&contractAddressRaw, "contract", "", "Address of the contract to interact with")
	cmd.Flags().StringVar(&fromAddressRaw, "from", "", "Optional address for caller of the view method")

	cmd.Flags().StringVar(&interfaceIdRaw, "interface-id", "", "interface-id argument ([4]byte)")

	return cmd
}
func CreateUriCommand() *cobra.Command {
	var contractAddressRaw, rpc string
	var contractAddress common.Address
	var timeout uint

	var blockNumberRaw, fromAddressRaw string
	var pending bool

	var poolID *big.Int
	var poolIDRaw string

	var capture0 string

	cmd := &cobra.Command{
		Use:   "uri",
		Short: "Call the Uri view method on a ERC1155WithTerminusStorage contract",
		PreRunE: func(cmd *cobra.Command, args []string) error {
			if contractAddressRaw == "" {
				return fmt.Errorf("--contract not specified")
			} else if !common.IsHexAddress(contractAddressRaw) {
				return fmt.Errorf("--contract is not a valid Ethereum address")
			}
			contractAddress = common.HexToAddress(contractAddressRaw)

			if poolIDRaw == "" {
				return fmt.Errorf("--pool-id argument not specified")
			}
			poolID = new(big.Int)
			poolID.SetString(poolIDRaw, 0)

			return nil
		},
		RunE: func(cmd *cobra.Command, args []string) error {
			client, clientErr := NewClient(rpc)
			if clientErr != nil {
				return clientErr
			}

			contract, contractErr := NewERC1155WithTerminusStorage(contractAddress, client)
			if contractErr != nil {
				return contractErr
			}

			callOpts := bind.CallOpts{}
			SetCallParametersFromArgs(&callOpts, pending, fromAddressRaw, blockNumberRaw)

			session := ERC1155WithTerminusStorageCallerSession{
				Contract: &contract.ERC1155WithTerminusStorageCaller,
				CallOpts: callOpts,
			}

			var callErr error
			capture0, callErr = session.Uri(
				poolID,
			)
			if callErr != nil {
				return callErr
			}

			cmd.Printf("0: %s\n", capture0)

			return nil
		},
	}

	cmd.Flags().StringVar(&rpc, "rpc", "", "URL of the JSONRPC API to use")
	cmd.Flags().StringVar(&blockNumberRaw, "block", "", "Block number at which to call the view method")
	cmd.Flags().BoolVar(&pending, "pending", false, "Set this flag if it's ok to call the view method against pending state")
	cmd.Flags().UintVar(&timeout, "timeout", 60, "Timeout (in seconds) for interactions with the JSONRPC API")
	cmd.Flags().StringVar(&contractAddressRaw, "contract", "", "Address of the contract to interact with")
	cmd.Flags().StringVar(&fromAddressRaw, "from", "", "Optional address for caller of the view method")

	cmd.Flags().StringVar(&poolIDRaw, "pool-id", "", "pool-id argument")

	return cmd
}
func CreateBalanceOfCommand() *cobra.Command {
	var contractAddressRaw, rpc string
	var contractAddress common.Address
	var timeout uint

	var blockNumberRaw, fromAddressRaw string
	var pending bool

	var account common.Address
	var accountRaw string
	var id *big.Int
	var idRaw string

	var capture0 *big.Int

	cmd := &cobra.Command{
		Use:   "balance-of",
		Short: "Call the BalanceOf view method on a ERC1155WithTerminusStorage contract",
		PreRunE: func(cmd *cobra.Command, args []string) error {
			if contractAddressRaw == "" {
				return fmt.Errorf("--contract not specified")
			} else if !common.IsHexAddress(contractAddressRaw) {
				return fmt.Errorf("--contract is not a valid Ethereum address")
			}
			contractAddress = common.HexToAddress(contractAddressRaw)

			if accountRaw == "" {
				return fmt.Errorf("--account argument not specified")
			} else if !common.IsHexAddress(accountRaw) {
				return fmt.Errorf("--account argument is not a valid Ethereum address")
			}
			account = common.HexToAddress(accountRaw)

			if idRaw == "" {
				return fmt.Errorf("--id argument not specified")
			}
			id = new(big.Int)
			id.SetString(idRaw, 0)

			return nil
		},
		RunE: func(cmd *cobra.Command, args []string) error {
			client, clientErr := NewClient(rpc)
			if clientErr != nil {
				return clientErr
			}

			contract, contractErr := NewERC1155WithTerminusStorage(contractAddress, client)
			if contractErr != nil {
				return contractErr
			}

			callOpts := bind.CallOpts{}
			SetCallParametersFromArgs(&callOpts, pending, fromAddressRaw, blockNumberRaw)

			session := ERC1155WithTerminusStorageCallerSession{
				Contract: &contract.ERC1155WithTerminusStorageCaller,
				CallOpts: callOpts,
			}

			var callErr error
			capture0, callErr = session.BalanceOf(
				account,
				id,
			)
			if callErr != nil {
				return callErr
			}

			cmd.Printf("0: %s\n", capture0.String())

			return nil
		},
	}

	cmd.Flags().StringVar(&rpc, "rpc", "", "URL of the JSONRPC API to use")
	cmd.Flags().StringVar(&blockNumberRaw, "block", "", "Block number at which to call the view method")
	cmd.Flags().BoolVar(&pending, "pending", false, "Set this flag if it's ok to call the view method against pending state")
	cmd.Flags().UintVar(&timeout, "timeout", 60, "Timeout (in seconds) for interactions with the JSONRPC API")
	cmd.Flags().StringVar(&contractAddressRaw, "contract", "", "Address of the contract to interact with")
	cmd.Flags().StringVar(&fromAddressRaw, "from", "", "Optional address for caller of the view method")

	cmd.Flags().StringVar(&accountRaw, "account", "", "account argument (common.Address)")
	cmd.Flags().StringVar(&idRaw, "id", "", "id argument")

	return cmd
}
func CreateBalanceOfBatchCommand() *cobra.Command {
	var contractAddressRaw, rpc string
	var contractAddress common.Address
	var timeout uint

	var blockNumberRaw, fromAddressRaw string
	var pending bool

	var accounts []common.Address
	var accountsRaw string
	var ids []*big.Int
	var idsRaw string

	var capture0 []*big.Int

	cmd := &cobra.Command{
		Use:   "balance-of-batch",
		Short: "Call the BalanceOfBatch view method on a ERC1155WithTerminusStorage contract",
		PreRunE: func(cmd *cobra.Command, args []string) error {
			if contractAddressRaw == "" {
				return fmt.Errorf("--contract not specified")
			} else if !common.IsHexAddress(contractAddressRaw) {
				return fmt.Errorf("--contract is not a valid Ethereum address")
			}
			contractAddress = common.HexToAddress(contractAddressRaw)

			if accountsRaw == "" {
				return fmt.Errorf("--accounts argument not specified")
			} else if strings.HasPrefix(accountsRaw, "@") {
				filename := strings.TrimPrefix(accountsRaw, "@")
				contents, readErr := os.ReadFile(filename)
				if readErr != nil {
					return readErr
				}
				unmarshalErr := json.Unmarshal(contents, &accounts)
				if unmarshalErr != nil {
					return unmarshalErr
				}
			} else {
				unmarshalErr := json.Unmarshal([]byte(accountsRaw), &accounts)
				if unmarshalErr != nil {
					return unmarshalErr
				}
			}

			if idsRaw == "" {
				return fmt.Errorf("--ids argument not specified")
			} else if strings.HasPrefix(idsRaw, "@") {
				filename := strings.TrimPrefix(idsRaw, "@")
				contents, readErr := os.ReadFile(filename)
				if readErr != nil {
					return readErr
				}
				unmarshalErr := json.Unmarshal(contents, &ids)
				if unmarshalErr != nil {
					return unmarshalErr
				}
			} else {
				unmarshalErr := json.Unmarshal([]byte(idsRaw), &ids)
				if unmarshalErr != nil {
					return unmarshalErr
				}
			}

			return nil
		},
		RunE: func(cmd *cobra.Command, args []string) error {
			client, clientErr := NewClient(rpc)
			if clientErr != nil {
				return clientErr
			}

			contract, contractErr := NewERC1155WithTerminusStorage(contractAddress, client)
			if contractErr != nil {
				return contractErr
			}

			callOpts := bind.CallOpts{}
			SetCallParametersFromArgs(&callOpts, pending, fromAddressRaw, blockNumberRaw)

			session := ERC1155WithTerminusStorageCallerSession{
				Contract: &contract.ERC1155WithTerminusStorageCaller,
				CallOpts: callOpts,
			}

			var callErr error
			capture0, callErr = session.BalanceOfBatch(
				accounts,
				ids,
			)
			if callErr != nil {
				return callErr
			}

			cmd.Printf("0: %v\n", capture0)

			return nil
		},
	}

	cmd.Flags().StringVar(&rpc, "rpc", "", "URL of the JSONRPC API to use")
	cmd.Flags().StringVar(&blockNumberRaw, "block", "", "Block number at which to call the view method")
	cmd.Flags().BoolVar(&pending, "pending", false, "Set this flag if it's ok to call the view method against pending state")
	cmd.Flags().UintVar(&timeout, "timeout", 60, "Timeout (in seconds) for interactions with the JSONRPC API")
	cmd.Flags().StringVar(&contractAddressRaw, "contract", "", "Address of the contract to interact with")
	cmd.Flags().StringVar(&fromAddressRaw, "from", "", "Optional address for caller of the view method")

	cmd.Flags().StringVar(&accountsRaw, "accounts", "", "accounts argument ([]common.Address)")
	cmd.Flags().StringVar(&idsRaw, "ids", "", "ids argument ([]*big.Int)")

	return cmd
}
func CreateIsApprovedForAllCommand() *cobra.Command {
	var contractAddressRaw, rpc string
	var contractAddress common.Address
	var timeout uint

	var blockNumberRaw, fromAddressRaw string
	var pending bool

	var account common.Address
	var accountRaw string
	var operator common.Address
	var operatorRaw string

	var capture0 bool

	cmd := &cobra.Command{
		Use:   "is-approved-for-all",
		Short: "Call the IsApprovedForAll view method on a ERC1155WithTerminusStorage contract",
		PreRunE: func(cmd *cobra.Command, args []string) error {
			if contractAddressRaw == "" {
				return fmt.Errorf("--contract not specified")
			} else if !common.IsHexAddress(contractAddressRaw) {
				return fmt.Errorf("--contract is not a valid Ethereum address")
			}
			contractAddress = common.HexToAddress(contractAddressRaw)

			if accountRaw == "" {
				return fmt.Errorf("--account argument not specified")
			} else if !common.IsHexAddress(accountRaw) {
				return fmt.Errorf("--account argument is not a valid Ethereum address")
			}
			account = common.HexToAddress(accountRaw)

			if operatorRaw == "" {
				return fmt.Errorf("--operator argument not specified")
			} else if !common.IsHexAddress(operatorRaw) {
				return fmt.Errorf("--operator argument is not a valid Ethereum address")
			}
			operator = common.HexToAddress(operatorRaw)

			return nil
		},
		RunE: func(cmd *cobra.Command, args []string) error {
			client, clientErr := NewClient(rpc)
			if clientErr != nil {
				return clientErr
			}

			contract, contractErr := NewERC1155WithTerminusStorage(contractAddress, client)
			if contractErr != nil {
				return contractErr
			}

			callOpts := bind.CallOpts{}
			SetCallParametersFromArgs(&callOpts, pending, fromAddressRaw, blockNumberRaw)

			session := ERC1155WithTerminusStorageCallerSession{
				Contract: &contract.ERC1155WithTerminusStorageCaller,
				CallOpts: callOpts,
			}

			var callErr error
			capture0, callErr = session.IsApprovedForAll(
				account,
				operator,
			)
			if callErr != nil {
				return callErr
			}

			cmd.Printf("0: %t\n", capture0)

			return nil
		},
	}

	cmd.Flags().StringVar(&rpc, "rpc", "", "URL of the JSONRPC API to use")
	cmd.Flags().StringVar(&blockNumberRaw, "block", "", "Block number at which to call the view method")
	cmd.Flags().BoolVar(&pending, "pending", false, "Set this flag if it's ok to call the view method against pending state")
	cmd.Flags().UintVar(&timeout, "timeout", 60, "Timeout (in seconds) for interactions with the JSONRPC API")
	cmd.Flags().StringVar(&contractAddressRaw, "contract", "", "Address of the contract to interact with")
	cmd.Flags().StringVar(&fromAddressRaw, "from", "", "Optional address for caller of the view method")

	cmd.Flags().StringVar(&accountRaw, "account", "", "account argument (common.Address)")
	cmd.Flags().StringVar(&operatorRaw, "operator", "", "operator argument (common.Address)")

	return cmd
}
func CreateIsApprovedForPoolCommand() *cobra.Command {
	var contractAddressRaw, rpc string
	var contractAddress common.Address
	var timeout uint

	var blockNumberRaw, fromAddressRaw string
	var pending bool

	var poolID *big.Int
	var poolIDRaw string
	var operator common.Address
	var operatorRaw string

	var capture0 bool

	cmd := &cobra.Command{
		Use:   "is-approved-for-pool",
		Short: "Call the IsApprovedForPool view method on a ERC1155WithTerminusStorage contract",
		PreRunE: func(cmd *cobra.Command, args []string) error {
			if contractAddressRaw == "" {
				return fmt.Errorf("--contract not specified")
			} else if !common.IsHexAddress(contractAddressRaw) {
				return fmt.Errorf("--contract is not a valid Ethereum address")
			}
			contractAddress = common.HexToAddress(contractAddressRaw)

			if poolIDRaw == "" {
				return fmt.Errorf("--pool-id argument not specified")
			}
			poolID = new(big.Int)
			poolID.SetString(poolIDRaw, 0)

			if operatorRaw == "" {
				return fmt.Errorf("--operator argument not specified")
			} else if !common.IsHexAddress(operatorRaw) {
				return fmt.Errorf("--operator argument is not a valid Ethereum address")
			}
			operator = common.HexToAddress(operatorRaw)

			return nil
		},
		RunE: func(cmd *cobra.Command, args []string) error {
			client, clientErr := NewClient(rpc)
			if clientErr != nil {
				return clientErr
			}

			contract, contractErr := NewERC1155WithTerminusStorage(contractAddress, client)
			if contractErr != nil {
				return contractErr
			}

			callOpts := bind.CallOpts{}
			SetCallParametersFromArgs(&callOpts, pending, fromAddressRaw, blockNumberRaw)

			session := ERC1155WithTerminusStorageCallerSession{
				Contract: &contract.ERC1155WithTerminusStorageCaller,
				CallOpts: callOpts,
			}

			var callErr error
			capture0, callErr = session.IsApprovedForPool(
				poolID,
				operator,
			)
			if callErr != nil {
				return callErr
			}

			cmd.Printf("0: %t\n", capture0)

			return nil
		},
	}

	cmd.Flags().StringVar(&rpc, "rpc", "", "URL of the JSONRPC API to use")
	cmd.Flags().StringVar(&blockNumberRaw, "block", "", "Block number at which to call the view method")
	cmd.Flags().BoolVar(&pending, "pending", false, "Set this flag if it's ok to call the view method against pending state")
	cmd.Flags().UintVar(&timeout, "timeout", 60, "Timeout (in seconds) for interactions with the JSONRPC API")
	cmd.Flags().StringVar(&contractAddressRaw, "contract", "", "Address of the contract to interact with")
	cmd.Flags().StringVar(&fromAddressRaw, "from", "", "Optional address for caller of the view method")

	cmd.Flags().StringVar(&poolIDRaw, "pool-id", "", "pool-id argument")
	cmd.Flags().StringVar(&operatorRaw, "operator", "", "operator argument (common.Address)")

	return cmd
}

func CreateSetApprovalForAllCommand() *cobra.Command {
	var keyfile, nonce, password, value, gasPrice, maxFeePerGas, maxPriorityFeePerGas, rpc, contractAddressRaw string
	var gasLimit uint64
	var simulate bool
	var timeout uint
	var contractAddress common.Address

	var operator common.Address
	var operatorRaw string
	var approved bool
	var approvedRaw string

	cmd := &cobra.Command{
		Use:   "set-approval-for-all",
		Short: "Execute the SetApprovalForAll method on a ERC1155WithTerminusStorage contract",
		PreRunE: func(cmd *cobra.Command, args []string) error {
			if keyfile == "" {
				return fmt.Errorf("--keystore not specified")
			}

			if contractAddressRaw == "" {
				return fmt.Errorf("--contract not specified")
			} else if !common.IsHexAddress(contractAddressRaw) {
				return fmt.Errorf("--contract is not a valid Ethereum address")
			}
			contractAddress = common.HexToAddress(contractAddressRaw)

			if operatorRaw == "" {
				return fmt.Errorf("--operator argument not specified")
			} else if !common.IsHexAddress(operatorRaw) {
				return fmt.Errorf("--operator argument is not a valid Ethereum address")
			}
			operator = common.HexToAddress(operatorRaw)

			approvedRawLower := strings.ToLower(approvedRaw)
			switch approvedRawLower {
			case "true", "t", "y", "yes", "1":
				approved = true
			case "false", "f", "n", "no", "0":
				approved = false
			default:
				return fmt.Errorf("--approved argument is not valid (value: %s)", approvedRaw)
			}

			return nil
		},
		RunE: func(cmd *cobra.Command, args []string) error {
			client, clientErr := NewClient(rpc)
			if clientErr != nil {
				return clientErr
			}

			key, keyErr := KeyFromFile(keyfile, password)
			if keyErr != nil {
				return keyErr
			}

			chainIDCtx, cancelChainIDCtx := NewChainContext(timeout)
			defer cancelChainIDCtx()
			chainID, chainIDErr := client.ChainID(chainIDCtx)
			if chainIDErr != nil {
				return chainIDErr
			}

			transactionOpts, transactionOptsErr := bind.NewKeyedTransactorWithChainID(key.PrivateKey, chainID)
			if transactionOptsErr != nil {
				return transactionOptsErr
			}

			SetTransactionParametersFromArgs(transactionOpts, nonce, value, gasPrice, maxFeePerGas, maxPriorityFeePerGas, gasLimit, simulate)

			contract, contractErr := NewERC1155WithTerminusStorage(contractAddress, client)
			if contractErr != nil {
				return contractErr
			}

			session := ERC1155WithTerminusStorageTransactorSession{
				Contract:     &contract.ERC1155WithTerminusStorageTransactor,
				TransactOpts: *transactionOpts,
			}

			transaction, transactionErr := session.SetApprovalForAll(
				operator,
				approved,
			)
			if transactionErr != nil {
				return transactionErr
			}

			cmd.Printf("Transaction hash: %s\n", transaction.Hash().Hex())
			if transactionOpts.NoSend {
				estimationMessage := ethereum.CallMsg{
					From: transactionOpts.From,
					To:   &contractAddress,
					Data: transaction.Data(),
				}

				gasEstimationCtx, cancelGasEstimationCtx := NewChainContext(timeout)
				defer cancelGasEstimationCtx()

				gasEstimate, gasEstimateErr := client.EstimateGas(gasEstimationCtx, estimationMessage)
				if gasEstimateErr != nil {
					return gasEstimateErr
				}

				transactionBinary, transactionBinaryErr := transaction.MarshalBinary()
				if transactionBinaryErr != nil {
					return transactionBinaryErr
				}
				transactionBinaryHex := hex.EncodeToString(transactionBinary)

				cmd.Printf("Transaction: %s\nEstimated gas: %d\n", transactionBinaryHex, gasEstimate)
			} else {
				cmd.Println("Transaction submitted")
			}

			return nil
		},
	}

	cmd.Flags().StringVar(&rpc, "rpc", "", "URL of the JSONRPC API to use")
	cmd.Flags().StringVar(&keyfile, "keyfile", "", "Path to the keystore file to use for the transaction")
	cmd.Flags().StringVar(&password, "password", "", "Password to use to unlock the keystore (if not specified, you will be prompted for the password when the command executes)")
	cmd.Flags().StringVar(&nonce, "nonce", "", "Nonce to use for the transaction")
	cmd.Flags().StringVar(&value, "value", "", "Value to send with the transaction")
	cmd.Flags().StringVar(&gasPrice, "gas-price", "", "Gas price to use for the transaction")
	cmd.Flags().StringVar(&maxFeePerGas, "max-fee-per-gas", "", "Maximum fee per gas to use for the (EIP-1559) transaction")
	cmd.Flags().StringVar(&maxPriorityFeePerGas, "max-priority-fee-per-gas", "", "Maximum priority fee per gas to use for the (EIP-1559) transaction")
	cmd.Flags().Uint64Var(&gasLimit, "gas-limit", 0, "Gas limit for the transaction")
	cmd.Flags().BoolVar(&simulate, "simulate", false, "Simulate the transaction without sending it")
	cmd.Flags().UintVar(&timeout, "timeout", 60, "Timeout (in seconds) for interactions with the JSONRPC API")
	cmd.Flags().StringVar(&contractAddressRaw, "contract", "", "Address of the contract to interact with")

	cmd.Flags().StringVar(&operatorRaw, "operator", "", "operator argument (common.Address)")
	cmd.Flags().StringVar(&approvedRaw, "approved", "", "approved argument (true, t, y, yes, 1 OR false, f, n, no, 0)")

	return cmd
}
func CreateUnapproveForPoolCommand() *cobra.Command {
	var keyfile, nonce, password, value, gasPrice, maxFeePerGas, maxPriorityFeePerGas, rpc, contractAddressRaw string
	var gasLimit uint64
	var simulate bool
	var timeout uint
	var contractAddress common.Address

	var poolID *big.Int
	var poolIDRaw string
	var operator common.Address
	var operatorRaw string

	cmd := &cobra.Command{
		Use:   "unapprove-for-pool",
		Short: "Execute the UnapproveForPool method on a ERC1155WithTerminusStorage contract",
		PreRunE: func(cmd *cobra.Command, args []string) error {
			if keyfile == "" {
				return fmt.Errorf("--keystore not specified")
			}

			if contractAddressRaw == "" {
				return fmt.Errorf("--contract not specified")
			} else if !common.IsHexAddress(contractAddressRaw) {
				return fmt.Errorf("--contract is not a valid Ethereum address")
			}
			contractAddress = common.HexToAddress(contractAddressRaw)

			if poolIDRaw == "" {
				return fmt.Errorf("--pool-id argument not specified")
			}
			poolID = new(big.Int)
			poolID.SetString(poolIDRaw, 0)

			if operatorRaw == "" {
				return fmt.Errorf("--operator argument not specified")
			} else if !common.IsHexAddress(operatorRaw) {
				return fmt.Errorf("--operator argument is not a valid Ethereum address")
			}
			operator = common.HexToAddress(operatorRaw)

			return nil
		},
		RunE: func(cmd *cobra.Command, args []string) error {
			client, clientErr := NewClient(rpc)
			if clientErr != nil {
				return clientErr
			}

			key, keyErr := KeyFromFile(keyfile, password)
			if keyErr != nil {
				return keyErr
			}

			chainIDCtx, cancelChainIDCtx := NewChainContext(timeout)
			defer cancelChainIDCtx()
			chainID, chainIDErr := client.ChainID(chainIDCtx)
			if chainIDErr != nil {
				return chainIDErr
			}

			transactionOpts, transactionOptsErr := bind.NewKeyedTransactorWithChainID(key.PrivateKey, chainID)
			if transactionOptsErr != nil {
				return transactionOptsErr
			}

			SetTransactionParametersFromArgs(transactionOpts, nonce, value, gasPrice, maxFeePerGas, maxPriorityFeePerGas, gasLimit, simulate)

			contract, contractErr := NewERC1155WithTerminusStorage(contractAddress, client)
			if contractErr != nil {
				return contractErr
			}

			session := ERC1155WithTerminusStorageTransactorSession{
				Contract:     &contract.ERC1155WithTerminusStorageTransactor,
				TransactOpts: *transactionOpts,
			}

			transaction, transactionErr := session.UnapproveForPool(
				poolID,
				operator,
			)
			if transactionErr != nil {
				return transactionErr
			}

			cmd.Printf("Transaction hash: %s\n", transaction.Hash().Hex())
			if transactionOpts.NoSend {
				estimationMessage := ethereum.CallMsg{
					From: transactionOpts.From,
					To:   &contractAddress,
					Data: transaction.Data(),
				}

				gasEstimationCtx, cancelGasEstimationCtx := NewChainContext(timeout)
				defer cancelGasEstimationCtx()

				gasEstimate, gasEstimateErr := client.EstimateGas(gasEstimationCtx, estimationMessage)
				if gasEstimateErr != nil {
					return gasEstimateErr
				}

				transactionBinary, transactionBinaryErr := transaction.MarshalBinary()
				if transactionBinaryErr != nil {
					return transactionBinaryErr
				}
				transactionBinaryHex := hex.EncodeToString(transactionBinary)

				cmd.Printf("Transaction: %s\nEstimated gas: %d\n", transactionBinaryHex, gasEstimate)
			} else {
				cmd.Println("Transaction submitted")
			}

			return nil
		},
	}

	cmd.Flags().StringVar(&rpc, "rpc", "", "URL of the JSONRPC API to use")
	cmd.Flags().StringVar(&keyfile, "keyfile", "", "Path to the keystore file to use for the transaction")
	cmd.Flags().StringVar(&password, "password", "", "Password to use to unlock the keystore (if not specified, you will be prompted for the password when the command executes)")
	cmd.Flags().StringVar(&nonce, "nonce", "", "Nonce to use for the transaction")
	cmd.Flags().StringVar(&value, "value", "", "Value to send with the transaction")
	cmd.Flags().StringVar(&gasPrice, "gas-price", "", "Gas price to use for the transaction")
	cmd.Flags().StringVar(&maxFeePerGas, "max-fee-per-gas", "", "Maximum fee per gas to use for the (EIP-1559) transaction")
	cmd.Flags().StringVar(&maxPriorityFeePerGas, "max-priority-fee-per-gas", "", "Maximum priority fee per gas to use for the (EIP-1559) transaction")
	cmd.Flags().Uint64Var(&gasLimit, "gas-limit", 0, "Gas limit for the transaction")
	cmd.Flags().BoolVar(&simulate, "simulate", false, "Simulate the transaction without sending it")
	cmd.Flags().UintVar(&timeout, "timeout", 60, "Timeout (in seconds) for interactions with the JSONRPC API")
	cmd.Flags().StringVar(&contractAddressRaw, "contract", "", "Address of the contract to interact with")

	cmd.Flags().StringVar(&poolIDRaw, "pool-id", "", "pool-id argument")
	cmd.Flags().StringVar(&operatorRaw, "operator", "", "operator argument (common.Address)")

	return cmd
}
func CreateApproveForPoolCommand() *cobra.Command {
	var keyfile, nonce, password, value, gasPrice, maxFeePerGas, maxPriorityFeePerGas, rpc, contractAddressRaw string
	var gasLimit uint64
	var simulate bool
	var timeout uint
	var contractAddress common.Address

	var poolID *big.Int
	var poolIDRaw string
	var operator common.Address
	var operatorRaw string

	cmd := &cobra.Command{
		Use:   "approve-for-pool",
		Short: "Execute the ApproveForPool method on a ERC1155WithTerminusStorage contract",
		PreRunE: func(cmd *cobra.Command, args []string) error {
			if keyfile == "" {
				return fmt.Errorf("--keystore not specified")
			}

			if contractAddressRaw == "" {
				return fmt.Errorf("--contract not specified")
			} else if !common.IsHexAddress(contractAddressRaw) {
				return fmt.Errorf("--contract is not a valid Ethereum address")
			}
			contractAddress = common.HexToAddress(contractAddressRaw)

			if poolIDRaw == "" {
				return fmt.Errorf("--pool-id argument not specified")
			}
			poolID = new(big.Int)
			poolID.SetString(poolIDRaw, 0)

			if operatorRaw == "" {
				return fmt.Errorf("--operator argument not specified")
			} else if !common.IsHexAddress(operatorRaw) {
				return fmt.Errorf("--operator argument is not a valid Ethereum address")
			}
			operator = common.HexToAddress(operatorRaw)

			return nil
		},
		RunE: func(cmd *cobra.Command, args []string) error {
			client, clientErr := NewClient(rpc)
			if clientErr != nil {
				return clientErr
			}

			key, keyErr := KeyFromFile(keyfile, password)
			if keyErr != nil {
				return keyErr
			}

			chainIDCtx, cancelChainIDCtx := NewChainContext(timeout)
			defer cancelChainIDCtx()
			chainID, chainIDErr := client.ChainID(chainIDCtx)
			if chainIDErr != nil {
				return chainIDErr
			}

			transactionOpts, transactionOptsErr := bind.NewKeyedTransactorWithChainID(key.PrivateKey, chainID)
			if transactionOptsErr != nil {
				return transactionOptsErr
			}

			SetTransactionParametersFromArgs(transactionOpts, nonce, value, gasPrice, maxFeePerGas, maxPriorityFeePerGas, gasLimit, simulate)

			contract, contractErr := NewERC1155WithTerminusStorage(contractAddress, client)
			if contractErr != nil {
				return contractErr
			}

			session := ERC1155WithTerminusStorageTransactorSession{
				Contract:     &contract.ERC1155WithTerminusStorageTransactor,
				TransactOpts: *transactionOpts,
			}

			transaction, transactionErr := session.ApproveForPool(
				poolID,
				operator,
			)
			if transactionErr != nil {
				return transactionErr
			}

			cmd.Printf("Transaction hash: %s\n", transaction.Hash().Hex())
			if transactionOpts.NoSend {
				estimationMessage := ethereum.CallMsg{
					From: transactionOpts.From,
					To:   &contractAddress,
					Data: transaction.Data(),
				}

				gasEstimationCtx, cancelGasEstimationCtx := NewChainContext(timeout)
				defer cancelGasEstimationCtx()

				gasEstimate, gasEstimateErr := client.EstimateGas(gasEstimationCtx, estimationMessage)
				if gasEstimateErr != nil {
					return gasEstimateErr
				}

				transactionBinary, transactionBinaryErr := transaction.MarshalBinary()
				if transactionBinaryErr != nil {
					return transactionBinaryErr
				}
				transactionBinaryHex := hex.EncodeToString(transactionBinary)

				cmd.Printf("Transaction: %s\nEstimated gas: %d\n", transactionBinaryHex, gasEstimate)
			} else {
				cmd.Println("Transaction submitted")
			}

			return nil
		},
	}

	cmd.Flags().StringVar(&rpc, "rpc", "", "URL of the JSONRPC API to use")
	cmd.Flags().StringVar(&keyfile, "keyfile", "", "Path to the keystore file to use for the transaction")
	cmd.Flags().StringVar(&password, "password", "", "Password to use to unlock the keystore (if not specified, you will be prompted for the password when the command executes)")
	cmd.Flags().StringVar(&nonce, "nonce", "", "Nonce to use for the transaction")
	cmd.Flags().StringVar(&value, "value", "", "Value to send with the transaction")
	cmd.Flags().StringVar(&gasPrice, "gas-price", "", "Gas price to use for the transaction")
	cmd.Flags().StringVar(&maxFeePerGas, "max-fee-per-gas", "", "Maximum fee per gas to use for the (EIP-1559) transaction")
	cmd.Flags().StringVar(&maxPriorityFeePerGas, "max-priority-fee-per-gas", "", "Maximum priority fee per gas to use for the (EIP-1559) transaction")
	cmd.Flags().Uint64Var(&gasLimit, "gas-limit", 0, "Gas limit for the transaction")
	cmd.Flags().BoolVar(&simulate, "simulate", false, "Simulate the transaction without sending it")
	cmd.Flags().UintVar(&timeout, "timeout", 60, "Timeout (in seconds) for interactions with the JSONRPC API")
	cmd.Flags().StringVar(&contractAddressRaw, "contract", "", "Address of the contract to interact with")

	cmd.Flags().StringVar(&poolIDRaw, "pool-id", "", "pool-id argument")
	cmd.Flags().StringVar(&operatorRaw, "operator", "", "operator argument (common.Address)")

	return cmd
}
func CreateSafeBatchTransferFromCommand() *cobra.Command {
	var keyfile, nonce, password, value, gasPrice, maxFeePerGas, maxPriorityFeePerGas, rpc, contractAddressRaw string
	var gasLimit uint64
	var simulate bool
	var timeout uint
	var contractAddress common.Address

	var from0 common.Address
	var from0Raw string
	var to0 common.Address
	var to0Raw string
	var ids []*big.Int
	var idsRaw string
	var amounts []*big.Int
	var amountsRaw string
	var data []byte
	var dataRaw string

	cmd := &cobra.Command{
		Use:   "safe-batch-transfer-from",
		Short: "Execute the SafeBatchTransferFrom method on a ERC1155WithTerminusStorage contract",
		PreRunE: func(cmd *cobra.Command, args []string) error {
			if keyfile == "" {
				return fmt.Errorf("--keystore not specified")
			}

			if contractAddressRaw == "" {
				return fmt.Errorf("--contract not specified")
			} else if !common.IsHexAddress(contractAddressRaw) {
				return fmt.Errorf("--contract is not a valid Ethereum address")
			}
			contractAddress = common.HexToAddress(contractAddressRaw)

			if from0Raw == "" {
				return fmt.Errorf("--from-0 argument not specified")
			} else if !common.IsHexAddress(from0Raw) {
				return fmt.Errorf("--from-0 argument is not a valid Ethereum address")
			}
			from0 = common.HexToAddress(from0Raw)

			if to0Raw == "" {
				return fmt.Errorf("--to-0 argument not specified")
			} else if !common.IsHexAddress(to0Raw) {
				return fmt.Errorf("--to-0 argument is not a valid Ethereum address")
			}
			to0 = common.HexToAddress(to0Raw)

			if idsRaw == "" {
				return fmt.Errorf("--ids argument not specified")
			} else if strings.HasPrefix(idsRaw, "@") {
				filename := strings.TrimPrefix(idsRaw, "@")
				contents, readErr := os.ReadFile(filename)
				if readErr != nil {
					return readErr
				}
				unmarshalErr := json.Unmarshal(contents, &ids)
				if unmarshalErr != nil {
					return unmarshalErr
				}
			} else {
				unmarshalErr := json.Unmarshal([]byte(idsRaw), &ids)
				if unmarshalErr != nil {
					return unmarshalErr
				}
			}

			if amountsRaw == "" {
				return fmt.Errorf("--amounts argument not specified")
			} else if strings.HasPrefix(amountsRaw, "@") {
				filename := strings.TrimPrefix(amountsRaw, "@")
				contents, readErr := os.ReadFile(filename)
				if readErr != nil {
					return readErr
				}
				unmarshalErr := json.Unmarshal(contents, &amounts)
				if unmarshalErr != nil {
					return unmarshalErr
				}
			} else {
				unmarshalErr := json.Unmarshal([]byte(amountsRaw), &amounts)
				if unmarshalErr != nil {
					return unmarshalErr
				}
			}

			var dataIntermediate []byte

			var dataIntermediateHexDecodeErr error
			dataIntermediate, dataIntermediateHexDecodeErr = hex.DecodeString(dataRaw)
			if dataIntermediateHexDecodeErr != nil {
				return dataIntermediateHexDecodeErr
			}

			copy(data[:], dataIntermediate)

			return nil
		},
		RunE: func(cmd *cobra.Command, args []string) error {
			client, clientErr := NewClient(rpc)
			if clientErr != nil {
				return clientErr
			}

			key, keyErr := KeyFromFile(keyfile, password)
			if keyErr != nil {
				return keyErr
			}

			chainIDCtx, cancelChainIDCtx := NewChainContext(timeout)
			defer cancelChainIDCtx()
			chainID, chainIDErr := client.ChainID(chainIDCtx)
			if chainIDErr != nil {
				return chainIDErr
			}

			transactionOpts, transactionOptsErr := bind.NewKeyedTransactorWithChainID(key.PrivateKey, chainID)
			if transactionOptsErr != nil {
				return transactionOptsErr
			}

			SetTransactionParametersFromArgs(transactionOpts, nonce, value, gasPrice, maxFeePerGas, maxPriorityFeePerGas, gasLimit, simulate)

			contract, contractErr := NewERC1155WithTerminusStorage(contractAddress, client)
			if contractErr != nil {
				return contractErr
			}

			session := ERC1155WithTerminusStorageTransactorSession{
				Contract:     &contract.ERC1155WithTerminusStorageTransactor,
				TransactOpts: *transactionOpts,
			}

			transaction, transactionErr := session.SafeBatchTransferFrom(
				from0,
				to0,
				ids,
				amounts,
				data,
			)
			if transactionErr != nil {
				return transactionErr
			}

			cmd.Printf("Transaction hash: %s\n", transaction.Hash().Hex())
			if transactionOpts.NoSend {
				estimationMessage := ethereum.CallMsg{
					From: transactionOpts.From,
					To:   &contractAddress,
					Data: transaction.Data(),
				}

				gasEstimationCtx, cancelGasEstimationCtx := NewChainContext(timeout)
				defer cancelGasEstimationCtx()

				gasEstimate, gasEstimateErr := client.EstimateGas(gasEstimationCtx, estimationMessage)
				if gasEstimateErr != nil {
					return gasEstimateErr
				}

				transactionBinary, transactionBinaryErr := transaction.MarshalBinary()
				if transactionBinaryErr != nil {
					return transactionBinaryErr
				}
				transactionBinaryHex := hex.EncodeToString(transactionBinary)

				cmd.Printf("Transaction: %s\nEstimated gas: %d\n", transactionBinaryHex, gasEstimate)
			} else {
				cmd.Println("Transaction submitted")
			}

			return nil
		},
	}

	cmd.Flags().StringVar(&rpc, "rpc", "", "URL of the JSONRPC API to use")
	cmd.Flags().StringVar(&keyfile, "keyfile", "", "Path to the keystore file to use for the transaction")
	cmd.Flags().StringVar(&password, "password", "", "Password to use to unlock the keystore (if not specified, you will be prompted for the password when the command executes)")
	cmd.Flags().StringVar(&nonce, "nonce", "", "Nonce to use for the transaction")
	cmd.Flags().StringVar(&value, "value", "", "Value to send with the transaction")
	cmd.Flags().StringVar(&gasPrice, "gas-price", "", "Gas price to use for the transaction")
	cmd.Flags().StringVar(&maxFeePerGas, "max-fee-per-gas", "", "Maximum fee per gas to use for the (EIP-1559) transaction")
	cmd.Flags().StringVar(&maxPriorityFeePerGas, "max-priority-fee-per-gas", "", "Maximum priority fee per gas to use for the (EIP-1559) transaction")
	cmd.Flags().Uint64Var(&gasLimit, "gas-limit", 0, "Gas limit for the transaction")
	cmd.Flags().BoolVar(&simulate, "simulate", false, "Simulate the transaction without sending it")
	cmd.Flags().UintVar(&timeout, "timeout", 60, "Timeout (in seconds) for interactions with the JSONRPC API")
	cmd.Flags().StringVar(&contractAddressRaw, "contract", "", "Address of the contract to interact with")

	cmd.Flags().StringVar(&from0Raw, "from-0", "", "from-0 argument (common.Address)")
	cmd.Flags().StringVar(&to0Raw, "to-0", "", "to-0 argument (common.Address)")
	cmd.Flags().StringVar(&idsRaw, "ids", "", "ids argument ([]*big.Int)")
	cmd.Flags().StringVar(&amountsRaw, "amounts", "", "amounts argument ([]*big.Int)")
	cmd.Flags().StringVar(&dataRaw, "data", "", "data argument ([]byte)")

	return cmd
}
func CreateSafeTransferFromCommand() *cobra.Command {
	var keyfile, nonce, password, value, gasPrice, maxFeePerGas, maxPriorityFeePerGas, rpc, contractAddressRaw string
	var gasLimit uint64
	var simulate bool
	var timeout uint
	var contractAddress common.Address

	var from0 common.Address
	var from0Raw string
	var to0 common.Address
	var to0Raw string
	var id *big.Int
	var idRaw string
	var amount *big.Int
	var amountRaw string
	var data []byte
	var dataRaw string

	cmd := &cobra.Command{
		Use:   "safe-transfer-from",
		Short: "Execute the SafeTransferFrom method on a ERC1155WithTerminusStorage contract",
		PreRunE: func(cmd *cobra.Command, args []string) error {
			if keyfile == "" {
				return fmt.Errorf("--keystore not specified")
			}

			if contractAddressRaw == "" {
				return fmt.Errorf("--contract not specified")
			} else if !common.IsHexAddress(contractAddressRaw) {
				return fmt.Errorf("--contract is not a valid Ethereum address")
			}
			contractAddress = common.HexToAddress(contractAddressRaw)

			if from0Raw == "" {
				return fmt.Errorf("--from-0 argument not specified")
			} else if !common.IsHexAddress(from0Raw) {
				return fmt.Errorf("--from-0 argument is not a valid Ethereum address")
			}
			from0 = common.HexToAddress(from0Raw)

			if to0Raw == "" {
				return fmt.Errorf("--to-0 argument not specified")
			} else if !common.IsHexAddress(to0Raw) {
				return fmt.Errorf("--to-0 argument is not a valid Ethereum address")
			}
			to0 = common.HexToAddress(to0Raw)

			if idRaw == "" {
				return fmt.Errorf("--id argument not specified")
			}
			id = new(big.Int)
			id.SetString(idRaw, 0)

			if amountRaw == "" {
				return fmt.Errorf("--amount argument not specified")
			}
			amount = new(big.Int)
			amount.SetString(amountRaw, 0)

			var dataIntermediate []byte

			var dataIntermediateHexDecodeErr error
			dataIntermediate, dataIntermediateHexDecodeErr = hex.DecodeString(dataRaw)
			if dataIntermediateHexDecodeErr != nil {
				return dataIntermediateHexDecodeErr
			}

			copy(data[:], dataIntermediate)

			return nil
		},
		RunE: func(cmd *cobra.Command, args []string) error {
			client, clientErr := NewClient(rpc)
			if clientErr != nil {
				return clientErr
			}

			key, keyErr := KeyFromFile(keyfile, password)
			if keyErr != nil {
				return keyErr
			}

			chainIDCtx, cancelChainIDCtx := NewChainContext(timeout)
			defer cancelChainIDCtx()
			chainID, chainIDErr := client.ChainID(chainIDCtx)
			if chainIDErr != nil {
				return chainIDErr
			}

			transactionOpts, transactionOptsErr := bind.NewKeyedTransactorWithChainID(key.PrivateKey, chainID)
			if transactionOptsErr != nil {
				return transactionOptsErr
			}

			SetTransactionParametersFromArgs(transactionOpts, nonce, value, gasPrice, maxFeePerGas, maxPriorityFeePerGas, gasLimit, simulate)

			contract, contractErr := NewERC1155WithTerminusStorage(contractAddress, client)
			if contractErr != nil {
				return contractErr
			}

			session := ERC1155WithTerminusStorageTransactorSession{
				Contract:     &contract.ERC1155WithTerminusStorageTransactor,
				TransactOpts: *transactionOpts,
			}

			transaction, transactionErr := session.SafeTransferFrom(
				from0,
				to0,
				id,
				amount,
				data,
			)
			if transactionErr != nil {
				return transactionErr
			}

			cmd.Printf("Transaction hash: %s\n", transaction.Hash().Hex())
			if transactionOpts.NoSend {
				estimationMessage := ethereum.CallMsg{
					From: transactionOpts.From,
					To:   &contractAddress,
					Data: transaction.Data(),
				}

				gasEstimationCtx, cancelGasEstimationCtx := NewChainContext(timeout)
				defer cancelGasEstimationCtx()

				gasEstimate, gasEstimateErr := client.EstimateGas(gasEstimationCtx, estimationMessage)
				if gasEstimateErr != nil {
					return gasEstimateErr
				}

				transactionBinary, transactionBinaryErr := transaction.MarshalBinary()
				if transactionBinaryErr != nil {
					return transactionBinaryErr
				}
				transactionBinaryHex := hex.EncodeToString(transactionBinary)

				cmd.Printf("Transaction: %s\nEstimated gas: %d\n", transactionBinaryHex, gasEstimate)
			} else {
				cmd.Println("Transaction submitted")
			}

			return nil
		},
	}

	cmd.Flags().StringVar(&rpc, "rpc", "", "URL of the JSONRPC API to use")
	cmd.Flags().StringVar(&keyfile, "keyfile", "", "Path to the keystore file to use for the transaction")
	cmd.Flags().StringVar(&password, "password", "", "Password to use to unlock the keystore (if not specified, you will be prompted for the password when the command executes)")
	cmd.Flags().StringVar(&nonce, "nonce", "", "Nonce to use for the transaction")
	cmd.Flags().StringVar(&value, "value", "", "Value to send with the transaction")
	cmd.Flags().StringVar(&gasPrice, "gas-price", "", "Gas price to use for the transaction")
	cmd.Flags().StringVar(&maxFeePerGas, "max-fee-per-gas", "", "Maximum fee per gas to use for the (EIP-1559) transaction")
	cmd.Flags().StringVar(&maxPriorityFeePerGas, "max-priority-fee-per-gas", "", "Maximum priority fee per gas to use for the (EIP-1559) transaction")
	cmd.Flags().Uint64Var(&gasLimit, "gas-limit", 0, "Gas limit for the transaction")
	cmd.Flags().BoolVar(&simulate, "simulate", false, "Simulate the transaction without sending it")
	cmd.Flags().UintVar(&timeout, "timeout", 60, "Timeout (in seconds) for interactions with the JSONRPC API")
	cmd.Flags().StringVar(&contractAddressRaw, "contract", "", "Address of the contract to interact with")

	cmd.Flags().StringVar(&from0Raw, "from-0", "", "from-0 argument (common.Address)")
	cmd.Flags().StringVar(&to0Raw, "to-0", "", "to-0 argument (common.Address)")
	cmd.Flags().StringVar(&idRaw, "id", "", "id argument")
	cmd.Flags().StringVar(&amountRaw, "amount", "", "amount argument")
	cmd.Flags().StringVar(&dataRaw, "data", "", "data argument ([]byte)")

	return cmd
}

var ErrNoRPCURL error = errors.New("no RPC URL provided -- please pass an RPC URL from the command line or set the ERC_1155_WITH_TERMINUS_STORAGE_RPC_URL environment variable")

// Generates an Ethereum client to the JSONRPC API at the given URL. If rpcURL is empty, then it
// attempts to read the RPC URL from the ERC_1155_WITH_TERMINUS_STORAGE_RPC_URL environment variable. If that is empty,
// too, then it returns an error.
func NewClient(rpcURL string) (*ethclient.Client, error) {
	if rpcURL == "" {
		rpcURL = os.Getenv("ERC_1155_WITH_TERMINUS_STORAGE_RPC_URL")
	}

	if rpcURL == "" {
		return nil, ErrNoRPCURL
	}

	client, err := ethclient.Dial(rpcURL)
	return client, err
}

// Creates a new context to be used when interacting with the chain client.
func NewChainContext(timeout uint) (context.Context, context.CancelFunc) {
	baseCtx := context.Background()
	parsedTimeout := time.Duration(timeout) * time.Second
	ctx, cancel := context.WithTimeout(baseCtx, parsedTimeout)
	return ctx, cancel
}

// Unlocks a key from a keystore (byte contents of a keystore file) with the given password.
func UnlockKeystore(keystoreData []byte, password string) (*keystore.Key, error) {
	key, err := keystore.DecryptKey(keystoreData, password)
	return key, err
}

// Loads a key from file, prompting the user for the password if it is not provided as a function argument.
func KeyFromFile(keystoreFile string, password string) (*keystore.Key, error) {
	var emptyKey *keystore.Key
	keystoreContent, readErr := os.ReadFile(keystoreFile)
	if readErr != nil {
		return emptyKey, readErr
	}

	// If password is "", prompt user for password.
	if password == "" {
		fmt.Printf("Please provide a password for keystore (%s): ", keystoreFile)
		passwordRaw, inputErr := term.ReadPassword(int(os.Stdin.Fd()))
		if inputErr != nil {
			return emptyKey, fmt.Errorf("error reading password: %s", inputErr.Error())
		}
		fmt.Print("\n")
		password = string(passwordRaw)
	}

	key, err := UnlockKeystore(keystoreContent, password)
	return key, err
}

// This method is used to set the parameters on a view call from command line arguments (represented mostly as
// strings).
func SetCallParametersFromArgs(opts *bind.CallOpts, pending bool, fromAddress, blockNumber string) {
	if pending {
		opts.Pending = true
	}

	if fromAddress != "" {
		opts.From = common.HexToAddress(fromAddress)
	}

	if blockNumber != "" {
		opts.BlockNumber = new(big.Int)
		opts.BlockNumber.SetString(blockNumber, 0)
	}
}

// This method is used to set the parameters on a transaction from command line arguments (represented mostly as
// strings).
func SetTransactionParametersFromArgs(opts *bind.TransactOpts, nonce, value, gasPrice, maxFeePerGas, maxPriorityFeePerGas string, gasLimit uint64, noSend bool) {
	if nonce != "" {
		opts.Nonce = new(big.Int)
		opts.Nonce.SetString(nonce, 0)
	}

	if value != "" {
		opts.Value = new(big.Int)
		opts.Value.SetString(value, 0)
	}

	if gasPrice != "" {
		opts.GasPrice = new(big.Int)
		opts.GasPrice.SetString(gasPrice, 0)
	}

	if maxFeePerGas != "" {
		opts.GasFeeCap = new(big.Int)
		opts.GasFeeCap.SetString(maxFeePerGas, 0)
	}

	if maxPriorityFeePerGas != "" {
		opts.GasTipCap = new(big.Int)
		opts.GasTipCap.SetString(maxPriorityFeePerGas, 0)
	}

	if gasLimit != 0 {
		opts.GasLimit = gasLimit
	}

	opts.NoSend = noSend
}

func CreateERC1155WithTerminusStorageCommand() *cobra.Command {
	cmd := &cobra.Command{
		Use:   "erc-1155-with-terminus-storage",
		Short: "Interact with the ERC1155WithTerminusStorage contract",
		Run: func(cmd *cobra.Command, args []string) {
			cmd.Help()
		},
	}

	cmd.SetOut(os.Stdout)

	DeployGroup := &cobra.Group{
		ID: "deploy", Title: "Commands which deploy contracts",
	}
	cmd.AddGroup(DeployGroup)
	ViewGroup := &cobra.Group{
		ID: "view", Title: "Commands which view contract state",
	}
	TransactGroup := &cobra.Group{
		ID: "transact", Title: "Commands which submit transactions",
	}
	cmd.AddGroup(ViewGroup, TransactGroup)

	cmdDeployERC1155WithTerminusStorage := CreateERC1155WithTerminusStorageDeploymentCommand()
	cmdDeployERC1155WithTerminusStorage.GroupID = DeployGroup.ID
	cmd.AddCommand(cmdDeployERC1155WithTerminusStorage)

	cmdViewSupportsInterface := CreateSupportsInterfaceCommand()
	cmdViewSupportsInterface.GroupID = ViewGroup.ID
	cmd.AddCommand(cmdViewSupportsInterface)
	cmdViewUri := CreateUriCommand()
	cmdViewUri.GroupID = ViewGroup.ID
	cmd.AddCommand(cmdViewUri)
	cmdViewBalanceOf := CreateBalanceOfCommand()
	cmdViewBalanceOf.GroupID = ViewGroup.ID
	cmd.AddCommand(cmdViewBalanceOf)
	cmdViewBalanceOfBatch := CreateBalanceOfBatchCommand()
	cmdViewBalanceOfBatch.GroupID = ViewGroup.ID
	cmd.AddCommand(cmdViewBalanceOfBatch)
	cmdViewIsApprovedForAll := CreateIsApprovedForAllCommand()
	cmdViewIsApprovedForAll.GroupID = ViewGroup.ID
	cmd.AddCommand(cmdViewIsApprovedForAll)
	cmdViewIsApprovedForPool := CreateIsApprovedForPoolCommand()
	cmdViewIsApprovedForPool.GroupID = ViewGroup.ID
	cmd.AddCommand(cmdViewIsApprovedForPool)

	cmdTransactSetApprovalForAll := CreateSetApprovalForAllCommand()
	cmdTransactSetApprovalForAll.GroupID = TransactGroup.ID
	cmd.AddCommand(cmdTransactSetApprovalForAll)
	cmdTransactUnapproveForPool := CreateUnapproveForPoolCommand()
	cmdTransactUnapproveForPool.GroupID = TransactGroup.ID
	cmd.AddCommand(cmdTransactUnapproveForPool)
	cmdTransactApproveForPool := CreateApproveForPoolCommand()
	cmdTransactApproveForPool.GroupID = TransactGroup.ID
	cmd.AddCommand(cmdTransactApproveForPool)
	cmdTransactSafeBatchTransferFrom := CreateSafeBatchTransferFromCommand()
	cmdTransactSafeBatchTransferFrom.GroupID = TransactGroup.ID
	cmd.AddCommand(cmdTransactSafeBatchTransferFrom)
	cmdTransactSafeTransferFrom := CreateSafeTransferFromCommand()
	cmdTransactSafeTransferFrom.GroupID = TransactGroup.ID
	cmd.AddCommand(cmdTransactSafeTransferFrom)

	return cmd
}
