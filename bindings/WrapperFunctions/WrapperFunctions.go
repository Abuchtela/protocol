// This file was generated by seer: https://github.com/moonstream-to/seer.
// seer version: 0.1.3
// seer command: seer evm generate --package WrapperFunctions --cli --struct WrapperFunctions --output bindings/WrapperFunctions/WrapperFunctions.go
// Code generated - DO NOT EDIT.
// This file is a generated binding and any manual changes will be lost.

package WrapperFunctions

import (
	"errors"
	"math/big"
	"strings"

	"context"

	ethereum "github.com/ethereum/go-ethereum"
	"github.com/ethereum/go-ethereum/accounts/abi"
	"github.com/ethereum/go-ethereum/accounts/abi/bind"
	"github.com/ethereum/go-ethereum/common"
	"github.com/ethereum/go-ethereum/core/types"
	"github.com/ethereum/go-ethereum/event"

	// Reference imports to suppress errors if they are not otherwise used.
	"encoding/hex"
	"encoding/json"
	"fmt"
	"os"
	"time"

	"github.com/ethereum/go-ethereum/accounts/keystore"
	"github.com/ethereum/go-ethereum/ethclient"
	"github.com/spf13/cobra"
	"golang.org/x/term"
)

var (
	_ = errors.New
	_ = big.NewInt
	_ = strings.NewReader
	_ = ethereum.NotFound
	_ = bind.Bind
	_ = common.Big1
	_ = types.BloomLookup
	_ = event.NewSubscription
	_ = abi.ConvertType
)

// WrapperFunctionsMetaData contains all meta data concerning the WrapperFunctions contract.
var WrapperFunctionsMetaData = &bind.MetaData{
	ABI: "[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_factory\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"},{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"name\":\"onERC1155BatchReceived\",\"outputs\":[{\"internalType\":\"bytes4\",\"name\":\"\",\"type\":\"bytes4\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"name\":\"onERC1155Received\",\"outputs\":[{\"internalType\":\"bytes4\",\"name\":\"\",\"type\":\"bytes4\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"unwrap1155\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"erc1155Contract\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"wrap1155\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"wrapperFactory\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"}]",
	Bin: "0x60a06040523480156200001157600080fd5b5060405162001221380380620012218339818101604052810190620000379190620000dc565b8073ffffffffffffffffffffffffffffffffffffffff1660808173ffffffffffffffffffffffffffffffffffffffff1681525050506200010e565b600080fd5b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000620000a48262000077565b9050919050565b620000b68162000097565b8114620000c257600080fd5b50565b600081519050620000d681620000ab565b92915050565b600060208284031215620000f557620000f462000072565b5b60006200010584828501620000c5565b91505092915050565b6080516110f062000131600039600081816101f5015261077201526110f06000f3fe608060405234801561001057600080fd5b50600436106100625760003560e01c806301ffc9a714610067578063117124f514610097578063bc197c81146100c8578063c8998a71146100f8578063dcacf81a14610128578063f23a6e6114610146575b600080fd5b610081600480360381019061007c919061087f565b610176565b60405161008e91906108c7565b60405180910390f35b6100b160048036038101906100ac9190610976565b6101f0565b6040516100bf9291906109fb565b60405180910390f35b6100e260048036038101906100dd9190610c32565b6104d8565b6040516100ef9190610d10565b60405180910390f35b610112600480360381019061010d9190610d2b565b6104ed565b60405161011f9190610d7e565b60405180910390f35b610130610770565b60405161013d9190610d99565b60405180910390f35b610160600480360381019061015b9190610db4565b610794565b60405161016d9190610d10565b60405180910390f35b60007f4e2312e0000000000000000000000000000000000000000000000000000000007bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916827bffffffffffffffffffffffffffffffffffffffffffffffffffffffff191614806101e957506101e8826107a9565b5b9050919050565b6000807f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff1663e885105987856040518363ffffffff1660e01b815260040161024e9291906109fb565b602060405180830381865afa15801561026b573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061028f9190610e60565b9150600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff1603610300576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016102f790610eea565b60405180910390fd5b8573ffffffffffffffffffffffffffffffffffffffff1663f242432a333086886040518563ffffffff1660e01b815260040161033f9493929190610f67565b600060405180830381600087803b15801561035957600080fd5b505af115801561036d573d6000803e3d6000fd5b505050508573ffffffffffffffffffffffffffffffffffffffff1663a22cb4658360016040518363ffffffff1660e01b81526004016103ad929190610fbf565b600060405180830381600087803b1580156103c757600080fd5b505af11580156103db573d6000803e3d6000fd5b505050508173ffffffffffffffffffffffffffffffffffffffff1663494cf96c3087876040518463ffffffff1660e01b815260040161041c93929190610fe8565b6020604051808303816000875af115801561043b573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061045f9190611034565b90508573ffffffffffffffffffffffffffffffffffffffff1663a22cb4658360006040518363ffffffff1660e01b815260040161049d929190610fbf565b600060405180830381600087803b1580156104b757600080fd5b505af11580156104cb573d6000803e3d6000fd5b5050505094509492505050565b600063bc197c8160e01b905095945050505050565b60008373ffffffffffffffffffffffffffffffffffffffff166323b872dd3330856040518463ffffffff1660e01b815260040161052c93929190610fe8565b6020604051808303816000875af115801561054b573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061056f919061108d565b508373ffffffffffffffffffffffffffffffffffffffff1663095ea7b385846040518363ffffffff1660e01b81526004016105ab9291906109fb565b6020604051808303816000875af11580156105ca573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906105ee919061108d565b508373ffffffffffffffffffffffffffffffffffffffff166354f7f2493085856040518463ffffffff1660e01b815260040161062c93929190610fe8565b6020604051808303816000875af115801561064b573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061066f9190611034565b90508373ffffffffffffffffffffffffffffffffffffffff1663a9059cbb338673ffffffffffffffffffffffffffffffffffffffff166370a08231306040518263ffffffff1660e01b81526004016106c79190610d99565b602060405180830381865afa1580156106e4573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906107089190611034565b6040518363ffffffff1660e01b81526004016107259291906109fb565b6020604051808303816000875af1158015610744573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610768919061108d565b509392505050565b7f000000000000000000000000000000000000000000000000000000000000000081565b600063f23a6e6160e01b905095945050505050565b60007f01ffc9a7000000000000000000000000000000000000000000000000000000007bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916827bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916149050919050565b6000604051905090565b600080fd5b600080fd5b60007fffffffff0000000000000000000000000000000000000000000000000000000082169050919050565b61085c81610827565b811461086757600080fd5b50565b60008135905061087981610853565b92915050565b6000602082840312156108955761089461081d565b5b60006108a38482850161086a565b91505092915050565b60008115159050919050565b6108c1816108ac565b82525050565b60006020820190506108dc60008301846108b8565b92915050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b600061090d826108e2565b9050919050565b61091d81610902565b811461092857600080fd5b50565b60008135905061093a81610914565b92915050565b6000819050919050565b61095381610940565b811461095e57600080fd5b50565b6000813590506109708161094a565b92915050565b600080600080608085870312156109905761098f61081d565b5b600061099e8782880161092b565b94505060206109af8782880161092b565b93505060406109c087828801610961565b92505060606109d187828801610961565b91505092959194509250565b6109e681610902565b82525050565b6109f581610940565b82525050565b6000604082019050610a1060008301856109dd565b610a1d60208301846109ec565b9392505050565b600080fd5b6000601f19601f8301169050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b610a7282610a29565b810181811067ffffffffffffffff82111715610a9157610a90610a3a565b5b80604052505050565b6000610aa4610813565b9050610ab08282610a69565b919050565b600067ffffffffffffffff821115610ad057610acf610a3a565b5b602082029050602081019050919050565b600080fd5b6000610af9610af484610ab5565b610a9a565b90508083825260208201905060208402830185811115610b1c57610b1b610ae1565b5b835b81811015610b455780610b318882610961565b845260208401935050602081019050610b1e565b5050509392505050565b600082601f830112610b6457610b63610a24565b5b8135610b74848260208601610ae6565b91505092915050565b600080fd5b600067ffffffffffffffff821115610b9d57610b9c610a3a565b5b610ba682610a29565b9050602081019050919050565b82818337600083830152505050565b6000610bd5610bd084610b82565b610a9a565b905082815260208101848484011115610bf157610bf0610b7d565b5b610bfc848285610bb3565b509392505050565b600082601f830112610c1957610c18610a24565b5b8135610c29848260208601610bc2565b91505092915050565b600080600080600060a08688031215610c4e57610c4d61081d565b5b6000610c5c8882890161092b565b9550506020610c6d8882890161092b565b945050604086013567ffffffffffffffff811115610c8e57610c8d610822565b5b610c9a88828901610b4f565b935050606086013567ffffffffffffffff811115610cbb57610cba610822565b5b610cc788828901610b4f565b925050608086013567ffffffffffffffff811115610ce857610ce7610822565b5b610cf488828901610c04565b9150509295509295909350565b610d0a81610827565b82525050565b6000602082019050610d256000830184610d01565b92915050565b600080600060608486031215610d4457610d4361081d565b5b6000610d528682870161092b565b9350506020610d638682870161092b565b9250506040610d7486828701610961565b9150509250925092565b6000602082019050610d9360008301846109ec565b92915050565b6000602082019050610dae60008301846109dd565b92915050565b600080600080600060a08688031215610dd057610dcf61081d565b5b6000610dde8882890161092b565b9550506020610def8882890161092b565b9450506040610e0088828901610961565b9350506060610e1188828901610961565b925050608086013567ffffffffffffffff811115610e3257610e31610822565b5b610e3e88828901610c04565b9150509295509295909350565b600081519050610e5a81610914565b92915050565b600060208284031215610e7657610e7561081d565b5b6000610e8484828501610e4b565b91505092915050565b600082825260208201905092915050565b7f4372656174652057726170706572206669727374000000000000000000000000600082015250565b6000610ed4601483610e8d565b9150610edf82610e9e565b602082019050919050565b60006020820190508181036000830152610f0381610ec7565b9050919050565b600082825260208201905092915050565b7f3078300000000000000000000000000000000000000000000000000000000000600082015250565b6000610f51600383610f0a565b9150610f5c82610f1b565b602082019050919050565b600060a082019050610f7c60008301876109dd565b610f8960208301866109dd565b610f9660408301856109ec565b610fa360608301846109ec565b8181036080830152610fb481610f44565b905095945050505050565b6000604082019050610fd460008301856109dd565b610fe160208301846108b8565b9392505050565b6000606082019050610ffd60008301866109dd565b61100a60208301856109dd565b61101760408301846109ec565b949350505050565b60008151905061102e8161094a565b92915050565b60006020828403121561104a5761104961081d565b5b60006110588482850161101f565b91505092915050565b61106a816108ac565b811461107557600080fd5b50565b60008151905061108781611061565b92915050565b6000602082840312156110a3576110a261081d565b5b60006110b184828501611078565b9150509291505056fea26469706673582212201b48ac6c5c1943b1ed544c3b9a425e78c8974948f650b56fc9d741477b1fd5a064736f6c63430008180033",
}

// WrapperFunctionsABI is the input ABI used to generate the binding from.
// Deprecated: Use WrapperFunctionsMetaData.ABI instead.
var WrapperFunctionsABI = WrapperFunctionsMetaData.ABI

// WrapperFunctionsBin is the compiled bytecode used for deploying new contracts.
// Deprecated: Use WrapperFunctionsMetaData.Bin instead.
var WrapperFunctionsBin = WrapperFunctionsMetaData.Bin

// DeployWrapperFunctions deploys a new Ethereum contract, binding an instance of WrapperFunctions to it.
func DeployWrapperFunctions(auth *bind.TransactOpts, backend bind.ContractBackend, _factory common.Address) (common.Address, *types.Transaction, *WrapperFunctions, error) {
	parsed, err := WrapperFunctionsMetaData.GetAbi()
	if err != nil {
		return common.Address{}, nil, nil, err
	}
	if parsed == nil {
		return common.Address{}, nil, nil, errors.New("GetABI returned nil")
	}

	address, tx, contract, err := bind.DeployContract(auth, *parsed, common.FromHex(WrapperFunctionsBin), backend, _factory)
	if err != nil {
		return common.Address{}, nil, nil, err
	}
	return address, tx, &WrapperFunctions{WrapperFunctionsCaller: WrapperFunctionsCaller{contract: contract}, WrapperFunctionsTransactor: WrapperFunctionsTransactor{contract: contract}, WrapperFunctionsFilterer: WrapperFunctionsFilterer{contract: contract}}, nil
}

// WrapperFunctions is an auto generated Go binding around an Ethereum contract.
type WrapperFunctions struct {
	WrapperFunctionsCaller     // Read-only binding to the contract
	WrapperFunctionsTransactor // Write-only binding to the contract
	WrapperFunctionsFilterer   // Log filterer for contract events
}

// WrapperFunctionsCaller is an auto generated read-only Go binding around an Ethereum contract.
type WrapperFunctionsCaller struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// WrapperFunctionsTransactor is an auto generated write-only Go binding around an Ethereum contract.
type WrapperFunctionsTransactor struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// WrapperFunctionsFilterer is an auto generated log filtering Go binding around an Ethereum contract events.
type WrapperFunctionsFilterer struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// WrapperFunctionsSession is an auto generated Go binding around an Ethereum contract,
// with pre-set call and transact options.
type WrapperFunctionsSession struct {
	Contract     *WrapperFunctions // Generic contract binding to set the session for
	CallOpts     bind.CallOpts     // Call options to use throughout this session
	TransactOpts bind.TransactOpts // Transaction auth options to use throughout this session
}

// WrapperFunctionsCallerSession is an auto generated read-only Go binding around an Ethereum contract,
// with pre-set call options.
type WrapperFunctionsCallerSession struct {
	Contract *WrapperFunctionsCaller // Generic contract caller binding to set the session for
	CallOpts bind.CallOpts           // Call options to use throughout this session
}

// WrapperFunctionsTransactorSession is an auto generated write-only Go binding around an Ethereum contract,
// with pre-set transact options.
type WrapperFunctionsTransactorSession struct {
	Contract     *WrapperFunctionsTransactor // Generic contract transactor binding to set the session for
	TransactOpts bind.TransactOpts           // Transaction auth options to use throughout this session
}

// WrapperFunctionsRaw is an auto generated low-level Go binding around an Ethereum contract.
type WrapperFunctionsRaw struct {
	Contract *WrapperFunctions // Generic contract binding to access the raw methods on
}

// WrapperFunctionsCallerRaw is an auto generated low-level read-only Go binding around an Ethereum contract.
type WrapperFunctionsCallerRaw struct {
	Contract *WrapperFunctionsCaller // Generic read-only contract binding to access the raw methods on
}

// WrapperFunctionsTransactorRaw is an auto generated low-level write-only Go binding around an Ethereum contract.
type WrapperFunctionsTransactorRaw struct {
	Contract *WrapperFunctionsTransactor // Generic write-only contract binding to access the raw methods on
}

// NewWrapperFunctions creates a new instance of WrapperFunctions, bound to a specific deployed contract.
func NewWrapperFunctions(address common.Address, backend bind.ContractBackend) (*WrapperFunctions, error) {
	contract, err := bindWrapperFunctions(address, backend, backend, backend)
	if err != nil {
		return nil, err
	}
	return &WrapperFunctions{WrapperFunctionsCaller: WrapperFunctionsCaller{contract: contract}, WrapperFunctionsTransactor: WrapperFunctionsTransactor{contract: contract}, WrapperFunctionsFilterer: WrapperFunctionsFilterer{contract: contract}}, nil
}

// NewWrapperFunctionsCaller creates a new read-only instance of WrapperFunctions, bound to a specific deployed contract.
func NewWrapperFunctionsCaller(address common.Address, caller bind.ContractCaller) (*WrapperFunctionsCaller, error) {
	contract, err := bindWrapperFunctions(address, caller, nil, nil)
	if err != nil {
		return nil, err
	}
	return &WrapperFunctionsCaller{contract: contract}, nil
}

// NewWrapperFunctionsTransactor creates a new write-only instance of WrapperFunctions, bound to a specific deployed contract.
func NewWrapperFunctionsTransactor(address common.Address, transactor bind.ContractTransactor) (*WrapperFunctionsTransactor, error) {
	contract, err := bindWrapperFunctions(address, nil, transactor, nil)
	if err != nil {
		return nil, err
	}
	return &WrapperFunctionsTransactor{contract: contract}, nil
}

// NewWrapperFunctionsFilterer creates a new log filterer instance of WrapperFunctions, bound to a specific deployed contract.
func NewWrapperFunctionsFilterer(address common.Address, filterer bind.ContractFilterer) (*WrapperFunctionsFilterer, error) {
	contract, err := bindWrapperFunctions(address, nil, nil, filterer)
	if err != nil {
		return nil, err
	}
	return &WrapperFunctionsFilterer{contract: contract}, nil
}

// bindWrapperFunctions binds a generic wrapper to an already deployed contract.
func bindWrapperFunctions(address common.Address, caller bind.ContractCaller, transactor bind.ContractTransactor, filterer bind.ContractFilterer) (*bind.BoundContract, error) {
	parsed, err := WrapperFunctionsMetaData.GetAbi()
	if err != nil {
		return nil, err
	}
	return bind.NewBoundContract(address, *parsed, caller, transactor, filterer), nil
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_WrapperFunctions *WrapperFunctionsRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _WrapperFunctions.Contract.WrapperFunctionsCaller.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_WrapperFunctions *WrapperFunctionsRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _WrapperFunctions.Contract.WrapperFunctionsTransactor.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_WrapperFunctions *WrapperFunctionsRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _WrapperFunctions.Contract.WrapperFunctionsTransactor.contract.Transact(opts, method, params...)
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_WrapperFunctions *WrapperFunctionsCallerRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _WrapperFunctions.Contract.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_WrapperFunctions *WrapperFunctionsTransactorRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _WrapperFunctions.Contract.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_WrapperFunctions *WrapperFunctionsTransactorRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _WrapperFunctions.Contract.contract.Transact(opts, method, params...)
}

// SupportsInterface is a free data retrieval call binding the contract method 0x01ffc9a7.
//
// Solidity: function supportsInterface(bytes4 interfaceId) view returns(bool)
func (_WrapperFunctions *WrapperFunctionsCaller) SupportsInterface(opts *bind.CallOpts, interfaceId [4]byte) (bool, error) {
	var out []interface{}
	err := _WrapperFunctions.contract.Call(opts, &out, "supportsInterface", interfaceId)

	if err != nil {
		return *new(bool), err
	}

	out0 := *abi.ConvertType(out[0], new(bool)).(*bool)

	return out0, err

}

// SupportsInterface is a free data retrieval call binding the contract method 0x01ffc9a7.
//
// Solidity: function supportsInterface(bytes4 interfaceId) view returns(bool)
func (_WrapperFunctions *WrapperFunctionsSession) SupportsInterface(interfaceId [4]byte) (bool, error) {
	return _WrapperFunctions.Contract.SupportsInterface(&_WrapperFunctions.CallOpts, interfaceId)
}

// SupportsInterface is a free data retrieval call binding the contract method 0x01ffc9a7.
//
// Solidity: function supportsInterface(bytes4 interfaceId) view returns(bool)
func (_WrapperFunctions *WrapperFunctionsCallerSession) SupportsInterface(interfaceId [4]byte) (bool, error) {
	return _WrapperFunctions.Contract.SupportsInterface(&_WrapperFunctions.CallOpts, interfaceId)
}

// WrapperFactory is a free data retrieval call binding the contract method 0xdcacf81a.
//
// Solidity: function wrapperFactory() view returns(address)
func (_WrapperFunctions *WrapperFunctionsCaller) WrapperFactory(opts *bind.CallOpts) (common.Address, error) {
	var out []interface{}
	err := _WrapperFunctions.contract.Call(opts, &out, "wrapperFactory")

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// WrapperFactory is a free data retrieval call binding the contract method 0xdcacf81a.
//
// Solidity: function wrapperFactory() view returns(address)
func (_WrapperFunctions *WrapperFunctionsSession) WrapperFactory() (common.Address, error) {
	return _WrapperFunctions.Contract.WrapperFactory(&_WrapperFunctions.CallOpts)
}

// WrapperFactory is a free data retrieval call binding the contract method 0xdcacf81a.
//
// Solidity: function wrapperFactory() view returns(address)
func (_WrapperFunctions *WrapperFunctionsCallerSession) WrapperFactory() (common.Address, error) {
	return _WrapperFunctions.Contract.WrapperFactory(&_WrapperFunctions.CallOpts)
}

// OnERC1155BatchReceived is a paid mutator transaction binding the contract method 0xbc197c81.
//
// Solidity: function onERC1155BatchReceived(address , address , uint256[] , uint256[] , bytes ) returns(bytes4)
func (_WrapperFunctions *WrapperFunctionsTransactor) OnERC1155BatchReceived(opts *bind.TransactOpts, arg0 common.Address, arg1 common.Address, arg2 []*big.Int, arg3 []*big.Int, arg4 []byte) (*types.Transaction, error) {
	return _WrapperFunctions.contract.Transact(opts, "onERC1155BatchReceived", arg0, arg1, arg2, arg3, arg4)
}

// OnERC1155BatchReceived is a paid mutator transaction binding the contract method 0xbc197c81.
//
// Solidity: function onERC1155BatchReceived(address , address , uint256[] , uint256[] , bytes ) returns(bytes4)
func (_WrapperFunctions *WrapperFunctionsSession) OnERC1155BatchReceived(arg0 common.Address, arg1 common.Address, arg2 []*big.Int, arg3 []*big.Int, arg4 []byte) (*types.Transaction, error) {
	return _WrapperFunctions.Contract.OnERC1155BatchReceived(&_WrapperFunctions.TransactOpts, arg0, arg1, arg2, arg3, arg4)
}

// OnERC1155BatchReceived is a paid mutator transaction binding the contract method 0xbc197c81.
//
// Solidity: function onERC1155BatchReceived(address , address , uint256[] , uint256[] , bytes ) returns(bytes4)
func (_WrapperFunctions *WrapperFunctionsTransactorSession) OnERC1155BatchReceived(arg0 common.Address, arg1 common.Address, arg2 []*big.Int, arg3 []*big.Int, arg4 []byte) (*types.Transaction, error) {
	return _WrapperFunctions.Contract.OnERC1155BatchReceived(&_WrapperFunctions.TransactOpts, arg0, arg1, arg2, arg3, arg4)
}

// OnERC1155Received is a paid mutator transaction binding the contract method 0xf23a6e61.
//
// Solidity: function onERC1155Received(address , address , uint256 , uint256 , bytes ) returns(bytes4)
func (_WrapperFunctions *WrapperFunctionsTransactor) OnERC1155Received(opts *bind.TransactOpts, arg0 common.Address, arg1 common.Address, arg2 *big.Int, arg3 *big.Int, arg4 []byte) (*types.Transaction, error) {
	return _WrapperFunctions.contract.Transact(opts, "onERC1155Received", arg0, arg1, arg2, arg3, arg4)
}

// OnERC1155Received is a paid mutator transaction binding the contract method 0xf23a6e61.
//
// Solidity: function onERC1155Received(address , address , uint256 , uint256 , bytes ) returns(bytes4)
func (_WrapperFunctions *WrapperFunctionsSession) OnERC1155Received(arg0 common.Address, arg1 common.Address, arg2 *big.Int, arg3 *big.Int, arg4 []byte) (*types.Transaction, error) {
	return _WrapperFunctions.Contract.OnERC1155Received(&_WrapperFunctions.TransactOpts, arg0, arg1, arg2, arg3, arg4)
}

// OnERC1155Received is a paid mutator transaction binding the contract method 0xf23a6e61.
//
// Solidity: function onERC1155Received(address , address , uint256 , uint256 , bytes ) returns(bytes4)
func (_WrapperFunctions *WrapperFunctionsTransactorSession) OnERC1155Received(arg0 common.Address, arg1 common.Address, arg2 *big.Int, arg3 *big.Int, arg4 []byte) (*types.Transaction, error) {
	return _WrapperFunctions.Contract.OnERC1155Received(&_WrapperFunctions.TransactOpts, arg0, arg1, arg2, arg3, arg4)
}

// Unwrap1155 is a paid mutator transaction binding the contract method 0xc8998a71.
//
// Solidity: function unwrap1155(address token, address to, uint256 amount) returns(uint256 _amount)
func (_WrapperFunctions *WrapperFunctionsTransactor) Unwrap1155(opts *bind.TransactOpts, token common.Address, to common.Address, amount *big.Int) (*types.Transaction, error) {
	return _WrapperFunctions.contract.Transact(opts, "unwrap1155", token, to, amount)
}

// Unwrap1155 is a paid mutator transaction binding the contract method 0xc8998a71.
//
// Solidity: function unwrap1155(address token, address to, uint256 amount) returns(uint256 _amount)
func (_WrapperFunctions *WrapperFunctionsSession) Unwrap1155(token common.Address, to common.Address, amount *big.Int) (*types.Transaction, error) {
	return _WrapperFunctions.Contract.Unwrap1155(&_WrapperFunctions.TransactOpts, token, to, amount)
}

// Unwrap1155 is a paid mutator transaction binding the contract method 0xc8998a71.
//
// Solidity: function unwrap1155(address token, address to, uint256 amount) returns(uint256 _amount)
func (_WrapperFunctions *WrapperFunctionsTransactorSession) Unwrap1155(token common.Address, to common.Address, amount *big.Int) (*types.Transaction, error) {
	return _WrapperFunctions.Contract.Unwrap1155(&_WrapperFunctions.TransactOpts, token, to, amount)
}

// Wrap1155 is a paid mutator transaction binding the contract method 0x117124f5.
//
// Solidity: function wrap1155(address erc1155Contract, address to, uint256 amount, uint256 tokenId) returns(address token, uint256 _amount)
func (_WrapperFunctions *WrapperFunctionsTransactor) Wrap1155(opts *bind.TransactOpts, erc1155Contract common.Address, to common.Address, amount *big.Int, tokenId *big.Int) (*types.Transaction, error) {
	return _WrapperFunctions.contract.Transact(opts, "wrap1155", erc1155Contract, to, amount, tokenId)
}

// Wrap1155 is a paid mutator transaction binding the contract method 0x117124f5.
//
// Solidity: function wrap1155(address erc1155Contract, address to, uint256 amount, uint256 tokenId) returns(address token, uint256 _amount)
func (_WrapperFunctions *WrapperFunctionsSession) Wrap1155(erc1155Contract common.Address, to common.Address, amount *big.Int, tokenId *big.Int) (*types.Transaction, error) {
	return _WrapperFunctions.Contract.Wrap1155(&_WrapperFunctions.TransactOpts, erc1155Contract, to, amount, tokenId)
}

// Wrap1155 is a paid mutator transaction binding the contract method 0x117124f5.
//
// Solidity: function wrap1155(address erc1155Contract, address to, uint256 amount, uint256 tokenId) returns(address token, uint256 _amount)
func (_WrapperFunctions *WrapperFunctionsTransactorSession) Wrap1155(erc1155Contract common.Address, to common.Address, amount *big.Int, tokenId *big.Int) (*types.Transaction, error) {
	return _WrapperFunctions.Contract.Wrap1155(&_WrapperFunctions.TransactOpts, erc1155Contract, to, amount, tokenId)
}

func CreateWrapperFunctionsDeploymentCommand() *cobra.Command {
	var keyfile, nonce, password, value, gasPrice, maxFeePerGas, maxPriorityFeePerGas, rpc string
	var gasLimit uint64
	var simulate bool
	var timeout uint

	var factory common.Address
	var factoryRaw string

	cmd := &cobra.Command{
		Use:   "deploy",
		Short: "Deploy a new WrapperFunctions contract",
		PreRunE: func(cmd *cobra.Command, args []string) error {
			if keyfile == "" {
				return fmt.Errorf("--keystore not specified (this should be a path to an Ethereum account keystore file)")
			}

			if factoryRaw == "" {
				return fmt.Errorf("--factory argument not specified")
			} else if !common.IsHexAddress(factoryRaw) {
				return fmt.Errorf("--factory argument is not a valid Ethereum address")
			}
			factory = common.HexToAddress(factoryRaw)

			return nil
		},
		RunE: func(cmd *cobra.Command, args []string) error {
			client, clientErr := NewClient(rpc)
			if clientErr != nil {
				return clientErr
			}

			key, keyErr := KeyFromFile(keyfile, password)
			if keyErr != nil {
				return keyErr
			}

			chainIDCtx, cancelChainIDCtx := NewChainContext(timeout)
			defer cancelChainIDCtx()
			chainID, chainIDErr := client.ChainID(chainIDCtx)
			if chainIDErr != nil {
				return chainIDErr
			}

			transactionOpts, transactionOptsErr := bind.NewKeyedTransactorWithChainID(key.PrivateKey, chainID)
			if transactionOptsErr != nil {
				return transactionOptsErr
			}

			SetTransactionParametersFromArgs(transactionOpts, nonce, value, gasPrice, maxFeePerGas, maxPriorityFeePerGas, gasLimit, simulate)

			address, deploymentTransaction, _, deploymentErr := DeployWrapperFunctions(
				transactionOpts,
				client,
				factory,
			)
			if deploymentErr != nil {
				return deploymentErr
			}

			cmd.Printf("Transaction hash: %s\nContract address: %s\n", deploymentTransaction.Hash().Hex(), address.Hex())
			if transactionOpts.NoSend {
				estimationMessage := ethereum.CallMsg{
					From: transactionOpts.From,
					Data: deploymentTransaction.Data(),
				}

				gasEstimationCtx, cancelGasEstimationCtx := NewChainContext(timeout)
				defer cancelGasEstimationCtx()

				gasEstimate, gasEstimateErr := client.EstimateGas(gasEstimationCtx, estimationMessage)
				if gasEstimateErr != nil {
					return gasEstimateErr
				}

				transactionBinary, transactionBinaryErr := deploymentTransaction.MarshalBinary()
				if transactionBinaryErr != nil {
					return transactionBinaryErr
				}
				transactionBinaryHex := hex.EncodeToString(transactionBinary)

				cmd.Printf("Transaction: %s\nEstimated gas: %d\n", transactionBinaryHex, gasEstimate)
			} else {
				cmd.Println("Transaction submitted")
			}

			return nil
		},
	}

	cmd.Flags().StringVar(&rpc, "rpc", "", "URL of the JSONRPC API to use")
	cmd.Flags().StringVar(&keyfile, "keyfile", "", "Path to the keystore file to use for the transaction")
	cmd.Flags().StringVar(&password, "password", "", "Password to use to unlock the keystore (if not specified, you will be prompted for the password when the command executes)")
	cmd.Flags().StringVar(&nonce, "nonce", "", "Nonce to use for the transaction")
	cmd.Flags().StringVar(&value, "value", "", "Value to send with the transaction")
	cmd.Flags().StringVar(&gasPrice, "gas-price", "", "Gas price to use for the transaction")
	cmd.Flags().StringVar(&maxFeePerGas, "max-fee-per-gas", "", "Maximum fee per gas to use for the (EIP-1559) transaction")
	cmd.Flags().StringVar(&maxPriorityFeePerGas, "max-priority-fee-per-gas", "", "Maximum priority fee per gas to use for the (EIP-1559) transaction")
	cmd.Flags().Uint64Var(&gasLimit, "gas-limit", 0, "Gas limit for the transaction")
	cmd.Flags().BoolVar(&simulate, "simulate", false, "Simulate the transaction without sending it")
	cmd.Flags().UintVar(&timeout, "timeout", 60, "Timeout (in seconds) for interactions with the JSONRPC API")

	cmd.Flags().StringVar(&factoryRaw, "factory", "", "factory argument")

	return cmd
}

func CreateSupportsInterfaceCommand() *cobra.Command {
	var contractAddressRaw, rpc string
	var contractAddress common.Address
	var timeout uint

	var blockNumberRaw, fromAddressRaw string
	var pending bool

	var interfaceId [4]byte
	var interfaceIdRaw string

	var capture0 bool

	cmd := &cobra.Command{
		Use:   "supports-interface",
		Short: "Call the SupportsInterface view method on a WrapperFunctions contract",
		PreRunE: func(cmd *cobra.Command, args []string) error {
			if contractAddressRaw == "" {
				return fmt.Errorf("--contract not specified")
			} else if !common.IsHexAddress(contractAddressRaw) {
				return fmt.Errorf("--contract is not a valid Ethereum address")
			}
			contractAddress = common.HexToAddress(contractAddressRaw)

			var hexDecodeinterfaceIdErr error

			var intermediateinterfaceIdLeaf []byte
			intermediateinterfaceIdLeaf, hexDecodeinterfaceIdErr = hex.DecodeString(interfaceIdRaw)
			if hexDecodeinterfaceIdErr != nil {
				return hexDecodeinterfaceIdErr
			}
			interfaceId = [4]byte(intermediateinterfaceIdLeaf[:4])

			return nil
		},
		RunE: func(cmd *cobra.Command, args []string) error {
			client, clientErr := NewClient(rpc)
			if clientErr != nil {
				return clientErr
			}

			contract, contractErr := NewWrapperFunctions(contractAddress, client)
			if contractErr != nil {
				return contractErr
			}

			callOpts := bind.CallOpts{}
			SetCallParametersFromArgs(&callOpts, pending, fromAddressRaw, blockNumberRaw)

			session := WrapperFunctionsCallerSession{
				Contract: &contract.WrapperFunctionsCaller,
				CallOpts: callOpts,
			}

			var callErr error
			capture0, callErr = session.SupportsInterface(
				interfaceId,
			)
			if callErr != nil {
				return callErr
			}

			cmd.Printf("0: %t\n", capture0)

			return nil
		},
	}

	cmd.Flags().StringVar(&rpc, "rpc", "", "URL of the JSONRPC API to use")
	cmd.Flags().StringVar(&blockNumberRaw, "block", "", "Block number at which to call the view method")
	cmd.Flags().BoolVar(&pending, "pending", false, "Set this flag if it's ok to call the view method against pending state")
	cmd.Flags().UintVar(&timeout, "timeout", 60, "Timeout (in seconds) for interactions with the JSONRPC API")
	cmd.Flags().StringVar(&contractAddressRaw, "contract", "", "Address of the contract to interact with")
	cmd.Flags().StringVar(&fromAddressRaw, "from", "", "Optional address for caller of the view method")

	cmd.Flags().StringVar(&interfaceIdRaw, "interface-id", "", "interface-id argument")

	return cmd
}
func CreateWrapperFactoryCommand() *cobra.Command {
	var contractAddressRaw, rpc string
	var contractAddress common.Address
	var timeout uint

	var blockNumberRaw, fromAddressRaw string
	var pending bool

	var capture0 common.Address

	cmd := &cobra.Command{
		Use:   "wrapper-factory",
		Short: "Call the WrapperFactory view method on a WrapperFunctions contract",
		PreRunE: func(cmd *cobra.Command, args []string) error {
			if contractAddressRaw == "" {
				return fmt.Errorf("--contract not specified")
			} else if !common.IsHexAddress(contractAddressRaw) {
				return fmt.Errorf("--contract is not a valid Ethereum address")
			}
			contractAddress = common.HexToAddress(contractAddressRaw)

			return nil
		},
		RunE: func(cmd *cobra.Command, args []string) error {
			client, clientErr := NewClient(rpc)
			if clientErr != nil {
				return clientErr
			}

			contract, contractErr := NewWrapperFunctions(contractAddress, client)
			if contractErr != nil {
				return contractErr
			}

			callOpts := bind.CallOpts{}
			SetCallParametersFromArgs(&callOpts, pending, fromAddressRaw, blockNumberRaw)

			session := WrapperFunctionsCallerSession{
				Contract: &contract.WrapperFunctionsCaller,
				CallOpts: callOpts,
			}

			var callErr error
			capture0, callErr = session.WrapperFactory()
			if callErr != nil {
				return callErr
			}

			cmd.Printf("0: %s\n", capture0.Hex())

			return nil
		},
	}

	cmd.Flags().StringVar(&rpc, "rpc", "", "URL of the JSONRPC API to use")
	cmd.Flags().StringVar(&blockNumberRaw, "block", "", "Block number at which to call the view method")
	cmd.Flags().BoolVar(&pending, "pending", false, "Set this flag if it's ok to call the view method against pending state")
	cmd.Flags().UintVar(&timeout, "timeout", 60, "Timeout (in seconds) for interactions with the JSONRPC API")
	cmd.Flags().StringVar(&contractAddressRaw, "contract", "", "Address of the contract to interact with")
	cmd.Flags().StringVar(&fromAddressRaw, "from", "", "Optional address for caller of the view method")

	return cmd
}

func CreateOnErc1155BatchReceivedCommand() *cobra.Command {
	var keyfile, nonce, password, value, gasPrice, maxFeePerGas, maxPriorityFeePerGas, rpc, contractAddressRaw string
	var gasLimit uint64
	var simulate bool
	var timeout uint
	var contractAddress common.Address

	var arg0 common.Address
	var arg0Raw string
	var arg1 common.Address
	var arg1Raw string
	var arg2 []*big.Int
	var arg2Raw string
	var arg3 []*big.Int
	var arg3Raw string
	var arg4 []byte
	var arg4Raw string

	cmd := &cobra.Command{
		Use:   "on-erc-1155-batch-received",
		Short: "Execute the OnERC1155BatchReceived method on a WrapperFunctions contract",
		PreRunE: func(cmd *cobra.Command, args []string) error {
			if keyfile == "" {
				return fmt.Errorf("--keystore not specified")
			}

			if contractAddressRaw == "" {
				return fmt.Errorf("--contract not specified")
			} else if !common.IsHexAddress(contractAddressRaw) {
				return fmt.Errorf("--contract is not a valid Ethereum address")
			}
			contractAddress = common.HexToAddress(contractAddressRaw)

			if arg0Raw == "" {
				return fmt.Errorf("--arg-0 argument not specified")
			} else if !common.IsHexAddress(arg0Raw) {
				return fmt.Errorf("--arg-0 argument is not a valid Ethereum address")
			}
			arg0 = common.HexToAddress(arg0Raw)

			if arg1Raw == "" {
				return fmt.Errorf("--arg-1 argument not specified")
			} else if !common.IsHexAddress(arg1Raw) {
				return fmt.Errorf("--arg-1 argument is not a valid Ethereum address")
			}
			arg1 = common.HexToAddress(arg1Raw)

			if arg2Raw == "" {
				return fmt.Errorf("--arg-2 argument not specified")
			} else if strings.HasPrefix(arg2Raw, "@") {
				filename := strings.TrimPrefix(arg2Raw, "@")
				contents, readErr := os.ReadFile(filename)
				if readErr != nil {
					return readErr
				}
				unmarshalErr := json.Unmarshal(contents, &arg2)
				if unmarshalErr != nil {
					return unmarshalErr
				}
			} else {
				unmarshalErr := json.Unmarshal([]byte(arg2Raw), &arg2)
				if unmarshalErr != nil {
					return unmarshalErr
				}
			}

			if arg3Raw == "" {
				return fmt.Errorf("--arg-3 argument not specified")
			} else if strings.HasPrefix(arg3Raw, "@") {
				filename := strings.TrimPrefix(arg3Raw, "@")
				contents, readErr := os.ReadFile(filename)
				if readErr != nil {
					return readErr
				}
				unmarshalErr := json.Unmarshal(contents, &arg3)
				if unmarshalErr != nil {
					return unmarshalErr
				}
			} else {
				unmarshalErr := json.Unmarshal([]byte(arg3Raw), &arg3)
				if unmarshalErr != nil {
					return unmarshalErr
				}
			}

			var hexDecodearg4Err error

			arg4, hexDecodearg4Err = hex.DecodeString(arg4Raw)
			if hexDecodearg4Err != nil {
				return hexDecodearg4Err
			}

			return nil
		},
		RunE: func(cmd *cobra.Command, args []string) error {
			client, clientErr := NewClient(rpc)
			if clientErr != nil {
				return clientErr
			}

			key, keyErr := KeyFromFile(keyfile, password)
			if keyErr != nil {
				return keyErr
			}

			chainIDCtx, cancelChainIDCtx := NewChainContext(timeout)
			defer cancelChainIDCtx()
			chainID, chainIDErr := client.ChainID(chainIDCtx)
			if chainIDErr != nil {
				return chainIDErr
			}

			transactionOpts, transactionOptsErr := bind.NewKeyedTransactorWithChainID(key.PrivateKey, chainID)
			if transactionOptsErr != nil {
				return transactionOptsErr
			}

			SetTransactionParametersFromArgs(transactionOpts, nonce, value, gasPrice, maxFeePerGas, maxPriorityFeePerGas, gasLimit, simulate)

			contract, contractErr := NewWrapperFunctions(contractAddress, client)
			if contractErr != nil {
				return contractErr
			}

			session := WrapperFunctionsTransactorSession{
				Contract:     &contract.WrapperFunctionsTransactor,
				TransactOpts: *transactionOpts,
			}

			transaction, transactionErr := session.OnERC1155BatchReceived(
				arg0,
				arg1,
				arg2,
				arg3,
				arg4,
			)
			if transactionErr != nil {
				return transactionErr
			}

			cmd.Printf("Transaction hash: %s\n", transaction.Hash().Hex())
			if transactionOpts.NoSend {
				estimationMessage := ethereum.CallMsg{
					From: transactionOpts.From,
					To:   &contractAddress,
					Data: transaction.Data(),
				}

				gasEstimationCtx, cancelGasEstimationCtx := NewChainContext(timeout)
				defer cancelGasEstimationCtx()

				gasEstimate, gasEstimateErr := client.EstimateGas(gasEstimationCtx, estimationMessage)
				if gasEstimateErr != nil {
					return gasEstimateErr
				}

				transactionBinary, transactionBinaryErr := transaction.MarshalBinary()
				if transactionBinaryErr != nil {
					return transactionBinaryErr
				}
				transactionBinaryHex := hex.EncodeToString(transactionBinary)

				cmd.Printf("Transaction: %s\nEstimated gas: %d\n", transactionBinaryHex, gasEstimate)
			} else {
				cmd.Println("Transaction submitted")
			}

			return nil
		},
	}

	cmd.Flags().StringVar(&rpc, "rpc", "", "URL of the JSONRPC API to use")
	cmd.Flags().StringVar(&keyfile, "keyfile", "", "Path to the keystore file to use for the transaction")
	cmd.Flags().StringVar(&password, "password", "", "Password to use to unlock the keystore (if not specified, you will be prompted for the password when the command executes)")
	cmd.Flags().StringVar(&nonce, "nonce", "", "Nonce to use for the transaction")
	cmd.Flags().StringVar(&value, "value", "", "Value to send with the transaction")
	cmd.Flags().StringVar(&gasPrice, "gas-price", "", "Gas price to use for the transaction")
	cmd.Flags().StringVar(&maxFeePerGas, "max-fee-per-gas", "", "Maximum fee per gas to use for the (EIP-1559) transaction")
	cmd.Flags().StringVar(&maxPriorityFeePerGas, "max-priority-fee-per-gas", "", "Maximum priority fee per gas to use for the (EIP-1559) transaction")
	cmd.Flags().Uint64Var(&gasLimit, "gas-limit", 0, "Gas limit for the transaction")
	cmd.Flags().BoolVar(&simulate, "simulate", false, "Simulate the transaction without sending it")
	cmd.Flags().UintVar(&timeout, "timeout", 60, "Timeout (in seconds) for interactions with the JSONRPC API")
	cmd.Flags().StringVar(&contractAddressRaw, "contract", "", "Address of the contract to interact with")

	cmd.Flags().StringVar(&arg0Raw, "arg-0", "", "arg-0 argument")
	cmd.Flags().StringVar(&arg1Raw, "arg-1", "", "arg-1 argument")
	cmd.Flags().StringVar(&arg2Raw, "arg-2", "", "arg-2 argument")
	cmd.Flags().StringVar(&arg3Raw, "arg-3", "", "arg-3 argument")
	cmd.Flags().StringVar(&arg4Raw, "arg-4", "", "arg-4 argument")

	return cmd
}
func CreateOnErc1155ReceivedCommand() *cobra.Command {
	var keyfile, nonce, password, value, gasPrice, maxFeePerGas, maxPriorityFeePerGas, rpc, contractAddressRaw string
	var gasLimit uint64
	var simulate bool
	var timeout uint
	var contractAddress common.Address

	var arg0 common.Address
	var arg0Raw string
	var arg1 common.Address
	var arg1Raw string
	var arg2 *big.Int
	var arg2Raw string
	var arg3 *big.Int
	var arg3Raw string
	var arg4 []byte
	var arg4Raw string

	cmd := &cobra.Command{
		Use:   "on-erc-1155-received",
		Short: "Execute the OnERC1155Received method on a WrapperFunctions contract",
		PreRunE: func(cmd *cobra.Command, args []string) error {
			if keyfile == "" {
				return fmt.Errorf("--keystore not specified")
			}

			if contractAddressRaw == "" {
				return fmt.Errorf("--contract not specified")
			} else if !common.IsHexAddress(contractAddressRaw) {
				return fmt.Errorf("--contract is not a valid Ethereum address")
			}
			contractAddress = common.HexToAddress(contractAddressRaw)

			if arg0Raw == "" {
				return fmt.Errorf("--arg-0 argument not specified")
			} else if !common.IsHexAddress(arg0Raw) {
				return fmt.Errorf("--arg-0 argument is not a valid Ethereum address")
			}
			arg0 = common.HexToAddress(arg0Raw)

			if arg1Raw == "" {
				return fmt.Errorf("--arg-1 argument not specified")
			} else if !common.IsHexAddress(arg1Raw) {
				return fmt.Errorf("--arg-1 argument is not a valid Ethereum address")
			}
			arg1 = common.HexToAddress(arg1Raw)

			if arg2Raw == "" {
				return fmt.Errorf("--arg-2 argument not specified")
			}
			arg2 = new(big.Int)
			arg2.SetString(arg2Raw, 0)

			if arg3Raw == "" {
				return fmt.Errorf("--arg-3 argument not specified")
			}
			arg3 = new(big.Int)
			arg3.SetString(arg3Raw, 0)

			var hexDecodearg4Err error

			arg4, hexDecodearg4Err = hex.DecodeString(arg4Raw)
			if hexDecodearg4Err != nil {
				return hexDecodearg4Err
			}

			return nil
		},
		RunE: func(cmd *cobra.Command, args []string) error {
			client, clientErr := NewClient(rpc)
			if clientErr != nil {
				return clientErr
			}

			key, keyErr := KeyFromFile(keyfile, password)
			if keyErr != nil {
				return keyErr
			}

			chainIDCtx, cancelChainIDCtx := NewChainContext(timeout)
			defer cancelChainIDCtx()
			chainID, chainIDErr := client.ChainID(chainIDCtx)
			if chainIDErr != nil {
				return chainIDErr
			}

			transactionOpts, transactionOptsErr := bind.NewKeyedTransactorWithChainID(key.PrivateKey, chainID)
			if transactionOptsErr != nil {
				return transactionOptsErr
			}

			SetTransactionParametersFromArgs(transactionOpts, nonce, value, gasPrice, maxFeePerGas, maxPriorityFeePerGas, gasLimit, simulate)

			contract, contractErr := NewWrapperFunctions(contractAddress, client)
			if contractErr != nil {
				return contractErr
			}

			session := WrapperFunctionsTransactorSession{
				Contract:     &contract.WrapperFunctionsTransactor,
				TransactOpts: *transactionOpts,
			}

			transaction, transactionErr := session.OnERC1155Received(
				arg0,
				arg1,
				arg2,
				arg3,
				arg4,
			)
			if transactionErr != nil {
				return transactionErr
			}

			cmd.Printf("Transaction hash: %s\n", transaction.Hash().Hex())
			if transactionOpts.NoSend {
				estimationMessage := ethereum.CallMsg{
					From: transactionOpts.From,
					To:   &contractAddress,
					Data: transaction.Data(),
				}

				gasEstimationCtx, cancelGasEstimationCtx := NewChainContext(timeout)
				defer cancelGasEstimationCtx()

				gasEstimate, gasEstimateErr := client.EstimateGas(gasEstimationCtx, estimationMessage)
				if gasEstimateErr != nil {
					return gasEstimateErr
				}

				transactionBinary, transactionBinaryErr := transaction.MarshalBinary()
				if transactionBinaryErr != nil {
					return transactionBinaryErr
				}
				transactionBinaryHex := hex.EncodeToString(transactionBinary)

				cmd.Printf("Transaction: %s\nEstimated gas: %d\n", transactionBinaryHex, gasEstimate)
			} else {
				cmd.Println("Transaction submitted")
			}

			return nil
		},
	}

	cmd.Flags().StringVar(&rpc, "rpc", "", "URL of the JSONRPC API to use")
	cmd.Flags().StringVar(&keyfile, "keyfile", "", "Path to the keystore file to use for the transaction")
	cmd.Flags().StringVar(&password, "password", "", "Password to use to unlock the keystore (if not specified, you will be prompted for the password when the command executes)")
	cmd.Flags().StringVar(&nonce, "nonce", "", "Nonce to use for the transaction")
	cmd.Flags().StringVar(&value, "value", "", "Value to send with the transaction")
	cmd.Flags().StringVar(&gasPrice, "gas-price", "", "Gas price to use for the transaction")
	cmd.Flags().StringVar(&maxFeePerGas, "max-fee-per-gas", "", "Maximum fee per gas to use for the (EIP-1559) transaction")
	cmd.Flags().StringVar(&maxPriorityFeePerGas, "max-priority-fee-per-gas", "", "Maximum priority fee per gas to use for the (EIP-1559) transaction")
	cmd.Flags().Uint64Var(&gasLimit, "gas-limit", 0, "Gas limit for the transaction")
	cmd.Flags().BoolVar(&simulate, "simulate", false, "Simulate the transaction without sending it")
	cmd.Flags().UintVar(&timeout, "timeout", 60, "Timeout (in seconds) for interactions with the JSONRPC API")
	cmd.Flags().StringVar(&contractAddressRaw, "contract", "", "Address of the contract to interact with")

	cmd.Flags().StringVar(&arg0Raw, "arg-0", "", "arg-0 argument")
	cmd.Flags().StringVar(&arg1Raw, "arg-1", "", "arg-1 argument")
	cmd.Flags().StringVar(&arg2Raw, "arg-2", "", "arg-2 argument")
	cmd.Flags().StringVar(&arg3Raw, "arg-3", "", "arg-3 argument")
	cmd.Flags().StringVar(&arg4Raw, "arg-4", "", "arg-4 argument")

	return cmd
}
func CreateUnwrap1155Command() *cobra.Command {
	var keyfile, nonce, password, value, gasPrice, maxFeePerGas, maxPriorityFeePerGas, rpc, contractAddressRaw string
	var gasLimit uint64
	var simulate bool
	var timeout uint
	var contractAddress common.Address

	var token common.Address
	var tokenRaw string
	var to0 common.Address
	var to0Raw string
	var amount *big.Int
	var amountRaw string

	cmd := &cobra.Command{
		Use:   "unwrap-1155",
		Short: "Execute the Unwrap1155 method on a WrapperFunctions contract",
		PreRunE: func(cmd *cobra.Command, args []string) error {
			if keyfile == "" {
				return fmt.Errorf("--keystore not specified")
			}

			if contractAddressRaw == "" {
				return fmt.Errorf("--contract not specified")
			} else if !common.IsHexAddress(contractAddressRaw) {
				return fmt.Errorf("--contract is not a valid Ethereum address")
			}
			contractAddress = common.HexToAddress(contractAddressRaw)

			if tokenRaw == "" {
				return fmt.Errorf("--token argument not specified")
			} else if !common.IsHexAddress(tokenRaw) {
				return fmt.Errorf("--token argument is not a valid Ethereum address")
			}
			token = common.HexToAddress(tokenRaw)

			if to0Raw == "" {
				return fmt.Errorf("--to-0 argument not specified")
			} else if !common.IsHexAddress(to0Raw) {
				return fmt.Errorf("--to-0 argument is not a valid Ethereum address")
			}
			to0 = common.HexToAddress(to0Raw)

			if amountRaw == "" {
				return fmt.Errorf("--amount argument not specified")
			}
			amount = new(big.Int)
			amount.SetString(amountRaw, 0)

			return nil
		},
		RunE: func(cmd *cobra.Command, args []string) error {
			client, clientErr := NewClient(rpc)
			if clientErr != nil {
				return clientErr
			}

			key, keyErr := KeyFromFile(keyfile, password)
			if keyErr != nil {
				return keyErr
			}

			chainIDCtx, cancelChainIDCtx := NewChainContext(timeout)
			defer cancelChainIDCtx()
			chainID, chainIDErr := client.ChainID(chainIDCtx)
			if chainIDErr != nil {
				return chainIDErr
			}

			transactionOpts, transactionOptsErr := bind.NewKeyedTransactorWithChainID(key.PrivateKey, chainID)
			if transactionOptsErr != nil {
				return transactionOptsErr
			}

			SetTransactionParametersFromArgs(transactionOpts, nonce, value, gasPrice, maxFeePerGas, maxPriorityFeePerGas, gasLimit, simulate)

			contract, contractErr := NewWrapperFunctions(contractAddress, client)
			if contractErr != nil {
				return contractErr
			}

			session := WrapperFunctionsTransactorSession{
				Contract:     &contract.WrapperFunctionsTransactor,
				TransactOpts: *transactionOpts,
			}

			transaction, transactionErr := session.Unwrap1155(
				token,
				to0,
				amount,
			)
			if transactionErr != nil {
				return transactionErr
			}

			cmd.Printf("Transaction hash: %s\n", transaction.Hash().Hex())
			if transactionOpts.NoSend {
				estimationMessage := ethereum.CallMsg{
					From: transactionOpts.From,
					To:   &contractAddress,
					Data: transaction.Data(),
				}

				gasEstimationCtx, cancelGasEstimationCtx := NewChainContext(timeout)
				defer cancelGasEstimationCtx()

				gasEstimate, gasEstimateErr := client.EstimateGas(gasEstimationCtx, estimationMessage)
				if gasEstimateErr != nil {
					return gasEstimateErr
				}

				transactionBinary, transactionBinaryErr := transaction.MarshalBinary()
				if transactionBinaryErr != nil {
					return transactionBinaryErr
				}
				transactionBinaryHex := hex.EncodeToString(transactionBinary)

				cmd.Printf("Transaction: %s\nEstimated gas: %d\n", transactionBinaryHex, gasEstimate)
			} else {
				cmd.Println("Transaction submitted")
			}

			return nil
		},
	}

	cmd.Flags().StringVar(&rpc, "rpc", "", "URL of the JSONRPC API to use")
	cmd.Flags().StringVar(&keyfile, "keyfile", "", "Path to the keystore file to use for the transaction")
	cmd.Flags().StringVar(&password, "password", "", "Password to use to unlock the keystore (if not specified, you will be prompted for the password when the command executes)")
	cmd.Flags().StringVar(&nonce, "nonce", "", "Nonce to use for the transaction")
	cmd.Flags().StringVar(&value, "value", "", "Value to send with the transaction")
	cmd.Flags().StringVar(&gasPrice, "gas-price", "", "Gas price to use for the transaction")
	cmd.Flags().StringVar(&maxFeePerGas, "max-fee-per-gas", "", "Maximum fee per gas to use for the (EIP-1559) transaction")
	cmd.Flags().StringVar(&maxPriorityFeePerGas, "max-priority-fee-per-gas", "", "Maximum priority fee per gas to use for the (EIP-1559) transaction")
	cmd.Flags().Uint64Var(&gasLimit, "gas-limit", 0, "Gas limit for the transaction")
	cmd.Flags().BoolVar(&simulate, "simulate", false, "Simulate the transaction without sending it")
	cmd.Flags().UintVar(&timeout, "timeout", 60, "Timeout (in seconds) for interactions with the JSONRPC API")
	cmd.Flags().StringVar(&contractAddressRaw, "contract", "", "Address of the contract to interact with")

	cmd.Flags().StringVar(&tokenRaw, "token", "", "token argument")
	cmd.Flags().StringVar(&to0Raw, "to-0", "", "to-0 argument")
	cmd.Flags().StringVar(&amountRaw, "amount", "", "amount argument")

	return cmd
}
func CreateWrap1155Command() *cobra.Command {
	var keyfile, nonce, password, value, gasPrice, maxFeePerGas, maxPriorityFeePerGas, rpc, contractAddressRaw string
	var gasLimit uint64
	var simulate bool
	var timeout uint
	var contractAddress common.Address

	var erc1155Contract common.Address
	var erc1155ContractRaw string
	var to0 common.Address
	var to0Raw string
	var amount *big.Int
	var amountRaw string
	var tokenId *big.Int
	var tokenIdRaw string

	cmd := &cobra.Command{
		Use:   "wrap-1155",
		Short: "Execute the Wrap1155 method on a WrapperFunctions contract",
		PreRunE: func(cmd *cobra.Command, args []string) error {
			if keyfile == "" {
				return fmt.Errorf("--keystore not specified")
			}

			if contractAddressRaw == "" {
				return fmt.Errorf("--contract not specified")
			} else if !common.IsHexAddress(contractAddressRaw) {
				return fmt.Errorf("--contract is not a valid Ethereum address")
			}
			contractAddress = common.HexToAddress(contractAddressRaw)

			if erc1155ContractRaw == "" {
				return fmt.Errorf("--erc-1155-contract argument not specified")
			} else if !common.IsHexAddress(erc1155ContractRaw) {
				return fmt.Errorf("--erc-1155-contract argument is not a valid Ethereum address")
			}
			erc1155Contract = common.HexToAddress(erc1155ContractRaw)

			if to0Raw == "" {
				return fmt.Errorf("--to-0 argument not specified")
			} else if !common.IsHexAddress(to0Raw) {
				return fmt.Errorf("--to-0 argument is not a valid Ethereum address")
			}
			to0 = common.HexToAddress(to0Raw)

			if amountRaw == "" {
				return fmt.Errorf("--amount argument not specified")
			}
			amount = new(big.Int)
			amount.SetString(amountRaw, 0)

			if tokenIdRaw == "" {
				return fmt.Errorf("--token-id argument not specified")
			}
			tokenId = new(big.Int)
			tokenId.SetString(tokenIdRaw, 0)

			return nil
		},
		RunE: func(cmd *cobra.Command, args []string) error {
			client, clientErr := NewClient(rpc)
			if clientErr != nil {
				return clientErr
			}

			key, keyErr := KeyFromFile(keyfile, password)
			if keyErr != nil {
				return keyErr
			}

			chainIDCtx, cancelChainIDCtx := NewChainContext(timeout)
			defer cancelChainIDCtx()
			chainID, chainIDErr := client.ChainID(chainIDCtx)
			if chainIDErr != nil {
				return chainIDErr
			}

			transactionOpts, transactionOptsErr := bind.NewKeyedTransactorWithChainID(key.PrivateKey, chainID)
			if transactionOptsErr != nil {
				return transactionOptsErr
			}

			SetTransactionParametersFromArgs(transactionOpts, nonce, value, gasPrice, maxFeePerGas, maxPriorityFeePerGas, gasLimit, simulate)

			contract, contractErr := NewWrapperFunctions(contractAddress, client)
			if contractErr != nil {
				return contractErr
			}

			session := WrapperFunctionsTransactorSession{
				Contract:     &contract.WrapperFunctionsTransactor,
				TransactOpts: *transactionOpts,
			}

			transaction, transactionErr := session.Wrap1155(
				erc1155Contract,
				to0,
				amount,
				tokenId,
			)
			if transactionErr != nil {
				return transactionErr
			}

			cmd.Printf("Transaction hash: %s\n", transaction.Hash().Hex())
			if transactionOpts.NoSend {
				estimationMessage := ethereum.CallMsg{
					From: transactionOpts.From,
					To:   &contractAddress,
					Data: transaction.Data(),
				}

				gasEstimationCtx, cancelGasEstimationCtx := NewChainContext(timeout)
				defer cancelGasEstimationCtx()

				gasEstimate, gasEstimateErr := client.EstimateGas(gasEstimationCtx, estimationMessage)
				if gasEstimateErr != nil {
					return gasEstimateErr
				}

				transactionBinary, transactionBinaryErr := transaction.MarshalBinary()
				if transactionBinaryErr != nil {
					return transactionBinaryErr
				}
				transactionBinaryHex := hex.EncodeToString(transactionBinary)

				cmd.Printf("Transaction: %s\nEstimated gas: %d\n", transactionBinaryHex, gasEstimate)
			} else {
				cmd.Println("Transaction submitted")
			}

			return nil
		},
	}

	cmd.Flags().StringVar(&rpc, "rpc", "", "URL of the JSONRPC API to use")
	cmd.Flags().StringVar(&keyfile, "keyfile", "", "Path to the keystore file to use for the transaction")
	cmd.Flags().StringVar(&password, "password", "", "Password to use to unlock the keystore (if not specified, you will be prompted for the password when the command executes)")
	cmd.Flags().StringVar(&nonce, "nonce", "", "Nonce to use for the transaction")
	cmd.Flags().StringVar(&value, "value", "", "Value to send with the transaction")
	cmd.Flags().StringVar(&gasPrice, "gas-price", "", "Gas price to use for the transaction")
	cmd.Flags().StringVar(&maxFeePerGas, "max-fee-per-gas", "", "Maximum fee per gas to use for the (EIP-1559) transaction")
	cmd.Flags().StringVar(&maxPriorityFeePerGas, "max-priority-fee-per-gas", "", "Maximum priority fee per gas to use for the (EIP-1559) transaction")
	cmd.Flags().Uint64Var(&gasLimit, "gas-limit", 0, "Gas limit for the transaction")
	cmd.Flags().BoolVar(&simulate, "simulate", false, "Simulate the transaction without sending it")
	cmd.Flags().UintVar(&timeout, "timeout", 60, "Timeout (in seconds) for interactions with the JSONRPC API")
	cmd.Flags().StringVar(&contractAddressRaw, "contract", "", "Address of the contract to interact with")

	cmd.Flags().StringVar(&erc1155ContractRaw, "erc-1155-contract", "", "erc-1155-contract argument")
	cmd.Flags().StringVar(&to0Raw, "to-0", "", "to-0 argument")
	cmd.Flags().StringVar(&amountRaw, "amount", "", "amount argument")
	cmd.Flags().StringVar(&tokenIdRaw, "token-id", "", "token-id argument")

	return cmd
}

var ErrNoRPCURL error = errors.New("no RPC URL provided -- please pass an RPC URL from the command line or set the WRAPPER_FUNCTIONS_RPC_URL environment variable")

// Generates an Ethereum client to the JSONRPC API at the given URL. If rpcURL is empty, then it
// attempts to read the RPC URL from the WRAPPER_FUNCTIONS_RPC_URL environment variable. If that is empty,
// too, then it returns an error.
func NewClient(rpcURL string) (*ethclient.Client, error) {
	if rpcURL == "" {
		rpcURL = os.Getenv("WRAPPER_FUNCTIONS_RPC_URL")
	}

	if rpcURL == "" {
		return nil, ErrNoRPCURL
	}

	client, err := ethclient.Dial(rpcURL)
	return client, err
}

// Creates a new context to be used when interacting with the chain client.
func NewChainContext(timeout uint) (context.Context, context.CancelFunc) {
	baseCtx := context.Background()
	parsedTimeout := time.Duration(timeout) * time.Second
	ctx, cancel := context.WithTimeout(baseCtx, parsedTimeout)
	return ctx, cancel
}

// Unlocks a key from a keystore (byte contents of a keystore file) with the given password.
func UnlockKeystore(keystoreData []byte, password string) (*keystore.Key, error) {
	key, err := keystore.DecryptKey(keystoreData, password)
	return key, err
}

// Loads a key from file, prompting the user for the password if it is not provided as a function argument.
func KeyFromFile(keystoreFile string, password string) (*keystore.Key, error) {
	var emptyKey *keystore.Key
	keystoreContent, readErr := os.ReadFile(keystoreFile)
	if readErr != nil {
		return emptyKey, readErr
	}

	// If password is "", prompt user for password.
	if password == "" {
		fmt.Printf("Please provide a password for keystore (%s): ", keystoreFile)
		passwordRaw, inputErr := term.ReadPassword(int(os.Stdin.Fd()))
		if inputErr != nil {
			return emptyKey, fmt.Errorf("error reading password: %s", inputErr.Error())
		}
		fmt.Print("\n")
		password = string(passwordRaw)
	}

	key, err := UnlockKeystore(keystoreContent, password)
	return key, err
}

// This method is used to set the parameters on a view call from command line arguments (represented mostly as
// strings).
func SetCallParametersFromArgs(opts *bind.CallOpts, pending bool, fromAddress, blockNumber string) {
	if pending {
		opts.Pending = true
	}

	if fromAddress != "" {
		opts.From = common.HexToAddress(fromAddress)
	}

	if blockNumber != "" {
		opts.BlockNumber = new(big.Int)
		opts.BlockNumber.SetString(blockNumber, 0)
	}
}

// This method is used to set the parameters on a transaction from command line arguments (represented mostly as
// strings).
func SetTransactionParametersFromArgs(opts *bind.TransactOpts, nonce, value, gasPrice, maxFeePerGas, maxPriorityFeePerGas string, gasLimit uint64, noSend bool) {
	if nonce != "" {
		opts.Nonce = new(big.Int)
		opts.Nonce.SetString(nonce, 0)
	}

	if value != "" {
		opts.Value = new(big.Int)
		opts.Value.SetString(value, 0)
	}

	if gasPrice != "" {
		opts.GasPrice = new(big.Int)
		opts.GasPrice.SetString(gasPrice, 0)
	}

	if maxFeePerGas != "" {
		opts.GasFeeCap = new(big.Int)
		opts.GasFeeCap.SetString(maxFeePerGas, 0)
	}

	if maxPriorityFeePerGas != "" {
		opts.GasTipCap = new(big.Int)
		opts.GasTipCap.SetString(maxPriorityFeePerGas, 0)
	}

	if gasLimit != 0 {
		opts.GasLimit = gasLimit
	}

	opts.NoSend = noSend
}

func CreateWrapperFunctionsCommand() *cobra.Command {
	cmd := &cobra.Command{
		Use:   "wrapper-functions",
		Short: "Interact with the WrapperFunctions contract",
		Run: func(cmd *cobra.Command, args []string) {
			cmd.Help()
		},
	}

	cmd.SetOut(os.Stdout)

	DeployGroup := &cobra.Group{
		ID: "deploy", Title: "Commands which deploy contracts",
	}
	cmd.AddGroup(DeployGroup)
	ViewGroup := &cobra.Group{
		ID: "view", Title: "Commands which view contract state",
	}
	TransactGroup := &cobra.Group{
		ID: "transact", Title: "Commands which submit transactions",
	}
	cmd.AddGroup(ViewGroup, TransactGroup)

	cmdDeployWrapperFunctions := CreateWrapperFunctionsDeploymentCommand()
	cmdDeployWrapperFunctions.GroupID = DeployGroup.ID
	cmd.AddCommand(cmdDeployWrapperFunctions)

	cmdViewSupportsInterface := CreateSupportsInterfaceCommand()
	cmdViewSupportsInterface.GroupID = ViewGroup.ID
	cmd.AddCommand(cmdViewSupportsInterface)
	cmdViewWrapperFactory := CreateWrapperFactoryCommand()
	cmdViewWrapperFactory.GroupID = ViewGroup.ID
	cmd.AddCommand(cmdViewWrapperFactory)

	cmdTransactOnERC1155BatchReceived := CreateOnErc1155BatchReceivedCommand()
	cmdTransactOnERC1155BatchReceived.GroupID = TransactGroup.ID
	cmd.AddCommand(cmdTransactOnERC1155BatchReceived)
	cmdTransactOnERC1155Received := CreateOnErc1155ReceivedCommand()
	cmdTransactOnERC1155Received.GroupID = TransactGroup.ID
	cmd.AddCommand(cmdTransactOnERC1155Received)
	cmdTransactUnwrap1155 := CreateUnwrap1155Command()
	cmdTransactUnwrap1155.GroupID = TransactGroup.ID
	cmd.AddCommand(cmdTransactUnwrap1155)
	cmdTransactWrap1155 := CreateWrap1155Command()
	cmdTransactWrap1155.GroupID = TransactGroup.ID
	cmd.AddCommand(cmdTransactWrap1155)

	return cmd
}
