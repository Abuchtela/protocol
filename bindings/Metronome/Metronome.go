// This file was generated by seer: https://github.com/moonstream-to/seer.
// seer version: 0.1.20
// seer command: seer evm generate --package Metronome --cli --struct Metronome --output bindings/Metronome/Metronome.go
// Code generated - DO NOT EDIT.
// This file is a generated binding and any manual changes will be lost.

package Metronome

import (
	"errors"
	"math/big"
	"strings"

	"context"

	ethereum "github.com/ethereum/go-ethereum"
	"github.com/ethereum/go-ethereum/accounts/abi"
	"github.com/ethereum/go-ethereum/accounts/abi/bind"
	"github.com/ethereum/go-ethereum/common"
	"github.com/ethereum/go-ethereum/core/types"
	"github.com/ethereum/go-ethereum/event"

	// Reference imports to suppress errors if they are not otherwise used.
	"encoding/hex"
	"encoding/json"
	"fmt"
	"os"
	"time"

	"github.com/ethereum/go-ethereum/accounts/keystore"
	"github.com/ethereum/go-ethereum/ethclient"
	"github.com/spf13/cobra"
	"golang.org/x/term"
)

var (
	_ = errors.New
	_ = big.NewInt
	_ = strings.NewReader
	_ = ethereum.NotFound
	_ = bind.Bind
	_ = common.Big1
	_ = types.BloomLookup
	_ = event.NewSubscription
	_ = abi.ConvertType
)

// MetronomeMetaData contains all meta data concerning the Metronome contract.
var MetronomeMetaData = &bind.MetaData{
	ABI: "[{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"scheduleID\",\"type\":\"uint256\"}],\"name\":\"BountyAlreadyClaimedForSchedule\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InvalidSchedule\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"scheduleID\",\"type\":\"uint256\"}],\"name\":\"OffSchedule\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ReentrancyGuardReentrantCall\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"scheduleID\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"BalanceIncreased\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"scheduleID\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"forAddress\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"payment\",\"type\":\"uint256\"}],\"name\":\"BountyClaimed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"scheduleID\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"remainder\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"divisor\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"bounty\",\"type\":\"uint256\"}],\"name\":\"ScheduleCreated\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"ClaimedBounties\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"LastTick\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"NumSchedules\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"ScheduleBalances\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"Schedules\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"remainder\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"divisor\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"bounty\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"scheduleID\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"forAddress\",\"type\":\"address\"}],\"name\":\"claim\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256[]\",\"name\":\"scheduleIDs\",\"type\":\"uint256[]\"},{\"internalType\":\"address\",\"name\":\"forAddress\",\"type\":\"address\"}],\"name\":\"claimBatch\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"remainder\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"divisor\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"bounty\",\"type\":\"uint256\"}],\"name\":\"createSchedule\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"scheduleID\",\"type\":\"uint256\"}],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"scheduleID\",\"type\":\"uint256\"}],\"name\":\"increaseBalance\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"}]",
	Bin: "0x608060405234801561001057600080fd5b506001600081905550610d4a806100286000396000f3fe6080604052600436106100865760003560e01c80633e4ccb40116100595780633e4ccb40146101595780634a82fe98146101755780635294bac8146101b25780638c3f896e146101e2578063ddd5e1b21461022157610086565b806314e6424c1461008b57806318d052e3146100b65780631e2339e3146100df57806324dc3ae91461011c575b600080fd5b34801561009757600080fd5b506100a061024a565b6040516100ad91906107cb565b60405180910390f35b3480156100c257600080fd5b506100dd60048036038101906100d891906109dd565b610250565b005b3480156100eb57600080fd5b5061010660048036038101906101019190610a39565b6102a2565b6040516101139190610a94565b60405180910390f35b34801561012857600080fd5b50610143600480360381019061013e9190610aaf565b6102d1565b60405161015091906107cb565b60405180910390f35b610173600480360381019061016e9190610aaf565b6102e9565b005b34801561018157600080fd5b5061019c60048036038101906101979190610aaf565b61034e565b6040516101a991906107cb565b60405180910390f35b6101cc60048036038101906101c79190610adc565b610366565b6040516101d991906107cb565b60405180910390f35b3480156101ee57600080fd5b5061020960048036038101906102049190610aaf565b6104d9565b60405161021893929190610b2f565b60405180910390f35b34801561022d57600080fd5b5061024860048036038101906102439190610b66565b610503565b005b60045481565b610258610521565b60005b82518110156102955761028883828151811061027a57610279610ba6565b5b602002602001015183610567565b808060010191505061025b565b5061029e6107a8565b5050565b60036020528160005260406000206020528060005260406000206000915091509054906101000a900460ff1681565b60056020528060005260406000206000915090505481565b3460026000838152602001908152602001600020600082825461030c9190610c04565b92505081905550807f4547cc37be8de03db39508613822773a49bc23d17ee4230fa6ec1a0c260156b73460405161034391906107cb565b60405180910390a250565b60026020528060005260406000206000915090505481565b60008083036103a1576040517fdba16ce800000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b600082036103db576040517fdba16ce800000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b828410610414576040517fdba16ce800000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b60045490506004600081548092919061042c90610c38565b9190505550604051806060016040528085815260200184815260200183815250600160008381526020019081526020016000206000820151816000015560208201518160010155604082015181600201559050503460026000838152602001908152602001600020819055508284827fbd7880573155705535dce3194981f4b25e22063a5619ea279e73b43b34831670856040516104ca91906107cb565b60405180910390a49392505050565b60016020528060005260406000206000915090508060000154908060010154908060020154905083565b61050b610521565b6105158282610567565b61051d6107a8565b5050565b60026000540361055d576040517f3ee5aeb500000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6002600081905550565b60036000838152602001908152602001600020600043815260200190815260200160002060009054906101000a900460ff16156105db57816040517f543dd1020000000000000000000000000000000000000000000000000000000081526004016105d291906107cb565b60405180910390fd5b60016000838152602001908152602001600020600001546001600084815260200190815260200160002060010154436106149190610caf565b1461065657816040517f6ed9336800000000000000000000000000000000000000000000000000000000815260040161064d91906107cb565b60405180910390fd5b60006002600084815260200190815260200160002054905060016000848152602001908152602001600020600201548111156106a657600160008481526020019081526020016000206002015490505b806002600085815260200190815260200160002060008282546106c99190610ce0565b92505081905550600160036000858152602001908152602001600020600043815260200190815260200160002060006101000a81548160ff0219169083151502179055508173ffffffffffffffffffffffffffffffffffffffff166108fc829081150290604051600060405180830381858888f19350505050158015610753573d6000803e3d6000fd5b508173ffffffffffffffffffffffffffffffffffffffff16837f23c972d46b3251ae358ad69fb3761ef8f5c38c5131502ed9e9bde9b129da92158360405161079b91906107cb565b60405180910390a3505050565b6001600081905550565b6000819050919050565b6107c5816107b2565b82525050565b60006020820190506107e060008301846107bc565b92915050565b6000604051905090565b600080fd5b600080fd5b600080fd5b6000601f19601f8301169050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b610848826107ff565b810181811067ffffffffffffffff8211171561086757610866610810565b5b80604052505050565b600061087a6107e6565b9050610886828261083f565b919050565b600067ffffffffffffffff8211156108a6576108a5610810565b5b602082029050602081019050919050565b600080fd5b6108c5816107b2565b81146108d057600080fd5b50565b6000813590506108e2816108bc565b92915050565b60006108fb6108f68461088b565b610870565b9050808382526020820190506020840283018581111561091e5761091d6108b7565b5b835b81811015610947578061093388826108d3565b845260208401935050602081019050610920565b5050509392505050565b600082601f830112610966576109656107fa565b5b81356109768482602086016108e8565b91505092915050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b60006109aa8261097f565b9050919050565b6109ba8161099f565b81146109c557600080fd5b50565b6000813590506109d7816109b1565b92915050565b600080604083850312156109f4576109f36107f0565b5b600083013567ffffffffffffffff811115610a1257610a116107f5565b5b610a1e85828601610951565b9250506020610a2f858286016109c8565b9150509250929050565b60008060408385031215610a5057610a4f6107f0565b5b6000610a5e858286016108d3565b9250506020610a6f858286016108d3565b9150509250929050565b60008115159050919050565b610a8e81610a79565b82525050565b6000602082019050610aa96000830184610a85565b92915050565b600060208284031215610ac557610ac46107f0565b5b6000610ad3848285016108d3565b91505092915050565b600080600060608486031215610af557610af46107f0565b5b6000610b03868287016108d3565b9350506020610b14868287016108d3565b9250506040610b25868287016108d3565b9150509250925092565b6000606082019050610b4460008301866107bc565b610b5160208301856107bc565b610b5e60408301846107bc565b949350505050565b60008060408385031215610b7d57610b7c6107f0565b5b6000610b8b858286016108d3565b9250506020610b9c858286016109c8565b9150509250929050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b6000610c0f826107b2565b9150610c1a836107b2565b9250828201905080821115610c3257610c31610bd5565b5b92915050565b6000610c43826107b2565b91507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff8203610c7557610c74610bd5565b5b600182019050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b6000610cba826107b2565b9150610cc5836107b2565b925082610cd557610cd4610c80565b5b828206905092915050565b6000610ceb826107b2565b9150610cf6836107b2565b9250828203905081811115610d0e57610d0d610bd5565b5b9291505056fea2646970667358221220ab1c13dc07f0f5adf5676293b8bbb6d2be291c47de13ba82cfb0e9aa417f5a5164736f6c63430008180033",
}

// MetronomeABI is the input ABI used to generate the binding from.
// Deprecated: Use MetronomeMetaData.ABI instead.
var MetronomeABI = MetronomeMetaData.ABI

// MetronomeBin is the compiled bytecode used for deploying new contracts.
// Deprecated: Use MetronomeMetaData.Bin instead.
var MetronomeBin = MetronomeMetaData.Bin

// DeployMetronome deploys a new Ethereum contract, binding an instance of Metronome to it.
func DeployMetronome(auth *bind.TransactOpts, backend bind.ContractBackend) (common.Address, *types.Transaction, *Metronome, error) {
	parsed, err := MetronomeMetaData.GetAbi()
	if err != nil {
		return common.Address{}, nil, nil, err
	}
	if parsed == nil {
		return common.Address{}, nil, nil, errors.New("GetABI returned nil")
	}

	address, tx, contract, err := bind.DeployContract(auth, *parsed, common.FromHex(MetronomeBin), backend)
	if err != nil {
		return common.Address{}, nil, nil, err
	}
	return address, tx, &Metronome{MetronomeCaller: MetronomeCaller{contract: contract}, MetronomeTransactor: MetronomeTransactor{contract: contract}, MetronomeFilterer: MetronomeFilterer{contract: contract}}, nil
}

// Metronome is an auto generated Go binding around an Ethereum contract.
type Metronome struct {
	MetronomeCaller     // Read-only binding to the contract
	MetronomeTransactor // Write-only binding to the contract
	MetronomeFilterer   // Log filterer for contract events
}

// MetronomeCaller is an auto generated read-only Go binding around an Ethereum contract.
type MetronomeCaller struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// MetronomeTransactor is an auto generated write-only Go binding around an Ethereum contract.
type MetronomeTransactor struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// MetronomeFilterer is an auto generated log filtering Go binding around an Ethereum contract events.
type MetronomeFilterer struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// MetronomeSession is an auto generated Go binding around an Ethereum contract,
// with pre-set call and transact options.
type MetronomeSession struct {
	Contract     *Metronome        // Generic contract binding to set the session for
	CallOpts     bind.CallOpts     // Call options to use throughout this session
	TransactOpts bind.TransactOpts // Transaction auth options to use throughout this session
}

// MetronomeCallerSession is an auto generated read-only Go binding around an Ethereum contract,
// with pre-set call options.
type MetronomeCallerSession struct {
	Contract *MetronomeCaller // Generic contract caller binding to set the session for
	CallOpts bind.CallOpts    // Call options to use throughout this session
}

// MetronomeTransactorSession is an auto generated write-only Go binding around an Ethereum contract,
// with pre-set transact options.
type MetronomeTransactorSession struct {
	Contract     *MetronomeTransactor // Generic contract transactor binding to set the session for
	TransactOpts bind.TransactOpts    // Transaction auth options to use throughout this session
}

// MetronomeRaw is an auto generated low-level Go binding around an Ethereum contract.
type MetronomeRaw struct {
	Contract *Metronome // Generic contract binding to access the raw methods on
}

// MetronomeCallerRaw is an auto generated low-level read-only Go binding around an Ethereum contract.
type MetronomeCallerRaw struct {
	Contract *MetronomeCaller // Generic read-only contract binding to access the raw methods on
}

// MetronomeTransactorRaw is an auto generated low-level write-only Go binding around an Ethereum contract.
type MetronomeTransactorRaw struct {
	Contract *MetronomeTransactor // Generic write-only contract binding to access the raw methods on
}

// NewMetronome creates a new instance of Metronome, bound to a specific deployed contract.
func NewMetronome(address common.Address, backend bind.ContractBackend) (*Metronome, error) {
	contract, err := bindMetronome(address, backend, backend, backend)
	if err != nil {
		return nil, err
	}
	return &Metronome{MetronomeCaller: MetronomeCaller{contract: contract}, MetronomeTransactor: MetronomeTransactor{contract: contract}, MetronomeFilterer: MetronomeFilterer{contract: contract}}, nil
}

// NewMetronomeCaller creates a new read-only instance of Metronome, bound to a specific deployed contract.
func NewMetronomeCaller(address common.Address, caller bind.ContractCaller) (*MetronomeCaller, error) {
	contract, err := bindMetronome(address, caller, nil, nil)
	if err != nil {
		return nil, err
	}
	return &MetronomeCaller{contract: contract}, nil
}

// NewMetronomeTransactor creates a new write-only instance of Metronome, bound to a specific deployed contract.
func NewMetronomeTransactor(address common.Address, transactor bind.ContractTransactor) (*MetronomeTransactor, error) {
	contract, err := bindMetronome(address, nil, transactor, nil)
	if err != nil {
		return nil, err
	}
	return &MetronomeTransactor{contract: contract}, nil
}

// NewMetronomeFilterer creates a new log filterer instance of Metronome, bound to a specific deployed contract.
func NewMetronomeFilterer(address common.Address, filterer bind.ContractFilterer) (*MetronomeFilterer, error) {
	contract, err := bindMetronome(address, nil, nil, filterer)
	if err != nil {
		return nil, err
	}
	return &MetronomeFilterer{contract: contract}, nil
}

// bindMetronome binds a generic wrapper to an already deployed contract.
func bindMetronome(address common.Address, caller bind.ContractCaller, transactor bind.ContractTransactor, filterer bind.ContractFilterer) (*bind.BoundContract, error) {
	parsed, err := MetronomeMetaData.GetAbi()
	if err != nil {
		return nil, err
	}
	return bind.NewBoundContract(address, *parsed, caller, transactor, filterer), nil
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_Metronome *MetronomeRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _Metronome.Contract.MetronomeCaller.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_Metronome *MetronomeRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _Metronome.Contract.MetronomeTransactor.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_Metronome *MetronomeRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _Metronome.Contract.MetronomeTransactor.contract.Transact(opts, method, params...)
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_Metronome *MetronomeCallerRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _Metronome.Contract.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_Metronome *MetronomeTransactorRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _Metronome.Contract.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_Metronome *MetronomeTransactorRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _Metronome.Contract.contract.Transact(opts, method, params...)
}

// ClaimedBounties is a free data retrieval call binding the contract method 0x1e2339e3.
//
// Solidity: function ClaimedBounties(uint256 , uint256 ) view returns(bool)
func (_Metronome *MetronomeCaller) ClaimedBounties(opts *bind.CallOpts, arg0 *big.Int, arg1 *big.Int) (bool, error) {
	var out []interface{}
	err := _Metronome.contract.Call(opts, &out, "ClaimedBounties", arg0, arg1)

	if err != nil {
		return *new(bool), err
	}

	out0 := *abi.ConvertType(out[0], new(bool)).(*bool)

	return out0, err

}

// ClaimedBounties is a free data retrieval call binding the contract method 0x1e2339e3.
//
// Solidity: function ClaimedBounties(uint256 , uint256 ) view returns(bool)
func (_Metronome *MetronomeSession) ClaimedBounties(arg0 *big.Int, arg1 *big.Int) (bool, error) {
	return _Metronome.Contract.ClaimedBounties(&_Metronome.CallOpts, arg0, arg1)
}

// ClaimedBounties is a free data retrieval call binding the contract method 0x1e2339e3.
//
// Solidity: function ClaimedBounties(uint256 , uint256 ) view returns(bool)
func (_Metronome *MetronomeCallerSession) ClaimedBounties(arg0 *big.Int, arg1 *big.Int) (bool, error) {
	return _Metronome.Contract.ClaimedBounties(&_Metronome.CallOpts, arg0, arg1)
}

// LastTick is a free data retrieval call binding the contract method 0x24dc3ae9.
//
// Solidity: function LastTick(uint256 ) view returns(uint256)
func (_Metronome *MetronomeCaller) LastTick(opts *bind.CallOpts, arg0 *big.Int) (*big.Int, error) {
	var out []interface{}
	err := _Metronome.contract.Call(opts, &out, "LastTick", arg0)

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// LastTick is a free data retrieval call binding the contract method 0x24dc3ae9.
//
// Solidity: function LastTick(uint256 ) view returns(uint256)
func (_Metronome *MetronomeSession) LastTick(arg0 *big.Int) (*big.Int, error) {
	return _Metronome.Contract.LastTick(&_Metronome.CallOpts, arg0)
}

// LastTick is a free data retrieval call binding the contract method 0x24dc3ae9.
//
// Solidity: function LastTick(uint256 ) view returns(uint256)
func (_Metronome *MetronomeCallerSession) LastTick(arg0 *big.Int) (*big.Int, error) {
	return _Metronome.Contract.LastTick(&_Metronome.CallOpts, arg0)
}

// NumSchedules is a free data retrieval call binding the contract method 0x14e6424c.
//
// Solidity: function NumSchedules() view returns(uint256)
func (_Metronome *MetronomeCaller) NumSchedules(opts *bind.CallOpts) (*big.Int, error) {
	var out []interface{}
	err := _Metronome.contract.Call(opts, &out, "NumSchedules")

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// NumSchedules is a free data retrieval call binding the contract method 0x14e6424c.
//
// Solidity: function NumSchedules() view returns(uint256)
func (_Metronome *MetronomeSession) NumSchedules() (*big.Int, error) {
	return _Metronome.Contract.NumSchedules(&_Metronome.CallOpts)
}

// NumSchedules is a free data retrieval call binding the contract method 0x14e6424c.
//
// Solidity: function NumSchedules() view returns(uint256)
func (_Metronome *MetronomeCallerSession) NumSchedules() (*big.Int, error) {
	return _Metronome.Contract.NumSchedules(&_Metronome.CallOpts)
}

// ScheduleBalances is a free data retrieval call binding the contract method 0x4a82fe98.
//
// Solidity: function ScheduleBalances(uint256 ) view returns(uint256)
func (_Metronome *MetronomeCaller) ScheduleBalances(opts *bind.CallOpts, arg0 *big.Int) (*big.Int, error) {
	var out []interface{}
	err := _Metronome.contract.Call(opts, &out, "ScheduleBalances", arg0)

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// ScheduleBalances is a free data retrieval call binding the contract method 0x4a82fe98.
//
// Solidity: function ScheduleBalances(uint256 ) view returns(uint256)
func (_Metronome *MetronomeSession) ScheduleBalances(arg0 *big.Int) (*big.Int, error) {
	return _Metronome.Contract.ScheduleBalances(&_Metronome.CallOpts, arg0)
}

// ScheduleBalances is a free data retrieval call binding the contract method 0x4a82fe98.
//
// Solidity: function ScheduleBalances(uint256 ) view returns(uint256)
func (_Metronome *MetronomeCallerSession) ScheduleBalances(arg0 *big.Int) (*big.Int, error) {
	return _Metronome.Contract.ScheduleBalances(&_Metronome.CallOpts, arg0)
}

// Schedules is a free data retrieval call binding the contract method 0x8c3f896e.
//
// Solidity: function Schedules(uint256 ) view returns(uint256 remainder, uint256 divisor, uint256 bounty)
func (_Metronome *MetronomeCaller) Schedules(opts *bind.CallOpts, arg0 *big.Int) (struct {
	Remainder *big.Int
	Divisor   *big.Int
	Bounty    *big.Int
}, error) {
	var out []interface{}
	err := _Metronome.contract.Call(opts, &out, "Schedules", arg0)

	outstruct := new(struct {
		Remainder *big.Int
		Divisor   *big.Int
		Bounty    *big.Int
	})
	if err != nil {
		return *outstruct, err
	}

	outstruct.Remainder = *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)
	outstruct.Divisor = *abi.ConvertType(out[1], new(*big.Int)).(**big.Int)
	outstruct.Bounty = *abi.ConvertType(out[2], new(*big.Int)).(**big.Int)

	return *outstruct, err

}

// Schedules is a free data retrieval call binding the contract method 0x8c3f896e.
//
// Solidity: function Schedules(uint256 ) view returns(uint256 remainder, uint256 divisor, uint256 bounty)
func (_Metronome *MetronomeSession) Schedules(arg0 *big.Int) (struct {
	Remainder *big.Int
	Divisor   *big.Int
	Bounty    *big.Int
}, error) {
	return _Metronome.Contract.Schedules(&_Metronome.CallOpts, arg0)
}

// Schedules is a free data retrieval call binding the contract method 0x8c3f896e.
//
// Solidity: function Schedules(uint256 ) view returns(uint256 remainder, uint256 divisor, uint256 bounty)
func (_Metronome *MetronomeCallerSession) Schedules(arg0 *big.Int) (struct {
	Remainder *big.Int
	Divisor   *big.Int
	Bounty    *big.Int
}, error) {
	return _Metronome.Contract.Schedules(&_Metronome.CallOpts, arg0)
}

// Claim is a paid mutator transaction binding the contract method 0xddd5e1b2.
//
// Solidity: function claim(uint256 scheduleID, address forAddress) returns()
func (_Metronome *MetronomeTransactor) Claim(opts *bind.TransactOpts, scheduleID *big.Int, forAddress common.Address) (*types.Transaction, error) {
	return _Metronome.contract.Transact(opts, "claim", scheduleID, forAddress)
}

// Claim is a paid mutator transaction binding the contract method 0xddd5e1b2.
//
// Solidity: function claim(uint256 scheduleID, address forAddress) returns()
func (_Metronome *MetronomeSession) Claim(scheduleID *big.Int, forAddress common.Address) (*types.Transaction, error) {
	return _Metronome.Contract.Claim(&_Metronome.TransactOpts, scheduleID, forAddress)
}

// Claim is a paid mutator transaction binding the contract method 0xddd5e1b2.
//
// Solidity: function claim(uint256 scheduleID, address forAddress) returns()
func (_Metronome *MetronomeTransactorSession) Claim(scheduleID *big.Int, forAddress common.Address) (*types.Transaction, error) {
	return _Metronome.Contract.Claim(&_Metronome.TransactOpts, scheduleID, forAddress)
}

// ClaimBatch is a paid mutator transaction binding the contract method 0x18d052e3.
//
// Solidity: function claimBatch(uint256[] scheduleIDs, address forAddress) returns()
func (_Metronome *MetronomeTransactor) ClaimBatch(opts *bind.TransactOpts, scheduleIDs []*big.Int, forAddress common.Address) (*types.Transaction, error) {
	return _Metronome.contract.Transact(opts, "claimBatch", scheduleIDs, forAddress)
}

// ClaimBatch is a paid mutator transaction binding the contract method 0x18d052e3.
//
// Solidity: function claimBatch(uint256[] scheduleIDs, address forAddress) returns()
func (_Metronome *MetronomeSession) ClaimBatch(scheduleIDs []*big.Int, forAddress common.Address) (*types.Transaction, error) {
	return _Metronome.Contract.ClaimBatch(&_Metronome.TransactOpts, scheduleIDs, forAddress)
}

// ClaimBatch is a paid mutator transaction binding the contract method 0x18d052e3.
//
// Solidity: function claimBatch(uint256[] scheduleIDs, address forAddress) returns()
func (_Metronome *MetronomeTransactorSession) ClaimBatch(scheduleIDs []*big.Int, forAddress common.Address) (*types.Transaction, error) {
	return _Metronome.Contract.ClaimBatch(&_Metronome.TransactOpts, scheduleIDs, forAddress)
}

// CreateSchedule is a paid mutator transaction binding the contract method 0x5294bac8.
//
// Solidity: function createSchedule(uint256 remainder, uint256 divisor, uint256 bounty) payable returns(uint256 scheduleID)
func (_Metronome *MetronomeTransactor) CreateSchedule(opts *bind.TransactOpts, remainder *big.Int, divisor *big.Int, bounty *big.Int) (*types.Transaction, error) {
	return _Metronome.contract.Transact(opts, "createSchedule", remainder, divisor, bounty)
}

// CreateSchedule is a paid mutator transaction binding the contract method 0x5294bac8.
//
// Solidity: function createSchedule(uint256 remainder, uint256 divisor, uint256 bounty) payable returns(uint256 scheduleID)
func (_Metronome *MetronomeSession) CreateSchedule(remainder *big.Int, divisor *big.Int, bounty *big.Int) (*types.Transaction, error) {
	return _Metronome.Contract.CreateSchedule(&_Metronome.TransactOpts, remainder, divisor, bounty)
}

// CreateSchedule is a paid mutator transaction binding the contract method 0x5294bac8.
//
// Solidity: function createSchedule(uint256 remainder, uint256 divisor, uint256 bounty) payable returns(uint256 scheduleID)
func (_Metronome *MetronomeTransactorSession) CreateSchedule(remainder *big.Int, divisor *big.Int, bounty *big.Int) (*types.Transaction, error) {
	return _Metronome.Contract.CreateSchedule(&_Metronome.TransactOpts, remainder, divisor, bounty)
}

// IncreaseBalance is a paid mutator transaction binding the contract method 0x3e4ccb40.
//
// Solidity: function increaseBalance(uint256 scheduleID) payable returns()
func (_Metronome *MetronomeTransactor) IncreaseBalance(opts *bind.TransactOpts, scheduleID *big.Int) (*types.Transaction, error) {
	return _Metronome.contract.Transact(opts, "increaseBalance", scheduleID)
}

// IncreaseBalance is a paid mutator transaction binding the contract method 0x3e4ccb40.
//
// Solidity: function increaseBalance(uint256 scheduleID) payable returns()
func (_Metronome *MetronomeSession) IncreaseBalance(scheduleID *big.Int) (*types.Transaction, error) {
	return _Metronome.Contract.IncreaseBalance(&_Metronome.TransactOpts, scheduleID)
}

// IncreaseBalance is a paid mutator transaction binding the contract method 0x3e4ccb40.
//
// Solidity: function increaseBalance(uint256 scheduleID) payable returns()
func (_Metronome *MetronomeTransactorSession) IncreaseBalance(scheduleID *big.Int) (*types.Transaction, error) {
	return _Metronome.Contract.IncreaseBalance(&_Metronome.TransactOpts, scheduleID)
}

// MetronomeBalanceIncreasedIterator is returned from FilterBalanceIncreased and is used to iterate over the raw logs and unpacked data for BalanceIncreased events raised by the Metronome contract.
type MetronomeBalanceIncreasedIterator struct {
	Event *MetronomeBalanceIncreased // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *MetronomeBalanceIncreasedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(MetronomeBalanceIncreased)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(MetronomeBalanceIncreased)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *MetronomeBalanceIncreasedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *MetronomeBalanceIncreasedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// MetronomeBalanceIncreased represents a BalanceIncreased event raised by the Metronome contract.
type MetronomeBalanceIncreased struct {
	ScheduleID *big.Int
	Amount     *big.Int
	Raw        types.Log // Blockchain specific contextual infos
}

// FilterBalanceIncreased is a free log retrieval operation binding the contract event 0x4547cc37be8de03db39508613822773a49bc23d17ee4230fa6ec1a0c260156b7.
//
// Solidity: event BalanceIncreased(uint256 indexed scheduleID, uint256 amount)
func (_Metronome *MetronomeFilterer) FilterBalanceIncreased(opts *bind.FilterOpts, scheduleID []*big.Int) (*MetronomeBalanceIncreasedIterator, error) {

	var scheduleIDRule []interface{}
	for _, scheduleIDItem := range scheduleID {
		scheduleIDRule = append(scheduleIDRule, scheduleIDItem)
	}

	logs, sub, err := _Metronome.contract.FilterLogs(opts, "BalanceIncreased", scheduleIDRule)
	if err != nil {
		return nil, err
	}
	return &MetronomeBalanceIncreasedIterator{contract: _Metronome.contract, event: "BalanceIncreased", logs: logs, sub: sub}, nil
}

// WatchBalanceIncreased is a free log subscription operation binding the contract event 0x4547cc37be8de03db39508613822773a49bc23d17ee4230fa6ec1a0c260156b7.
//
// Solidity: event BalanceIncreased(uint256 indexed scheduleID, uint256 amount)
func (_Metronome *MetronomeFilterer) WatchBalanceIncreased(opts *bind.WatchOpts, sink chan<- *MetronomeBalanceIncreased, scheduleID []*big.Int) (event.Subscription, error) {

	var scheduleIDRule []interface{}
	for _, scheduleIDItem := range scheduleID {
		scheduleIDRule = append(scheduleIDRule, scheduleIDItem)
	}

	logs, sub, err := _Metronome.contract.WatchLogs(opts, "BalanceIncreased", scheduleIDRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(MetronomeBalanceIncreased)
				if err := _Metronome.contract.UnpackLog(event, "BalanceIncreased", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseBalanceIncreased is a log parse operation binding the contract event 0x4547cc37be8de03db39508613822773a49bc23d17ee4230fa6ec1a0c260156b7.
//
// Solidity: event BalanceIncreased(uint256 indexed scheduleID, uint256 amount)
func (_Metronome *MetronomeFilterer) ParseBalanceIncreased(log types.Log) (*MetronomeBalanceIncreased, error) {
	event := new(MetronomeBalanceIncreased)
	if err := _Metronome.contract.UnpackLog(event, "BalanceIncreased", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// MetronomeBountyClaimedIterator is returned from FilterBountyClaimed and is used to iterate over the raw logs and unpacked data for BountyClaimed events raised by the Metronome contract.
type MetronomeBountyClaimedIterator struct {
	Event *MetronomeBountyClaimed // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *MetronomeBountyClaimedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(MetronomeBountyClaimed)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(MetronomeBountyClaimed)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *MetronomeBountyClaimedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *MetronomeBountyClaimedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// MetronomeBountyClaimed represents a BountyClaimed event raised by the Metronome contract.
type MetronomeBountyClaimed struct {
	ScheduleID *big.Int
	ForAddress common.Address
	Payment    *big.Int
	Raw        types.Log // Blockchain specific contextual infos
}

// FilterBountyClaimed is a free log retrieval operation binding the contract event 0x23c972d46b3251ae358ad69fb3761ef8f5c38c5131502ed9e9bde9b129da9215.
//
// Solidity: event BountyClaimed(uint256 indexed scheduleID, address indexed forAddress, uint256 payment)
func (_Metronome *MetronomeFilterer) FilterBountyClaimed(opts *bind.FilterOpts, scheduleID []*big.Int, forAddress []common.Address) (*MetronomeBountyClaimedIterator, error) {

	var scheduleIDRule []interface{}
	for _, scheduleIDItem := range scheduleID {
		scheduleIDRule = append(scheduleIDRule, scheduleIDItem)
	}
	var forAddressRule []interface{}
	for _, forAddressItem := range forAddress {
		forAddressRule = append(forAddressRule, forAddressItem)
	}

	logs, sub, err := _Metronome.contract.FilterLogs(opts, "BountyClaimed", scheduleIDRule, forAddressRule)
	if err != nil {
		return nil, err
	}
	return &MetronomeBountyClaimedIterator{contract: _Metronome.contract, event: "BountyClaimed", logs: logs, sub: sub}, nil
}

// WatchBountyClaimed is a free log subscription operation binding the contract event 0x23c972d46b3251ae358ad69fb3761ef8f5c38c5131502ed9e9bde9b129da9215.
//
// Solidity: event BountyClaimed(uint256 indexed scheduleID, address indexed forAddress, uint256 payment)
func (_Metronome *MetronomeFilterer) WatchBountyClaimed(opts *bind.WatchOpts, sink chan<- *MetronomeBountyClaimed, scheduleID []*big.Int, forAddress []common.Address) (event.Subscription, error) {

	var scheduleIDRule []interface{}
	for _, scheduleIDItem := range scheduleID {
		scheduleIDRule = append(scheduleIDRule, scheduleIDItem)
	}
	var forAddressRule []interface{}
	for _, forAddressItem := range forAddress {
		forAddressRule = append(forAddressRule, forAddressItem)
	}

	logs, sub, err := _Metronome.contract.WatchLogs(opts, "BountyClaimed", scheduleIDRule, forAddressRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(MetronomeBountyClaimed)
				if err := _Metronome.contract.UnpackLog(event, "BountyClaimed", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseBountyClaimed is a log parse operation binding the contract event 0x23c972d46b3251ae358ad69fb3761ef8f5c38c5131502ed9e9bde9b129da9215.
//
// Solidity: event BountyClaimed(uint256 indexed scheduleID, address indexed forAddress, uint256 payment)
func (_Metronome *MetronomeFilterer) ParseBountyClaimed(log types.Log) (*MetronomeBountyClaimed, error) {
	event := new(MetronomeBountyClaimed)
	if err := _Metronome.contract.UnpackLog(event, "BountyClaimed", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// MetronomeScheduleCreatedIterator is returned from FilterScheduleCreated and is used to iterate over the raw logs and unpacked data for ScheduleCreated events raised by the Metronome contract.
type MetronomeScheduleCreatedIterator struct {
	Event *MetronomeScheduleCreated // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *MetronomeScheduleCreatedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(MetronomeScheduleCreated)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(MetronomeScheduleCreated)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *MetronomeScheduleCreatedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *MetronomeScheduleCreatedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// MetronomeScheduleCreated represents a ScheduleCreated event raised by the Metronome contract.
type MetronomeScheduleCreated struct {
	ScheduleID *big.Int
	Remainder  *big.Int
	Divisor    *big.Int
	Bounty     *big.Int
	Raw        types.Log // Blockchain specific contextual infos
}

// FilterScheduleCreated is a free log retrieval operation binding the contract event 0xbd7880573155705535dce3194981f4b25e22063a5619ea279e73b43b34831670.
//
// Solidity: event ScheduleCreated(uint256 indexed scheduleID, uint256 indexed remainder, uint256 indexed divisor, uint256 bounty)
func (_Metronome *MetronomeFilterer) FilterScheduleCreated(opts *bind.FilterOpts, scheduleID []*big.Int, remainder []*big.Int, divisor []*big.Int) (*MetronomeScheduleCreatedIterator, error) {

	var scheduleIDRule []interface{}
	for _, scheduleIDItem := range scheduleID {
		scheduleIDRule = append(scheduleIDRule, scheduleIDItem)
	}
	var remainderRule []interface{}
	for _, remainderItem := range remainder {
		remainderRule = append(remainderRule, remainderItem)
	}
	var divisorRule []interface{}
	for _, divisorItem := range divisor {
		divisorRule = append(divisorRule, divisorItem)
	}

	logs, sub, err := _Metronome.contract.FilterLogs(opts, "ScheduleCreated", scheduleIDRule, remainderRule, divisorRule)
	if err != nil {
		return nil, err
	}
	return &MetronomeScheduleCreatedIterator{contract: _Metronome.contract, event: "ScheduleCreated", logs: logs, sub: sub}, nil
}

// WatchScheduleCreated is a free log subscription operation binding the contract event 0xbd7880573155705535dce3194981f4b25e22063a5619ea279e73b43b34831670.
//
// Solidity: event ScheduleCreated(uint256 indexed scheduleID, uint256 indexed remainder, uint256 indexed divisor, uint256 bounty)
func (_Metronome *MetronomeFilterer) WatchScheduleCreated(opts *bind.WatchOpts, sink chan<- *MetronomeScheduleCreated, scheduleID []*big.Int, remainder []*big.Int, divisor []*big.Int) (event.Subscription, error) {

	var scheduleIDRule []interface{}
	for _, scheduleIDItem := range scheduleID {
		scheduleIDRule = append(scheduleIDRule, scheduleIDItem)
	}
	var remainderRule []interface{}
	for _, remainderItem := range remainder {
		remainderRule = append(remainderRule, remainderItem)
	}
	var divisorRule []interface{}
	for _, divisorItem := range divisor {
		divisorRule = append(divisorRule, divisorItem)
	}

	logs, sub, err := _Metronome.contract.WatchLogs(opts, "ScheduleCreated", scheduleIDRule, remainderRule, divisorRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(MetronomeScheduleCreated)
				if err := _Metronome.contract.UnpackLog(event, "ScheduleCreated", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseScheduleCreated is a log parse operation binding the contract event 0xbd7880573155705535dce3194981f4b25e22063a5619ea279e73b43b34831670.
//
// Solidity: event ScheduleCreated(uint256 indexed scheduleID, uint256 indexed remainder, uint256 indexed divisor, uint256 bounty)
func (_Metronome *MetronomeFilterer) ParseScheduleCreated(log types.Log) (*MetronomeScheduleCreated, error) {
	event := new(MetronomeScheduleCreated)
	if err := _Metronome.contract.UnpackLog(event, "ScheduleCreated", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

func CreateMetronomeDeploymentCommand() *cobra.Command {
	var keyfile, nonce, password, value, gasPrice, maxFeePerGas, maxPriorityFeePerGas, rpc string
	var gasLimit uint64
	var simulate bool
	var timeout uint

	cmd := &cobra.Command{
		Use:   "deploy",
		Short: "Deploy a new Metronome contract",
		PreRunE: func(cmd *cobra.Command, args []string) error {
			if keyfile == "" {
				return fmt.Errorf("--keystore not specified (this should be a path to an Ethereum account keystore file)")
			}

			return nil
		},
		RunE: func(cmd *cobra.Command, args []string) error {
			client, clientErr := NewClient(rpc)
			if clientErr != nil {
				return clientErr
			}

			key, keyErr := KeyFromFile(keyfile, password)
			if keyErr != nil {
				return keyErr
			}

			chainIDCtx, cancelChainIDCtx := NewChainContext(timeout)
			defer cancelChainIDCtx()
			chainID, chainIDErr := client.ChainID(chainIDCtx)
			if chainIDErr != nil {
				return chainIDErr
			}

			transactionOpts, transactionOptsErr := bind.NewKeyedTransactorWithChainID(key.PrivateKey, chainID)
			if transactionOptsErr != nil {
				return transactionOptsErr
			}

			SetTransactionParametersFromArgs(transactionOpts, nonce, value, gasPrice, maxFeePerGas, maxPriorityFeePerGas, gasLimit, simulate)

			address, deploymentTransaction, _, deploymentErr := DeployMetronome(
				transactionOpts,
				client,
			)
			if deploymentErr != nil {
				return deploymentErr
			}

			cmd.Printf("Transaction hash: %s\nContract address: %s\n", deploymentTransaction.Hash().Hex(), address.Hex())
			if transactionOpts.NoSend {
				estimationMessage := ethereum.CallMsg{
					From: transactionOpts.From,
					Data: deploymentTransaction.Data(),
				}

				gasEstimationCtx, cancelGasEstimationCtx := NewChainContext(timeout)
				defer cancelGasEstimationCtx()

				gasEstimate, gasEstimateErr := client.EstimateGas(gasEstimationCtx, estimationMessage)
				if gasEstimateErr != nil {
					return gasEstimateErr
				}

				transactionBinary, transactionBinaryErr := deploymentTransaction.MarshalBinary()
				if transactionBinaryErr != nil {
					return transactionBinaryErr
				}
				transactionBinaryHex := hex.EncodeToString(transactionBinary)

				cmd.Printf("Transaction: %s\nEstimated gas: %d\n", transactionBinaryHex, gasEstimate)
			} else {
				cmd.Println("Transaction submitted")
			}

			return nil
		},
	}

	cmd.Flags().StringVar(&rpc, "rpc", "", "URL of the JSONRPC API to use")
	cmd.Flags().StringVar(&keyfile, "keyfile", "", "Path to the keystore file to use for the transaction")
	cmd.Flags().StringVar(&password, "password", "", "Password to use to unlock the keystore (if not specified, you will be prompted for the password when the command executes)")
	cmd.Flags().StringVar(&nonce, "nonce", "", "Nonce to use for the transaction")
	cmd.Flags().StringVar(&value, "value", "", "Value to send with the transaction")
	cmd.Flags().StringVar(&gasPrice, "gas-price", "", "Gas price to use for the transaction")
	cmd.Flags().StringVar(&maxFeePerGas, "max-fee-per-gas", "", "Maximum fee per gas to use for the (EIP-1559) transaction")
	cmd.Flags().StringVar(&maxPriorityFeePerGas, "max-priority-fee-per-gas", "", "Maximum priority fee per gas to use for the (EIP-1559) transaction")
	cmd.Flags().Uint64Var(&gasLimit, "gas-limit", 0, "Gas limit for the transaction")
	cmd.Flags().BoolVar(&simulate, "simulate", false, "Simulate the transaction without sending it")
	cmd.Flags().UintVar(&timeout, "timeout", 60, "Timeout (in seconds) for interactions with the JSONRPC API")

	return cmd
}

func CreateClaimedBountiesCommand() *cobra.Command {
	var contractAddressRaw, rpc string
	var contractAddress common.Address
	var timeout uint

	var blockNumberRaw, fromAddressRaw string
	var pending bool

	var arg0 *big.Int
	var arg0Raw string
	var arg1 *big.Int
	var arg1Raw string

	var capture0 bool

	cmd := &cobra.Command{
		Use:   "claimed-bounties",
		Short: "Call the ClaimedBounties view method on a Metronome contract",
		PreRunE: func(cmd *cobra.Command, args []string) error {
			if contractAddressRaw == "" {
				return fmt.Errorf("--contract not specified")
			} else if !common.IsHexAddress(contractAddressRaw) {
				return fmt.Errorf("--contract is not a valid Ethereum address")
			}
			contractAddress = common.HexToAddress(contractAddressRaw)

			if arg0Raw == "" {
				return fmt.Errorf("--arg-0 argument not specified")
			}
			arg0 = new(big.Int)
			arg0.SetString(arg0Raw, 0)

			if arg1Raw == "" {
				return fmt.Errorf("--arg-1 argument not specified")
			}
			arg1 = new(big.Int)
			arg1.SetString(arg1Raw, 0)

			return nil
		},
		RunE: func(cmd *cobra.Command, args []string) error {
			client, clientErr := NewClient(rpc)
			if clientErr != nil {
				return clientErr
			}

			contract, contractErr := NewMetronome(contractAddress, client)
			if contractErr != nil {
				return contractErr
			}

			callOpts := bind.CallOpts{}
			SetCallParametersFromArgs(&callOpts, pending, fromAddressRaw, blockNumberRaw)

			session := MetronomeCallerSession{
				Contract: &contract.MetronomeCaller,
				CallOpts: callOpts,
			}

			var callErr error
			capture0, callErr = session.ClaimedBounties(
				arg0,
				arg1,
			)
			if callErr != nil {
				return callErr
			}

			cmd.Printf("0: %t\n", capture0)

			return nil
		},
	}

	cmd.Flags().StringVar(&rpc, "rpc", "", "URL of the JSONRPC API to use")
	cmd.Flags().StringVar(&blockNumberRaw, "block", "", "Block number at which to call the view method")
	cmd.Flags().BoolVar(&pending, "pending", false, "Set this flag if it's ok to call the view method against pending state")
	cmd.Flags().UintVar(&timeout, "timeout", 60, "Timeout (in seconds) for interactions with the JSONRPC API")
	cmd.Flags().StringVar(&contractAddressRaw, "contract", "", "Address of the contract to interact with")
	cmd.Flags().StringVar(&fromAddressRaw, "from", "", "Optional address for caller of the view method")

	cmd.Flags().StringVar(&arg0Raw, "arg-0", "", "arg-0 argument")
	cmd.Flags().StringVar(&arg1Raw, "arg-1", "", "arg-1 argument")

	return cmd
}
func CreateLastTickCommand() *cobra.Command {
	var contractAddressRaw, rpc string
	var contractAddress common.Address
	var timeout uint

	var blockNumberRaw, fromAddressRaw string
	var pending bool

	var arg0 *big.Int
	var arg0Raw string

	var capture0 *big.Int

	cmd := &cobra.Command{
		Use:   "last-tick",
		Short: "Call the LastTick view method on a Metronome contract",
		PreRunE: func(cmd *cobra.Command, args []string) error {
			if contractAddressRaw == "" {
				return fmt.Errorf("--contract not specified")
			} else if !common.IsHexAddress(contractAddressRaw) {
				return fmt.Errorf("--contract is not a valid Ethereum address")
			}
			contractAddress = common.HexToAddress(contractAddressRaw)

			if arg0Raw == "" {
				return fmt.Errorf("--arg-0 argument not specified")
			}
			arg0 = new(big.Int)
			arg0.SetString(arg0Raw, 0)

			return nil
		},
		RunE: func(cmd *cobra.Command, args []string) error {
			client, clientErr := NewClient(rpc)
			if clientErr != nil {
				return clientErr
			}

			contract, contractErr := NewMetronome(contractAddress, client)
			if contractErr != nil {
				return contractErr
			}

			callOpts := bind.CallOpts{}
			SetCallParametersFromArgs(&callOpts, pending, fromAddressRaw, blockNumberRaw)

			session := MetronomeCallerSession{
				Contract: &contract.MetronomeCaller,
				CallOpts: callOpts,
			}

			var callErr error
			capture0, callErr = session.LastTick(
				arg0,
			)
			if callErr != nil {
				return callErr
			}

			cmd.Printf("0: %s\n", capture0.String())

			return nil
		},
	}

	cmd.Flags().StringVar(&rpc, "rpc", "", "URL of the JSONRPC API to use")
	cmd.Flags().StringVar(&blockNumberRaw, "block", "", "Block number at which to call the view method")
	cmd.Flags().BoolVar(&pending, "pending", false, "Set this flag if it's ok to call the view method against pending state")
	cmd.Flags().UintVar(&timeout, "timeout", 60, "Timeout (in seconds) for interactions with the JSONRPC API")
	cmd.Flags().StringVar(&contractAddressRaw, "contract", "", "Address of the contract to interact with")
	cmd.Flags().StringVar(&fromAddressRaw, "from", "", "Optional address for caller of the view method")

	cmd.Flags().StringVar(&arg0Raw, "arg-0", "", "arg-0 argument")

	return cmd
}
func CreateNumSchedulesCommand() *cobra.Command {
	var contractAddressRaw, rpc string
	var contractAddress common.Address
	var timeout uint

	var blockNumberRaw, fromAddressRaw string
	var pending bool

	var capture0 *big.Int

	cmd := &cobra.Command{
		Use:   "num-schedules",
		Short: "Call the NumSchedules view method on a Metronome contract",
		PreRunE: func(cmd *cobra.Command, args []string) error {
			if contractAddressRaw == "" {
				return fmt.Errorf("--contract not specified")
			} else if !common.IsHexAddress(contractAddressRaw) {
				return fmt.Errorf("--contract is not a valid Ethereum address")
			}
			contractAddress = common.HexToAddress(contractAddressRaw)

			return nil
		},
		RunE: func(cmd *cobra.Command, args []string) error {
			client, clientErr := NewClient(rpc)
			if clientErr != nil {
				return clientErr
			}

			contract, contractErr := NewMetronome(contractAddress, client)
			if contractErr != nil {
				return contractErr
			}

			callOpts := bind.CallOpts{}
			SetCallParametersFromArgs(&callOpts, pending, fromAddressRaw, blockNumberRaw)

			session := MetronomeCallerSession{
				Contract: &contract.MetronomeCaller,
				CallOpts: callOpts,
			}

			var callErr error
			capture0, callErr = session.NumSchedules()
			if callErr != nil {
				return callErr
			}

			cmd.Printf("0: %s\n", capture0.String())

			return nil
		},
	}

	cmd.Flags().StringVar(&rpc, "rpc", "", "URL of the JSONRPC API to use")
	cmd.Flags().StringVar(&blockNumberRaw, "block", "", "Block number at which to call the view method")
	cmd.Flags().BoolVar(&pending, "pending", false, "Set this flag if it's ok to call the view method against pending state")
	cmd.Flags().UintVar(&timeout, "timeout", 60, "Timeout (in seconds) for interactions with the JSONRPC API")
	cmd.Flags().StringVar(&contractAddressRaw, "contract", "", "Address of the contract to interact with")
	cmd.Flags().StringVar(&fromAddressRaw, "from", "", "Optional address for caller of the view method")

	return cmd
}
func CreateScheduleBalancesCommand() *cobra.Command {
	var contractAddressRaw, rpc string
	var contractAddress common.Address
	var timeout uint

	var blockNumberRaw, fromAddressRaw string
	var pending bool

	var arg0 *big.Int
	var arg0Raw string

	var capture0 *big.Int

	cmd := &cobra.Command{
		Use:   "schedule-balances",
		Short: "Call the ScheduleBalances view method on a Metronome contract",
		PreRunE: func(cmd *cobra.Command, args []string) error {
			if contractAddressRaw == "" {
				return fmt.Errorf("--contract not specified")
			} else if !common.IsHexAddress(contractAddressRaw) {
				return fmt.Errorf("--contract is not a valid Ethereum address")
			}
			contractAddress = common.HexToAddress(contractAddressRaw)

			if arg0Raw == "" {
				return fmt.Errorf("--arg-0 argument not specified")
			}
			arg0 = new(big.Int)
			arg0.SetString(arg0Raw, 0)

			return nil
		},
		RunE: func(cmd *cobra.Command, args []string) error {
			client, clientErr := NewClient(rpc)
			if clientErr != nil {
				return clientErr
			}

			contract, contractErr := NewMetronome(contractAddress, client)
			if contractErr != nil {
				return contractErr
			}

			callOpts := bind.CallOpts{}
			SetCallParametersFromArgs(&callOpts, pending, fromAddressRaw, blockNumberRaw)

			session := MetronomeCallerSession{
				Contract: &contract.MetronomeCaller,
				CallOpts: callOpts,
			}

			var callErr error
			capture0, callErr = session.ScheduleBalances(
				arg0,
			)
			if callErr != nil {
				return callErr
			}

			cmd.Printf("0: %s\n", capture0.String())

			return nil
		},
	}

	cmd.Flags().StringVar(&rpc, "rpc", "", "URL of the JSONRPC API to use")
	cmd.Flags().StringVar(&blockNumberRaw, "block", "", "Block number at which to call the view method")
	cmd.Flags().BoolVar(&pending, "pending", false, "Set this flag if it's ok to call the view method against pending state")
	cmd.Flags().UintVar(&timeout, "timeout", 60, "Timeout (in seconds) for interactions with the JSONRPC API")
	cmd.Flags().StringVar(&contractAddressRaw, "contract", "", "Address of the contract to interact with")
	cmd.Flags().StringVar(&fromAddressRaw, "from", "", "Optional address for caller of the view method")

	cmd.Flags().StringVar(&arg0Raw, "arg-0", "", "arg-0 argument")

	return cmd
}
func CreateSchedulesCommand() *cobra.Command {
	var contractAddressRaw, rpc string
	var contractAddress common.Address
	var timeout uint

	var blockNumberRaw, fromAddressRaw string
	var pending bool

	var arg0 *big.Int
	var arg0Raw string

	var capture0 struct {
		Remainder *big.Int
		Divisor   *big.Int
		Bounty    *big.Int
	}

	cmd := &cobra.Command{
		Use:   "schedules",
		Short: "Call the Schedules view method on a Metronome contract",
		PreRunE: func(cmd *cobra.Command, args []string) error {
			if contractAddressRaw == "" {
				return fmt.Errorf("--contract not specified")
			} else if !common.IsHexAddress(contractAddressRaw) {
				return fmt.Errorf("--contract is not a valid Ethereum address")
			}
			contractAddress = common.HexToAddress(contractAddressRaw)

			if arg0Raw == "" {
				return fmt.Errorf("--arg-0 argument not specified")
			}
			arg0 = new(big.Int)
			arg0.SetString(arg0Raw, 0)

			return nil
		},
		RunE: func(cmd *cobra.Command, args []string) error {
			client, clientErr := NewClient(rpc)
			if clientErr != nil {
				return clientErr
			}

			contract, contractErr := NewMetronome(contractAddress, client)
			if contractErr != nil {
				return contractErr
			}

			callOpts := bind.CallOpts{}
			SetCallParametersFromArgs(&callOpts, pending, fromAddressRaw, blockNumberRaw)

			session := MetronomeCallerSession{
				Contract: &contract.MetronomeCaller,
				CallOpts: callOpts,
			}

			var callErr error
			capture0, callErr = session.Schedules(
				arg0,
			)
			if callErr != nil {
				return callErr
			}

			cmd.Printf("0: %v\n", capture0)

			return nil
		},
	}

	cmd.Flags().StringVar(&rpc, "rpc", "", "URL of the JSONRPC API to use")
	cmd.Flags().StringVar(&blockNumberRaw, "block", "", "Block number at which to call the view method")
	cmd.Flags().BoolVar(&pending, "pending", false, "Set this flag if it's ok to call the view method against pending state")
	cmd.Flags().UintVar(&timeout, "timeout", 60, "Timeout (in seconds) for interactions with the JSONRPC API")
	cmd.Flags().StringVar(&contractAddressRaw, "contract", "", "Address of the contract to interact with")
	cmd.Flags().StringVar(&fromAddressRaw, "from", "", "Optional address for caller of the view method")

	cmd.Flags().StringVar(&arg0Raw, "arg-0", "", "arg-0 argument")

	return cmd
}

func CreateClaimCommand() *cobra.Command {
	var keyfile, nonce, password, value, gasPrice, maxFeePerGas, maxPriorityFeePerGas, rpc, contractAddressRaw string
	var gasLimit uint64
	var simulate bool
	var timeout uint
	var contractAddress common.Address

	var scheduleID *big.Int
	var scheduleIDRaw string
	var forAddress common.Address
	var forAddressRaw string

	cmd := &cobra.Command{
		Use:   "claim",
		Short: "Execute the Claim method on a Metronome contract",
		PreRunE: func(cmd *cobra.Command, args []string) error {
			if keyfile == "" {
				return fmt.Errorf("--keystore not specified")
			}

			if contractAddressRaw == "" {
				return fmt.Errorf("--contract not specified")
			} else if !common.IsHexAddress(contractAddressRaw) {
				return fmt.Errorf("--contract is not a valid Ethereum address")
			}
			contractAddress = common.HexToAddress(contractAddressRaw)

			if scheduleIDRaw == "" {
				return fmt.Errorf("--schedule-id argument not specified")
			}
			scheduleID = new(big.Int)
			scheduleID.SetString(scheduleIDRaw, 0)

			if forAddressRaw == "" {
				return fmt.Errorf("--for-address argument not specified")
			} else if !common.IsHexAddress(forAddressRaw) {
				return fmt.Errorf("--for-address argument is not a valid Ethereum address")
			}
			forAddress = common.HexToAddress(forAddressRaw)

			return nil
		},
		RunE: func(cmd *cobra.Command, args []string) error {
			client, clientErr := NewClient(rpc)
			if clientErr != nil {
				return clientErr
			}

			key, keyErr := KeyFromFile(keyfile, password)
			if keyErr != nil {
				return keyErr
			}

			chainIDCtx, cancelChainIDCtx := NewChainContext(timeout)
			defer cancelChainIDCtx()
			chainID, chainIDErr := client.ChainID(chainIDCtx)
			if chainIDErr != nil {
				return chainIDErr
			}

			transactionOpts, transactionOptsErr := bind.NewKeyedTransactorWithChainID(key.PrivateKey, chainID)
			if transactionOptsErr != nil {
				return transactionOptsErr
			}

			SetTransactionParametersFromArgs(transactionOpts, nonce, value, gasPrice, maxFeePerGas, maxPriorityFeePerGas, gasLimit, simulate)

			contract, contractErr := NewMetronome(contractAddress, client)
			if contractErr != nil {
				return contractErr
			}

			session := MetronomeTransactorSession{
				Contract:     &contract.MetronomeTransactor,
				TransactOpts: *transactionOpts,
			}

			transaction, transactionErr := session.Claim(
				scheduleID,
				forAddress,
			)
			if transactionErr != nil {
				return transactionErr
			}

			cmd.Printf("Transaction hash: %s\n", transaction.Hash().Hex())
			if transactionOpts.NoSend {
				estimationMessage := ethereum.CallMsg{
					From: transactionOpts.From,
					To:   &contractAddress,
					Data: transaction.Data(),
				}

				gasEstimationCtx, cancelGasEstimationCtx := NewChainContext(timeout)
				defer cancelGasEstimationCtx()

				gasEstimate, gasEstimateErr := client.EstimateGas(gasEstimationCtx, estimationMessage)
				if gasEstimateErr != nil {
					return gasEstimateErr
				}

				transactionBinary, transactionBinaryErr := transaction.MarshalBinary()
				if transactionBinaryErr != nil {
					return transactionBinaryErr
				}
				transactionBinaryHex := hex.EncodeToString(transactionBinary)

				cmd.Printf("Transaction: %s\nEstimated gas: %d\n", transactionBinaryHex, gasEstimate)
			} else {
				cmd.Println("Transaction submitted")
			}

			return nil
		},
	}

	cmd.Flags().StringVar(&rpc, "rpc", "", "URL of the JSONRPC API to use")
	cmd.Flags().StringVar(&keyfile, "keyfile", "", "Path to the keystore file to use for the transaction")
	cmd.Flags().StringVar(&password, "password", "", "Password to use to unlock the keystore (if not specified, you will be prompted for the password when the command executes)")
	cmd.Flags().StringVar(&nonce, "nonce", "", "Nonce to use for the transaction")
	cmd.Flags().StringVar(&value, "value", "", "Value to send with the transaction")
	cmd.Flags().StringVar(&gasPrice, "gas-price", "", "Gas price to use for the transaction")
	cmd.Flags().StringVar(&maxFeePerGas, "max-fee-per-gas", "", "Maximum fee per gas to use for the (EIP-1559) transaction")
	cmd.Flags().StringVar(&maxPriorityFeePerGas, "max-priority-fee-per-gas", "", "Maximum priority fee per gas to use for the (EIP-1559) transaction")
	cmd.Flags().Uint64Var(&gasLimit, "gas-limit", 0, "Gas limit for the transaction")
	cmd.Flags().BoolVar(&simulate, "simulate", false, "Simulate the transaction without sending it")
	cmd.Flags().UintVar(&timeout, "timeout", 60, "Timeout (in seconds) for interactions with the JSONRPC API")
	cmd.Flags().StringVar(&contractAddressRaw, "contract", "", "Address of the contract to interact with")

	cmd.Flags().StringVar(&scheduleIDRaw, "schedule-id", "", "schedule-id argument")
	cmd.Flags().StringVar(&forAddressRaw, "for-address", "", "for-address argument (common.Address)")

	return cmd
}
func CreateClaimBatchCommand() *cobra.Command {
	var keyfile, nonce, password, value, gasPrice, maxFeePerGas, maxPriorityFeePerGas, rpc, contractAddressRaw string
	var gasLimit uint64
	var simulate bool
	var timeout uint
	var contractAddress common.Address

	var scheduleIDs []*big.Int
	var scheduleIDsRaw string
	var forAddress common.Address
	var forAddressRaw string

	cmd := &cobra.Command{
		Use:   "claim-batch",
		Short: "Execute the ClaimBatch method on a Metronome contract",
		PreRunE: func(cmd *cobra.Command, args []string) error {
			if keyfile == "" {
				return fmt.Errorf("--keystore not specified")
			}

			if contractAddressRaw == "" {
				return fmt.Errorf("--contract not specified")
			} else if !common.IsHexAddress(contractAddressRaw) {
				return fmt.Errorf("--contract is not a valid Ethereum address")
			}
			contractAddress = common.HexToAddress(contractAddressRaw)

			if scheduleIDsRaw == "" {
				return fmt.Errorf("--schedule-i-ds argument not specified")
			} else if strings.HasPrefix(scheduleIDsRaw, "@") {
				filename := strings.TrimPrefix(scheduleIDsRaw, "@")
				contents, readErr := os.ReadFile(filename)
				if readErr != nil {
					return readErr
				}
				unmarshalErr := json.Unmarshal(contents, &scheduleIDs)
				if unmarshalErr != nil {
					return unmarshalErr
				}
			} else {
				unmarshalErr := json.Unmarshal([]byte(scheduleIDsRaw), &scheduleIDs)
				if unmarshalErr != nil {
					return unmarshalErr
				}
			}

			if forAddressRaw == "" {
				return fmt.Errorf("--for-address argument not specified")
			} else if !common.IsHexAddress(forAddressRaw) {
				return fmt.Errorf("--for-address argument is not a valid Ethereum address")
			}
			forAddress = common.HexToAddress(forAddressRaw)

			return nil
		},
		RunE: func(cmd *cobra.Command, args []string) error {
			client, clientErr := NewClient(rpc)
			if clientErr != nil {
				return clientErr
			}

			key, keyErr := KeyFromFile(keyfile, password)
			if keyErr != nil {
				return keyErr
			}

			chainIDCtx, cancelChainIDCtx := NewChainContext(timeout)
			defer cancelChainIDCtx()
			chainID, chainIDErr := client.ChainID(chainIDCtx)
			if chainIDErr != nil {
				return chainIDErr
			}

			transactionOpts, transactionOptsErr := bind.NewKeyedTransactorWithChainID(key.PrivateKey, chainID)
			if transactionOptsErr != nil {
				return transactionOptsErr
			}

			SetTransactionParametersFromArgs(transactionOpts, nonce, value, gasPrice, maxFeePerGas, maxPriorityFeePerGas, gasLimit, simulate)

			contract, contractErr := NewMetronome(contractAddress, client)
			if contractErr != nil {
				return contractErr
			}

			session := MetronomeTransactorSession{
				Contract:     &contract.MetronomeTransactor,
				TransactOpts: *transactionOpts,
			}

			transaction, transactionErr := session.ClaimBatch(
				scheduleIDs,
				forAddress,
			)
			if transactionErr != nil {
				return transactionErr
			}

			cmd.Printf("Transaction hash: %s\n", transaction.Hash().Hex())
			if transactionOpts.NoSend {
				estimationMessage := ethereum.CallMsg{
					From: transactionOpts.From,
					To:   &contractAddress,
					Data: transaction.Data(),
				}

				gasEstimationCtx, cancelGasEstimationCtx := NewChainContext(timeout)
				defer cancelGasEstimationCtx()

				gasEstimate, gasEstimateErr := client.EstimateGas(gasEstimationCtx, estimationMessage)
				if gasEstimateErr != nil {
					return gasEstimateErr
				}

				transactionBinary, transactionBinaryErr := transaction.MarshalBinary()
				if transactionBinaryErr != nil {
					return transactionBinaryErr
				}
				transactionBinaryHex := hex.EncodeToString(transactionBinary)

				cmd.Printf("Transaction: %s\nEstimated gas: %d\n", transactionBinaryHex, gasEstimate)
			} else {
				cmd.Println("Transaction submitted")
			}

			return nil
		},
	}

	cmd.Flags().StringVar(&rpc, "rpc", "", "URL of the JSONRPC API to use")
	cmd.Flags().StringVar(&keyfile, "keyfile", "", "Path to the keystore file to use for the transaction")
	cmd.Flags().StringVar(&password, "password", "", "Password to use to unlock the keystore (if not specified, you will be prompted for the password when the command executes)")
	cmd.Flags().StringVar(&nonce, "nonce", "", "Nonce to use for the transaction")
	cmd.Flags().StringVar(&value, "value", "", "Value to send with the transaction")
	cmd.Flags().StringVar(&gasPrice, "gas-price", "", "Gas price to use for the transaction")
	cmd.Flags().StringVar(&maxFeePerGas, "max-fee-per-gas", "", "Maximum fee per gas to use for the (EIP-1559) transaction")
	cmd.Flags().StringVar(&maxPriorityFeePerGas, "max-priority-fee-per-gas", "", "Maximum priority fee per gas to use for the (EIP-1559) transaction")
	cmd.Flags().Uint64Var(&gasLimit, "gas-limit", 0, "Gas limit for the transaction")
	cmd.Flags().BoolVar(&simulate, "simulate", false, "Simulate the transaction without sending it")
	cmd.Flags().UintVar(&timeout, "timeout", 60, "Timeout (in seconds) for interactions with the JSONRPC API")
	cmd.Flags().StringVar(&contractAddressRaw, "contract", "", "Address of the contract to interact with")

	cmd.Flags().StringVar(&scheduleIDsRaw, "schedule-i-ds", "", "schedule-i-ds argument ([]*big.Int)")
	cmd.Flags().StringVar(&forAddressRaw, "for-address", "", "for-address argument (common.Address)")

	return cmd
}
func CreateCreateScheduleCommand() *cobra.Command {
	var keyfile, nonce, password, value, gasPrice, maxFeePerGas, maxPriorityFeePerGas, rpc, contractAddressRaw string
	var gasLimit uint64
	var simulate bool
	var timeout uint
	var contractAddress common.Address

	var remainder *big.Int
	var remainderRaw string
	var divisor *big.Int
	var divisorRaw string
	var bounty *big.Int
	var bountyRaw string

	cmd := &cobra.Command{
		Use:   "create-schedule",
		Short: "Execute the CreateSchedule method on a Metronome contract",
		PreRunE: func(cmd *cobra.Command, args []string) error {
			if keyfile == "" {
				return fmt.Errorf("--keystore not specified")
			}

			if contractAddressRaw == "" {
				return fmt.Errorf("--contract not specified")
			} else if !common.IsHexAddress(contractAddressRaw) {
				return fmt.Errorf("--contract is not a valid Ethereum address")
			}
			contractAddress = common.HexToAddress(contractAddressRaw)

			if remainderRaw == "" {
				return fmt.Errorf("--remainder argument not specified")
			}
			remainder = new(big.Int)
			remainder.SetString(remainderRaw, 0)

			if divisorRaw == "" {
				return fmt.Errorf("--divisor argument not specified")
			}
			divisor = new(big.Int)
			divisor.SetString(divisorRaw, 0)

			if bountyRaw == "" {
				return fmt.Errorf("--bounty argument not specified")
			}
			bounty = new(big.Int)
			bounty.SetString(bountyRaw, 0)

			return nil
		},
		RunE: func(cmd *cobra.Command, args []string) error {
			client, clientErr := NewClient(rpc)
			if clientErr != nil {
				return clientErr
			}

			key, keyErr := KeyFromFile(keyfile, password)
			if keyErr != nil {
				return keyErr
			}

			chainIDCtx, cancelChainIDCtx := NewChainContext(timeout)
			defer cancelChainIDCtx()
			chainID, chainIDErr := client.ChainID(chainIDCtx)
			if chainIDErr != nil {
				return chainIDErr
			}

			transactionOpts, transactionOptsErr := bind.NewKeyedTransactorWithChainID(key.PrivateKey, chainID)
			if transactionOptsErr != nil {
				return transactionOptsErr
			}

			SetTransactionParametersFromArgs(transactionOpts, nonce, value, gasPrice, maxFeePerGas, maxPriorityFeePerGas, gasLimit, simulate)

			contract, contractErr := NewMetronome(contractAddress, client)
			if contractErr != nil {
				return contractErr
			}

			session := MetronomeTransactorSession{
				Contract:     &contract.MetronomeTransactor,
				TransactOpts: *transactionOpts,
			}

			transaction, transactionErr := session.CreateSchedule(
				remainder,
				divisor,
				bounty,
			)
			if transactionErr != nil {
				return transactionErr
			}

			cmd.Printf("Transaction hash: %s\n", transaction.Hash().Hex())
			if transactionOpts.NoSend {
				estimationMessage := ethereum.CallMsg{
					From: transactionOpts.From,
					To:   &contractAddress,
					Data: transaction.Data(),
				}

				gasEstimationCtx, cancelGasEstimationCtx := NewChainContext(timeout)
				defer cancelGasEstimationCtx()

				gasEstimate, gasEstimateErr := client.EstimateGas(gasEstimationCtx, estimationMessage)
				if gasEstimateErr != nil {
					return gasEstimateErr
				}

				transactionBinary, transactionBinaryErr := transaction.MarshalBinary()
				if transactionBinaryErr != nil {
					return transactionBinaryErr
				}
				transactionBinaryHex := hex.EncodeToString(transactionBinary)

				cmd.Printf("Transaction: %s\nEstimated gas: %d\n", transactionBinaryHex, gasEstimate)
			} else {
				cmd.Println("Transaction submitted")
			}

			return nil
		},
	}

	cmd.Flags().StringVar(&rpc, "rpc", "", "URL of the JSONRPC API to use")
	cmd.Flags().StringVar(&keyfile, "keyfile", "", "Path to the keystore file to use for the transaction")
	cmd.Flags().StringVar(&password, "password", "", "Password to use to unlock the keystore (if not specified, you will be prompted for the password when the command executes)")
	cmd.Flags().StringVar(&nonce, "nonce", "", "Nonce to use for the transaction")
	cmd.Flags().StringVar(&value, "value", "", "Value to send with the transaction")
	cmd.Flags().StringVar(&gasPrice, "gas-price", "", "Gas price to use for the transaction")
	cmd.Flags().StringVar(&maxFeePerGas, "max-fee-per-gas", "", "Maximum fee per gas to use for the (EIP-1559) transaction")
	cmd.Flags().StringVar(&maxPriorityFeePerGas, "max-priority-fee-per-gas", "", "Maximum priority fee per gas to use for the (EIP-1559) transaction")
	cmd.Flags().Uint64Var(&gasLimit, "gas-limit", 0, "Gas limit for the transaction")
	cmd.Flags().BoolVar(&simulate, "simulate", false, "Simulate the transaction without sending it")
	cmd.Flags().UintVar(&timeout, "timeout", 60, "Timeout (in seconds) for interactions with the JSONRPC API")
	cmd.Flags().StringVar(&contractAddressRaw, "contract", "", "Address of the contract to interact with")

	cmd.Flags().StringVar(&remainderRaw, "remainder", "", "remainder argument")
	cmd.Flags().StringVar(&divisorRaw, "divisor", "", "divisor argument")
	cmd.Flags().StringVar(&bountyRaw, "bounty", "", "bounty argument")

	return cmd
}
func CreateIncreaseBalanceCommand() *cobra.Command {
	var keyfile, nonce, password, value, gasPrice, maxFeePerGas, maxPriorityFeePerGas, rpc, contractAddressRaw string
	var gasLimit uint64
	var simulate bool
	var timeout uint
	var contractAddress common.Address

	var scheduleID *big.Int
	var scheduleIDRaw string

	cmd := &cobra.Command{
		Use:   "increase-balance",
		Short: "Execute the IncreaseBalance method on a Metronome contract",
		PreRunE: func(cmd *cobra.Command, args []string) error {
			if keyfile == "" {
				return fmt.Errorf("--keystore not specified")
			}

			if contractAddressRaw == "" {
				return fmt.Errorf("--contract not specified")
			} else if !common.IsHexAddress(contractAddressRaw) {
				return fmt.Errorf("--contract is not a valid Ethereum address")
			}
			contractAddress = common.HexToAddress(contractAddressRaw)

			if scheduleIDRaw == "" {
				return fmt.Errorf("--schedule-id argument not specified")
			}
			scheduleID = new(big.Int)
			scheduleID.SetString(scheduleIDRaw, 0)

			return nil
		},
		RunE: func(cmd *cobra.Command, args []string) error {
			client, clientErr := NewClient(rpc)
			if clientErr != nil {
				return clientErr
			}

			key, keyErr := KeyFromFile(keyfile, password)
			if keyErr != nil {
				return keyErr
			}

			chainIDCtx, cancelChainIDCtx := NewChainContext(timeout)
			defer cancelChainIDCtx()
			chainID, chainIDErr := client.ChainID(chainIDCtx)
			if chainIDErr != nil {
				return chainIDErr
			}

			transactionOpts, transactionOptsErr := bind.NewKeyedTransactorWithChainID(key.PrivateKey, chainID)
			if transactionOptsErr != nil {
				return transactionOptsErr
			}

			SetTransactionParametersFromArgs(transactionOpts, nonce, value, gasPrice, maxFeePerGas, maxPriorityFeePerGas, gasLimit, simulate)

			contract, contractErr := NewMetronome(contractAddress, client)
			if contractErr != nil {
				return contractErr
			}

			session := MetronomeTransactorSession{
				Contract:     &contract.MetronomeTransactor,
				TransactOpts: *transactionOpts,
			}

			transaction, transactionErr := session.IncreaseBalance(
				scheduleID,
			)
			if transactionErr != nil {
				return transactionErr
			}

			cmd.Printf("Transaction hash: %s\n", transaction.Hash().Hex())
			if transactionOpts.NoSend {
				estimationMessage := ethereum.CallMsg{
					From: transactionOpts.From,
					To:   &contractAddress,
					Data: transaction.Data(),
				}

				gasEstimationCtx, cancelGasEstimationCtx := NewChainContext(timeout)
				defer cancelGasEstimationCtx()

				gasEstimate, gasEstimateErr := client.EstimateGas(gasEstimationCtx, estimationMessage)
				if gasEstimateErr != nil {
					return gasEstimateErr
				}

				transactionBinary, transactionBinaryErr := transaction.MarshalBinary()
				if transactionBinaryErr != nil {
					return transactionBinaryErr
				}
				transactionBinaryHex := hex.EncodeToString(transactionBinary)

				cmd.Printf("Transaction: %s\nEstimated gas: %d\n", transactionBinaryHex, gasEstimate)
			} else {
				cmd.Println("Transaction submitted")
			}

			return nil
		},
	}

	cmd.Flags().StringVar(&rpc, "rpc", "", "URL of the JSONRPC API to use")
	cmd.Flags().StringVar(&keyfile, "keyfile", "", "Path to the keystore file to use for the transaction")
	cmd.Flags().StringVar(&password, "password", "", "Password to use to unlock the keystore (if not specified, you will be prompted for the password when the command executes)")
	cmd.Flags().StringVar(&nonce, "nonce", "", "Nonce to use for the transaction")
	cmd.Flags().StringVar(&value, "value", "", "Value to send with the transaction")
	cmd.Flags().StringVar(&gasPrice, "gas-price", "", "Gas price to use for the transaction")
	cmd.Flags().StringVar(&maxFeePerGas, "max-fee-per-gas", "", "Maximum fee per gas to use for the (EIP-1559) transaction")
	cmd.Flags().StringVar(&maxPriorityFeePerGas, "max-priority-fee-per-gas", "", "Maximum priority fee per gas to use for the (EIP-1559) transaction")
	cmd.Flags().Uint64Var(&gasLimit, "gas-limit", 0, "Gas limit for the transaction")
	cmd.Flags().BoolVar(&simulate, "simulate", false, "Simulate the transaction without sending it")
	cmd.Flags().UintVar(&timeout, "timeout", 60, "Timeout (in seconds) for interactions with the JSONRPC API")
	cmd.Flags().StringVar(&contractAddressRaw, "contract", "", "Address of the contract to interact with")

	cmd.Flags().StringVar(&scheduleIDRaw, "schedule-id", "", "schedule-id argument")

	return cmd
}

var ErrNoRPCURL error = errors.New("no RPC URL provided -- please pass an RPC URL from the command line or set the METRONOME_RPC_URL environment variable")

// Generates an Ethereum client to the JSONRPC API at the given URL. If rpcURL is empty, then it
// attempts to read the RPC URL from the METRONOME_RPC_URL environment variable. If that is empty,
// too, then it returns an error.
func NewClient(rpcURL string) (*ethclient.Client, error) {
	if rpcURL == "" {
		rpcURL = os.Getenv("METRONOME_RPC_URL")
	}

	if rpcURL == "" {
		return nil, ErrNoRPCURL
	}

	client, err := ethclient.Dial(rpcURL)
	return client, err
}

// Creates a new context to be used when interacting with the chain client.
func NewChainContext(timeout uint) (context.Context, context.CancelFunc) {
	baseCtx := context.Background()
	parsedTimeout := time.Duration(timeout) * time.Second
	ctx, cancel := context.WithTimeout(baseCtx, parsedTimeout)
	return ctx, cancel
}

// Unlocks a key from a keystore (byte contents of a keystore file) with the given password.
func UnlockKeystore(keystoreData []byte, password string) (*keystore.Key, error) {
	key, err := keystore.DecryptKey(keystoreData, password)
	return key, err
}

// Loads a key from file, prompting the user for the password if it is not provided as a function argument.
func KeyFromFile(keystoreFile string, password string) (*keystore.Key, error) {
	var emptyKey *keystore.Key
	keystoreContent, readErr := os.ReadFile(keystoreFile)
	if readErr != nil {
		return emptyKey, readErr
	}

	// If password is "", prompt user for password.
	if password == "" {
		fmt.Printf("Please provide a password for keystore (%s): ", keystoreFile)
		passwordRaw, inputErr := term.ReadPassword(int(os.Stdin.Fd()))
		if inputErr != nil {
			return emptyKey, fmt.Errorf("error reading password: %s", inputErr.Error())
		}
		fmt.Print("\n")
		password = string(passwordRaw)
	}

	key, err := UnlockKeystore(keystoreContent, password)
	return key, err
}

// This method is used to set the parameters on a view call from command line arguments (represented mostly as
// strings).
func SetCallParametersFromArgs(opts *bind.CallOpts, pending bool, fromAddress, blockNumber string) {
	if pending {
		opts.Pending = true
	}

	if fromAddress != "" {
		opts.From = common.HexToAddress(fromAddress)
	}

	if blockNumber != "" {
		opts.BlockNumber = new(big.Int)
		opts.BlockNumber.SetString(blockNumber, 0)
	}
}

// This method is used to set the parameters on a transaction from command line arguments (represented mostly as
// strings).
func SetTransactionParametersFromArgs(opts *bind.TransactOpts, nonce, value, gasPrice, maxFeePerGas, maxPriorityFeePerGas string, gasLimit uint64, noSend bool) {
	if nonce != "" {
		opts.Nonce = new(big.Int)
		opts.Nonce.SetString(nonce, 0)
	}

	if value != "" {
		opts.Value = new(big.Int)
		opts.Value.SetString(value, 0)
	}

	if gasPrice != "" {
		opts.GasPrice = new(big.Int)
		opts.GasPrice.SetString(gasPrice, 0)
	}

	if maxFeePerGas != "" {
		opts.GasFeeCap = new(big.Int)
		opts.GasFeeCap.SetString(maxFeePerGas, 0)
	}

	if maxPriorityFeePerGas != "" {
		opts.GasTipCap = new(big.Int)
		opts.GasTipCap.SetString(maxPriorityFeePerGas, 0)
	}

	if gasLimit != 0 {
		opts.GasLimit = gasLimit
	}

	opts.NoSend = noSend
}

func CreateMetronomeCommand() *cobra.Command {
	cmd := &cobra.Command{
		Use:   "metronome",
		Short: "Interact with the Metronome contract",
		Run: func(cmd *cobra.Command, args []string) {
			cmd.Help()
		},
	}

	cmd.SetOut(os.Stdout)

	DeployGroup := &cobra.Group{
		ID: "deploy", Title: "Commands which deploy contracts",
	}
	cmd.AddGroup(DeployGroup)
	ViewGroup := &cobra.Group{
		ID: "view", Title: "Commands which view contract state",
	}
	TransactGroup := &cobra.Group{
		ID: "transact", Title: "Commands which submit transactions",
	}
	cmd.AddGroup(ViewGroup, TransactGroup)

	cmdDeployMetronome := CreateMetronomeDeploymentCommand()
	cmdDeployMetronome.GroupID = DeployGroup.ID
	cmd.AddCommand(cmdDeployMetronome)

	cmdViewClaimedBounties := CreateClaimedBountiesCommand()
	cmdViewClaimedBounties.GroupID = ViewGroup.ID
	cmd.AddCommand(cmdViewClaimedBounties)
	cmdViewLastTick := CreateLastTickCommand()
	cmdViewLastTick.GroupID = ViewGroup.ID
	cmd.AddCommand(cmdViewLastTick)
	cmdViewNumSchedules := CreateNumSchedulesCommand()
	cmdViewNumSchedules.GroupID = ViewGroup.ID
	cmd.AddCommand(cmdViewNumSchedules)
	cmdViewScheduleBalances := CreateScheduleBalancesCommand()
	cmdViewScheduleBalances.GroupID = ViewGroup.ID
	cmd.AddCommand(cmdViewScheduleBalances)
	cmdViewSchedules := CreateSchedulesCommand()
	cmdViewSchedules.GroupID = ViewGroup.ID
	cmd.AddCommand(cmdViewSchedules)

	cmdTransactClaim := CreateClaimCommand()
	cmdTransactClaim.GroupID = TransactGroup.ID
	cmd.AddCommand(cmdTransactClaim)
	cmdTransactClaimBatch := CreateClaimBatchCommand()
	cmdTransactClaimBatch.GroupID = TransactGroup.ID
	cmd.AddCommand(cmdTransactClaimBatch)
	cmdTransactCreateSchedule := CreateCreateScheduleCommand()
	cmdTransactCreateSchedule.GroupID = TransactGroup.ID
	cmd.AddCommand(cmdTransactCreateSchedule)
	cmdTransactIncreaseBalance := CreateIncreaseBalanceCommand()
	cmdTransactIncreaseBalance.GroupID = TransactGroup.ID
	cmd.AddCommand(cmdTransactIncreaseBalance)

	return cmd
}
