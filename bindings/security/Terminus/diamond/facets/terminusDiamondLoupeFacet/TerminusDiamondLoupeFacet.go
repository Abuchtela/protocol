// This file was generated by seer: https://github.com/moonstream-to/seer.
// seer version: 0.1.20
// seer command: seer evm generate --package TerminusDiamondLoupeFacet --cli --struct TerminusDiamondLoupeFacet --output bindings/Security/terminus/diamond/facets/TerminusDiamondLoupeFacet/TerminusDiamondLoupeFacet.go
// Code generated - DO NOT EDIT.
// This file is a generated binding and any manual changes will be lost.

package TerminusDiamondLoupeFacet

import (
	"errors"
	"math/big"
	"strings"

	"context"

	ethereum "github.com/ethereum/go-ethereum"
	"github.com/ethereum/go-ethereum/accounts/abi"
	"github.com/ethereum/go-ethereum/accounts/abi/bind"
	"github.com/ethereum/go-ethereum/common"
	"github.com/ethereum/go-ethereum/core/types"
	"github.com/ethereum/go-ethereum/event"

	// Reference imports to suppress errors if they are not otherwise used.
	"encoding/hex"
	"fmt"
	"os"
	"time"

	"github.com/ethereum/go-ethereum/accounts/keystore"
	"github.com/ethereum/go-ethereum/ethclient"
	"github.com/spf13/cobra"
	"golang.org/x/term"
)

var (
	_ = errors.New
	_ = big.NewInt
	_ = strings.NewReader
	_ = ethereum.NotFound
	_ = bind.Bind
	_ = common.Big1
	_ = types.BloomLookup
	_ = event.NewSubscription
	_ = abi.ConvertType
)

// IDiamondLoupeFacet is an auto generated low-level Go binding around an user-defined struct.
type IDiamondLoupeFacet struct {
	FacetAddress      common.Address
	FunctionSelectors [][4]byte
}

// TerminusDiamondLoupeFacetMetaData contains all meta data concerning the TerminusDiamondLoupeFacet contract.
var TerminusDiamondLoupeFacetMetaData = &bind.MetaData{
	ABI: "[{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"_functionSelector\",\"type\":\"bytes4\"}],\"name\":\"facetAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"facetAddress_\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"facetAddresses\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"facetAddresses_\",\"type\":\"address[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_facet\",\"type\":\"address\"}],\"name\":\"facetFunctionSelectors\",\"outputs\":[{\"internalType\":\"bytes4[]\",\"name\":\"facetFunctionSelectors_\",\"type\":\"bytes4[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"facets\",\"outputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"facetAddress\",\"type\":\"address\"},{\"internalType\":\"bytes4[]\",\"name\":\"functionSelectors\",\"type\":\"bytes4[]\"}],\"internalType\":\"structIDiamondLoupe.Facet[]\",\"name\":\"facets_\",\"type\":\"tuple[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"_interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"}]",
	Bin: "0x608060405234801561001057600080fd5b50610b85806100206000396000f3fe608060405234801561001057600080fd5b50600436106100575760003560e01c806301ffc9a71461005c57806352ef6b2c1461008c5780637a0ed627146100aa578063adfca15e146100c8578063cdffacc6146100f8575b600080fd5b61007660048036038101906100719190610689565b610128565b60405161008391906106d1565b60405180910390f35b61009461019e565b6040516100a191906107dc565b60405180910390f35b6100b261023b565b6040516100bf91906109bb565b60405180910390f35b6100e260048036038101906100dd9190610a09565b610458565b6040516100ef9190610aa5565b60405180910390f35b610112600480360381019061010d9190610689565b610543565b60405161011f9190610ad6565b60405180910390f35b6000806101336105cf565b9050806003016000847bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19167bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916815260200190815260200160002060009054906101000a900460ff16915050919050565b606060006101aa6105cf565b90508060020180548060200260200160405190810160405280929190818152602001828054801561023057602002820191906000526020600020905b8160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190600101908083116101e6575b505050505091505090565b606060006102476105cf565b90506000816002018054905090508067ffffffffffffffff81111561026f5761026e610af1565b5b6040519080825280602002602001820160405280156102a857816020015b6102956105fc565b81526020019060019003908161028d5790505b50925060005b818110156104525760008360020182815481106102ce576102cd610b20565b5b9060005260206000200160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1690508085838151811061030f5761030e610b20565b5b60200260200101516000019073ffffffffffffffffffffffffffffffffffffffff16908173ffffffffffffffffffffffffffffffffffffffff16815250508360010160008273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060000180548060200260200160405190810160405280929190818152602001828054801561041d57602002820191906000526020600020906000905b82829054906101000a900460e01b7bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916815260200190600401906020826003010492830192600103820291508084116103ca5790505b505050505085838151811061043557610434610b20565b5b6020026020010151602001819052505080806001019150506102ae565b50505090565b606060006104646105cf565b90508060010160008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060000180548060200260200160405190810160405280929190818152602001828054801561053657602002820191906000526020600020906000905b82829054906101000a900460e01b7bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916815260200190600401906020826003010492830192600103820291508084116104e35790505b5050505050915050919050565b60008061054e6105cf565b9050806000016000847bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19167bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916815260200190815260200160002060000160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16915050919050565b6000807fc8fcad8db84d3cc18b4c41d551ea0ee66dd599cde068d998e57d5e09332c131c90508091505090565b6040518060400160405280600073ffffffffffffffffffffffffffffffffffffffff168152602001606081525090565b600080fd5b60007fffffffff0000000000000000000000000000000000000000000000000000000082169050919050565b61066681610631565b811461067157600080fd5b50565b6000813590506106838161065d565b92915050565b60006020828403121561069f5761069e61062c565b5b60006106ad84828501610674565b91505092915050565b60008115159050919050565b6106cb816106b6565b82525050565b60006020820190506106e660008301846106c2565b92915050565b600081519050919050565b600082825260208201905092915050565b6000819050602082019050919050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b600061074382610718565b9050919050565b61075381610738565b82525050565b6000610765838361074a565b60208301905092915050565b6000602082019050919050565b6000610789826106ec565b61079381856106f7565b935061079e83610708565b8060005b838110156107cf5781516107b68882610759565b97506107c183610771565b9250506001810190506107a2565b5085935050505092915050565b600060208201905081810360008301526107f6818461077e565b905092915050565b600081519050919050565b600082825260208201905092915050565b6000819050602082019050919050565b600081519050919050565b600082825260208201905092915050565b6000819050602082019050919050565b61085f81610631565b82525050565b60006108718383610856565b60208301905092915050565b6000602082019050919050565b60006108958261082a565b61089f8185610835565b93506108aa83610846565b8060005b838110156108db5781516108c28882610865565b97506108cd8361087d565b9250506001810190506108ae565b5085935050505092915050565b6000604083016000830151610900600086018261074a565b5060208301518482036020860152610918828261088a565b9150508091505092915050565b600061093183836108e8565b905092915050565b6000602082019050919050565b6000610951826107fe565b61095b8185610809565b93508360208202850161096d8561081a565b8060005b858110156109a9578484038952815161098a8582610925565b945061099583610939565b925060208a01995050600181019050610971565b50829750879550505050505092915050565b600060208201905081810360008301526109d58184610946565b905092915050565b6109e681610738565b81146109f157600080fd5b50565b600081359050610a03816109dd565b92915050565b600060208284031215610a1f57610a1e61062c565b5b6000610a2d848285016109f4565b91505092915050565b600082825260208201905092915050565b6000610a528261082a565b610a5c8185610a36565b9350610a6783610846565b8060005b83811015610a98578151610a7f8882610865565b9750610a8a8361087d565b925050600181019050610a6b565b5085935050505092915050565b60006020820190508181036000830152610abf8184610a47565b905092915050565b610ad081610738565b82525050565b6000602082019050610aeb6000830184610ac7565b92915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fdfea26469706673582212206f2e9470b7b8baaca84b44e8b49baff56b380623579a437fdef9a42150f7558064736f6c63430008180033",
}

// TerminusDiamondLoupeFacetABI is the input ABI used to generate the binding from.
// Deprecated: Use TerminusDiamondLoupeFacetMetaData.ABI instead.
var TerminusDiamondLoupeFacetABI = TerminusDiamondLoupeFacetMetaData.ABI

// TerminusDiamondLoupeFacetBin is the compiled bytecode used for deploying new contracts.
// Deprecated: Use TerminusDiamondLoupeFacetMetaData.Bin instead.
var TerminusDiamondLoupeFacetBin = TerminusDiamondLoupeFacetMetaData.Bin

// DeployTerminusDiamondLoupeFacet deploys a new Ethereum contract, binding an instance of TerminusDiamondLoupeFacet to it.
func DeployTerminusDiamondLoupeFacet(auth *bind.TransactOpts, backend bind.ContractBackend) (common.Address, *types.Transaction, *TerminusDiamondLoupeFacet, error) {
	parsed, err := TerminusDiamondLoupeFacetMetaData.GetAbi()
	if err != nil {
		return common.Address{}, nil, nil, err
	}
	if parsed == nil {
		return common.Address{}, nil, nil, errors.New("GetABI returned nil")
	}

	address, tx, contract, err := bind.DeployContract(auth, *parsed, common.FromHex(TerminusDiamondLoupeFacetBin), backend)
	if err != nil {
		return common.Address{}, nil, nil, err
	}
	return address, tx, &TerminusDiamondLoupeFacet{TerminusDiamondLoupeFacetCaller: TerminusDiamondLoupeFacetCaller{contract: contract}, TerminusDiamondLoupeFacetTransactor: TerminusDiamondLoupeFacetTransactor{contract: contract}, TerminusDiamondLoupeFacetFilterer: TerminusDiamondLoupeFacetFilterer{contract: contract}}, nil
}

// TerminusDiamondLoupeFacet is an auto generated Go binding around an Ethereum contract.
type TerminusDiamondLoupeFacet struct {
	TerminusDiamondLoupeFacetCaller     // Read-only binding to the contract
	TerminusDiamondLoupeFacetTransactor // Write-only binding to the contract
	TerminusDiamondLoupeFacetFilterer   // Log filterer for contract events
}

// TerminusDiamondLoupeFacetCaller is an auto generated read-only Go binding around an Ethereum contract.
type TerminusDiamondLoupeFacetCaller struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// TerminusDiamondLoupeFacetTransactor is an auto generated write-only Go binding around an Ethereum contract.
type TerminusDiamondLoupeFacetTransactor struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// TerminusDiamondLoupeFacetFilterer is an auto generated log filtering Go binding around an Ethereum contract events.
type TerminusDiamondLoupeFacetFilterer struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// TerminusDiamondLoupeFacetSession is an auto generated Go binding around an Ethereum contract,
// with pre-set call and transact options.
type TerminusDiamondLoupeFacetSession struct {
	Contract     *TerminusDiamondLoupeFacet // Generic contract binding to set the session for
	CallOpts     bind.CallOpts              // Call options to use throughout this session
	TransactOpts bind.TransactOpts          // Transaction auth options to use throughout this session
}

// TerminusDiamondLoupeFacetCallerSession is an auto generated read-only Go binding around an Ethereum contract,
// with pre-set call options.
type TerminusDiamondLoupeFacetCallerSession struct {
	Contract *TerminusDiamondLoupeFacetCaller // Generic contract caller binding to set the session for
	CallOpts bind.CallOpts                    // Call options to use throughout this session
}

// TerminusDiamondLoupeFacetTransactorSession is an auto generated write-only Go binding around an Ethereum contract,
// with pre-set transact options.
type TerminusDiamondLoupeFacetTransactorSession struct {
	Contract     *TerminusDiamondLoupeFacetTransactor // Generic contract transactor binding to set the session for
	TransactOpts bind.TransactOpts                    // Transaction auth options to use throughout this session
}

// TerminusDiamondLoupeFacetRaw is an auto generated low-level Go binding around an Ethereum contract.
type TerminusDiamondLoupeFacetRaw struct {
	Contract *TerminusDiamondLoupeFacet // Generic contract binding to access the raw methods on
}

// TerminusDiamondLoupeFacetCallerRaw is an auto generated low-level read-only Go binding around an Ethereum contract.
type TerminusDiamondLoupeFacetCallerRaw struct {
	Contract *TerminusDiamondLoupeFacetCaller // Generic read-only contract binding to access the raw methods on
}

// TerminusDiamondLoupeFacetTransactorRaw is an auto generated low-level write-only Go binding around an Ethereum contract.
type TerminusDiamondLoupeFacetTransactorRaw struct {
	Contract *TerminusDiamondLoupeFacetTransactor // Generic write-only contract binding to access the raw methods on
}

// NewTerminusDiamondLoupeFacet creates a new instance of TerminusDiamondLoupeFacet, bound to a specific deployed contract.
func NewTerminusDiamondLoupeFacet(address common.Address, backend bind.ContractBackend) (*TerminusDiamondLoupeFacet, error) {
	contract, err := bindTerminusDiamondLoupeFacet(address, backend, backend, backend)
	if err != nil {
		return nil, err
	}
	return &TerminusDiamondLoupeFacet{TerminusDiamondLoupeFacetCaller: TerminusDiamondLoupeFacetCaller{contract: contract}, TerminusDiamondLoupeFacetTransactor: TerminusDiamondLoupeFacetTransactor{contract: contract}, TerminusDiamondLoupeFacetFilterer: TerminusDiamondLoupeFacetFilterer{contract: contract}}, nil
}

// NewTerminusDiamondLoupeFacetCaller creates a new read-only instance of TerminusDiamondLoupeFacet, bound to a specific deployed contract.
func NewTerminusDiamondLoupeFacetCaller(address common.Address, caller bind.ContractCaller) (*TerminusDiamondLoupeFacetCaller, error) {
	contract, err := bindTerminusDiamondLoupeFacet(address, caller, nil, nil)
	if err != nil {
		return nil, err
	}
	return &TerminusDiamondLoupeFacetCaller{contract: contract}, nil
}

// NewTerminusDiamondLoupeFacetTransactor creates a new write-only instance of TerminusDiamondLoupeFacet, bound to a specific deployed contract.
func NewTerminusDiamondLoupeFacetTransactor(address common.Address, transactor bind.ContractTransactor) (*TerminusDiamondLoupeFacetTransactor, error) {
	contract, err := bindTerminusDiamondLoupeFacet(address, nil, transactor, nil)
	if err != nil {
		return nil, err
	}
	return &TerminusDiamondLoupeFacetTransactor{contract: contract}, nil
}

// NewTerminusDiamondLoupeFacetFilterer creates a new log filterer instance of TerminusDiamondLoupeFacet, bound to a specific deployed contract.
func NewTerminusDiamondLoupeFacetFilterer(address common.Address, filterer bind.ContractFilterer) (*TerminusDiamondLoupeFacetFilterer, error) {
	contract, err := bindTerminusDiamondLoupeFacet(address, nil, nil, filterer)
	if err != nil {
		return nil, err
	}
	return &TerminusDiamondLoupeFacetFilterer{contract: contract}, nil
}

// bindTerminusDiamondLoupeFacet binds a generic wrapper to an already deployed contract.
func bindTerminusDiamondLoupeFacet(address common.Address, caller bind.ContractCaller, transactor bind.ContractTransactor, filterer bind.ContractFilterer) (*bind.BoundContract, error) {
	parsed, err := TerminusDiamondLoupeFacetMetaData.GetAbi()
	if err != nil {
		return nil, err
	}
	return bind.NewBoundContract(address, *parsed, caller, transactor, filterer), nil
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_TerminusDiamondLoupeFacet *TerminusDiamondLoupeFacetRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _TerminusDiamondLoupeFacet.Contract.TerminusDiamondLoupeFacetCaller.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_TerminusDiamondLoupeFacet *TerminusDiamondLoupeFacetRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _TerminusDiamondLoupeFacet.Contract.TerminusDiamondLoupeFacetTransactor.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_TerminusDiamondLoupeFacet *TerminusDiamondLoupeFacetRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _TerminusDiamondLoupeFacet.Contract.TerminusDiamondLoupeFacetTransactor.contract.Transact(opts, method, params...)
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_TerminusDiamondLoupeFacet *TerminusDiamondLoupeFacetCallerRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _TerminusDiamondLoupeFacet.Contract.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_TerminusDiamondLoupeFacet *TerminusDiamondLoupeFacetTransactorRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _TerminusDiamondLoupeFacet.Contract.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_TerminusDiamondLoupeFacet *TerminusDiamondLoupeFacetTransactorRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _TerminusDiamondLoupeFacet.Contract.contract.Transact(opts, method, params...)
}

// FacetAddress is a free data retrieval call binding the contract method 0xcdffacc6.
//
// Solidity: function facetAddress(bytes4 _functionSelector) view returns(address facetAddress_)
func (_TerminusDiamondLoupeFacet *TerminusDiamondLoupeFacetCaller) FacetAddress(opts *bind.CallOpts, _functionSelector [4]byte) (common.Address, error) {
	var out []interface{}
	err := _TerminusDiamondLoupeFacet.contract.Call(opts, &out, "facetAddress", _functionSelector)

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// FacetAddress is a free data retrieval call binding the contract method 0xcdffacc6.
//
// Solidity: function facetAddress(bytes4 _functionSelector) view returns(address facetAddress_)
func (_TerminusDiamondLoupeFacet *TerminusDiamondLoupeFacetSession) FacetAddress(_functionSelector [4]byte) (common.Address, error) {
	return _TerminusDiamondLoupeFacet.Contract.FacetAddress(&_TerminusDiamondLoupeFacet.CallOpts, _functionSelector)
}

// FacetAddress is a free data retrieval call binding the contract method 0xcdffacc6.
//
// Solidity: function facetAddress(bytes4 _functionSelector) view returns(address facetAddress_)
func (_TerminusDiamondLoupeFacet *TerminusDiamondLoupeFacetCallerSession) FacetAddress(_functionSelector [4]byte) (common.Address, error) {
	return _TerminusDiamondLoupeFacet.Contract.FacetAddress(&_TerminusDiamondLoupeFacet.CallOpts, _functionSelector)
}

// FacetAddresses is a free data retrieval call binding the contract method 0x52ef6b2c.
//
// Solidity: function facetAddresses() view returns(address[] facetAddresses_)
func (_TerminusDiamondLoupeFacet *TerminusDiamondLoupeFacetCaller) FacetAddresses(opts *bind.CallOpts) ([]common.Address, error) {
	var out []interface{}
	err := _TerminusDiamondLoupeFacet.contract.Call(opts, &out, "facetAddresses")

	if err != nil {
		return *new([]common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new([]common.Address)).(*[]common.Address)

	return out0, err

}

// FacetAddresses is a free data retrieval call binding the contract method 0x52ef6b2c.
//
// Solidity: function facetAddresses() view returns(address[] facetAddresses_)
func (_TerminusDiamondLoupeFacet *TerminusDiamondLoupeFacetSession) FacetAddresses() ([]common.Address, error) {
	return _TerminusDiamondLoupeFacet.Contract.FacetAddresses(&_TerminusDiamondLoupeFacet.CallOpts)
}

// FacetAddresses is a free data retrieval call binding the contract method 0x52ef6b2c.
//
// Solidity: function facetAddresses() view returns(address[] facetAddresses_)
func (_TerminusDiamondLoupeFacet *TerminusDiamondLoupeFacetCallerSession) FacetAddresses() ([]common.Address, error) {
	return _TerminusDiamondLoupeFacet.Contract.FacetAddresses(&_TerminusDiamondLoupeFacet.CallOpts)
}

// FacetFunctionSelectors is a free data retrieval call binding the contract method 0xadfca15e.
//
// Solidity: function facetFunctionSelectors(address _facet) view returns(bytes4[] facetFunctionSelectors_)
func (_TerminusDiamondLoupeFacet *TerminusDiamondLoupeFacetCaller) FacetFunctionSelectors(opts *bind.CallOpts, _facet common.Address) ([][4]byte, error) {
	var out []interface{}
	err := _TerminusDiamondLoupeFacet.contract.Call(opts, &out, "facetFunctionSelectors", _facet)

	if err != nil {
		return *new([][4]byte), err
	}

	out0 := *abi.ConvertType(out[0], new([][4]byte)).(*[][4]byte)

	return out0, err

}

// FacetFunctionSelectors is a free data retrieval call binding the contract method 0xadfca15e.
//
// Solidity: function facetFunctionSelectors(address _facet) view returns(bytes4[] facetFunctionSelectors_)
func (_TerminusDiamondLoupeFacet *TerminusDiamondLoupeFacetSession) FacetFunctionSelectors(_facet common.Address) ([][4]byte, error) {
	return _TerminusDiamondLoupeFacet.Contract.FacetFunctionSelectors(&_TerminusDiamondLoupeFacet.CallOpts, _facet)
}

// FacetFunctionSelectors is a free data retrieval call binding the contract method 0xadfca15e.
//
// Solidity: function facetFunctionSelectors(address _facet) view returns(bytes4[] facetFunctionSelectors_)
func (_TerminusDiamondLoupeFacet *TerminusDiamondLoupeFacetCallerSession) FacetFunctionSelectors(_facet common.Address) ([][4]byte, error) {
	return _TerminusDiamondLoupeFacet.Contract.FacetFunctionSelectors(&_TerminusDiamondLoupeFacet.CallOpts, _facet)
}

// Facets is a free data retrieval call binding the contract method 0x7a0ed627.
//
// Solidity: function facets() view returns((address,bytes4[])[] facets_)
func (_TerminusDiamondLoupeFacet *TerminusDiamondLoupeFacetCaller) Facets(opts *bind.CallOpts) ([]IDiamondLoupeFacet, error) {
	var out []interface{}
	err := _TerminusDiamondLoupeFacet.contract.Call(opts, &out, "facets")

	if err != nil {
		return *new([]IDiamondLoupeFacet), err
	}

	out0 := *abi.ConvertType(out[0], new([]IDiamondLoupeFacet)).(*[]IDiamondLoupeFacet)

	return out0, err

}

// Facets is a free data retrieval call binding the contract method 0x7a0ed627.
//
// Solidity: function facets() view returns((address,bytes4[])[] facets_)
func (_TerminusDiamondLoupeFacet *TerminusDiamondLoupeFacetSession) Facets() ([]IDiamondLoupeFacet, error) {
	return _TerminusDiamondLoupeFacet.Contract.Facets(&_TerminusDiamondLoupeFacet.CallOpts)
}

// Facets is a free data retrieval call binding the contract method 0x7a0ed627.
//
// Solidity: function facets() view returns((address,bytes4[])[] facets_)
func (_TerminusDiamondLoupeFacet *TerminusDiamondLoupeFacetCallerSession) Facets() ([]IDiamondLoupeFacet, error) {
	return _TerminusDiamondLoupeFacet.Contract.Facets(&_TerminusDiamondLoupeFacet.CallOpts)
}

// SupportsInterface is a free data retrieval call binding the contract method 0x01ffc9a7.
//
// Solidity: function supportsInterface(bytes4 _interfaceId) view returns(bool)
func (_TerminusDiamondLoupeFacet *TerminusDiamondLoupeFacetCaller) SupportsInterface(opts *bind.CallOpts, _interfaceId [4]byte) (bool, error) {
	var out []interface{}
	err := _TerminusDiamondLoupeFacet.contract.Call(opts, &out, "supportsInterface", _interfaceId)

	if err != nil {
		return *new(bool), err
	}

	out0 := *abi.ConvertType(out[0], new(bool)).(*bool)

	return out0, err

}

// SupportsInterface is a free data retrieval call binding the contract method 0x01ffc9a7.
//
// Solidity: function supportsInterface(bytes4 _interfaceId) view returns(bool)
func (_TerminusDiamondLoupeFacet *TerminusDiamondLoupeFacetSession) SupportsInterface(_interfaceId [4]byte) (bool, error) {
	return _TerminusDiamondLoupeFacet.Contract.SupportsInterface(&_TerminusDiamondLoupeFacet.CallOpts, _interfaceId)
}

// SupportsInterface is a free data retrieval call binding the contract method 0x01ffc9a7.
//
// Solidity: function supportsInterface(bytes4 _interfaceId) view returns(bool)
func (_TerminusDiamondLoupeFacet *TerminusDiamondLoupeFacetCallerSession) SupportsInterface(_interfaceId [4]byte) (bool, error) {
	return _TerminusDiamondLoupeFacet.Contract.SupportsInterface(&_TerminusDiamondLoupeFacet.CallOpts, _interfaceId)
}

func CreateTerminusDiamondLoupeFacetDeploymentCommand() *cobra.Command {
	var keyfile, nonce, password, value, gasPrice, maxFeePerGas, maxPriorityFeePerGas, rpc string
	var gasLimit uint64
	var simulate bool
	var timeout uint

	cmd := &cobra.Command{
		Use:   "deploy",
		Short: "Deploy a new TerminusDiamondLoupeFacet contract",
		PreRunE: func(cmd *cobra.Command, args []string) error {
			if keyfile == "" {
				return fmt.Errorf("--keystore not specified (this should be a path to an Ethereum account keystore file)")
			}

			return nil
		},
		RunE: func(cmd *cobra.Command, args []string) error {
			client, clientErr := NewClient(rpc)
			if clientErr != nil {
				return clientErr
			}

			key, keyErr := KeyFromFile(keyfile, password)
			if keyErr != nil {
				return keyErr
			}

			chainIDCtx, cancelChainIDCtx := NewChainContext(timeout)
			defer cancelChainIDCtx()
			chainID, chainIDErr := client.ChainID(chainIDCtx)
			if chainIDErr != nil {
				return chainIDErr
			}

			transactionOpts, transactionOptsErr := bind.NewKeyedTransactorWithChainID(key.PrivateKey, chainID)
			if transactionOptsErr != nil {
				return transactionOptsErr
			}

			SetTransactionParametersFromArgs(transactionOpts, nonce, value, gasPrice, maxFeePerGas, maxPriorityFeePerGas, gasLimit, simulate)

			address, deploymentTransaction, _, deploymentErr := DeployTerminusDiamondLoupeFacet(
				transactionOpts,
				client,
			)
			if deploymentErr != nil {
				return deploymentErr
			}

			cmd.Printf("Transaction hash: %s\nContract address: %s\n", deploymentTransaction.Hash().Hex(), address.Hex())
			if transactionOpts.NoSend {
				estimationMessage := ethereum.CallMsg{
					From: transactionOpts.From,
					Data: deploymentTransaction.Data(),
				}

				gasEstimationCtx, cancelGasEstimationCtx := NewChainContext(timeout)
				defer cancelGasEstimationCtx()

				gasEstimate, gasEstimateErr := client.EstimateGas(gasEstimationCtx, estimationMessage)
				if gasEstimateErr != nil {
					return gasEstimateErr
				}

				transactionBinary, transactionBinaryErr := deploymentTransaction.MarshalBinary()
				if transactionBinaryErr != nil {
					return transactionBinaryErr
				}
				transactionBinaryHex := hex.EncodeToString(transactionBinary)

				cmd.Printf("Transaction: %s\nEstimated gas: %d\n", transactionBinaryHex, gasEstimate)
			} else {
				cmd.Println("Transaction submitted")
			}

			return nil
		},
	}

	cmd.Flags().StringVar(&rpc, "rpc", "", "URL of the JSONRPC API to use")
	cmd.Flags().StringVar(&keyfile, "keyfile", "", "Path to the keystore file to use for the transaction")
	cmd.Flags().StringVar(&password, "password", "", "Password to use to unlock the keystore (if not specified, you will be prompted for the password when the command executes)")
	cmd.Flags().StringVar(&nonce, "nonce", "", "Nonce to use for the transaction")
	cmd.Flags().StringVar(&value, "value", "", "Value to send with the transaction")
	cmd.Flags().StringVar(&gasPrice, "gas-price", "", "Gas price to use for the transaction")
	cmd.Flags().StringVar(&maxFeePerGas, "max-fee-per-gas", "", "Maximum fee per gas to use for the (EIP-1559) transaction")
	cmd.Flags().StringVar(&maxPriorityFeePerGas, "max-priority-fee-per-gas", "", "Maximum priority fee per gas to use for the (EIP-1559) transaction")
	cmd.Flags().Uint64Var(&gasLimit, "gas-limit", 0, "Gas limit for the transaction")
	cmd.Flags().BoolVar(&simulate, "simulate", false, "Simulate the transaction without sending it")
	cmd.Flags().UintVar(&timeout, "timeout", 60, "Timeout (in seconds) for interactions with the JSONRPC API")

	return cmd
}

func CreateFacetAddressCommand() *cobra.Command {
	var contractAddressRaw, rpc string
	var contractAddress common.Address
	var timeout uint

	var blockNumberRaw, fromAddressRaw string
	var pending bool

	var functionSelector [4]byte
	var functionSelectorRaw string

	var capture0 common.Address

	cmd := &cobra.Command{
		Use:   "facet-address",
		Short: "Call the FacetAddress view method on a TerminusDiamondLoupeFacet contract",
		PreRunE: func(cmd *cobra.Command, args []string) error {
			if contractAddressRaw == "" {
				return fmt.Errorf("--contract not specified")
			} else if !common.IsHexAddress(contractAddressRaw) {
				return fmt.Errorf("--contract is not a valid Ethereum address")
			}
			contractAddress = common.HexToAddress(contractAddressRaw)

			var functionSelectorIntermediate []byte

			var functionSelectorIntermediateHexDecodeErr error
			functionSelectorIntermediate, functionSelectorIntermediateHexDecodeErr = hex.DecodeString(functionSelectorRaw)
			if functionSelectorIntermediateHexDecodeErr != nil {
				return functionSelectorIntermediateHexDecodeErr
			}

			copy(functionSelector[:], functionSelectorIntermediate)

			return nil
		},
		RunE: func(cmd *cobra.Command, args []string) error {
			client, clientErr := NewClient(rpc)
			if clientErr != nil {
				return clientErr
			}

			contract, contractErr := NewTerminusDiamondLoupeFacet(contractAddress, client)
			if contractErr != nil {
				return contractErr
			}

			callOpts := bind.CallOpts{}
			SetCallParametersFromArgs(&callOpts, pending, fromAddressRaw, blockNumberRaw)

			session := TerminusDiamondLoupeFacetCallerSession{
				Contract: &contract.TerminusDiamondLoupeFacetCaller,
				CallOpts: callOpts,
			}

			var callErr error
			capture0, callErr = session.FacetAddress(
				functionSelector,
			)
			if callErr != nil {
				return callErr
			}

			cmd.Printf("0: %s\n", capture0.Hex())

			return nil
		},
	}

	cmd.Flags().StringVar(&rpc, "rpc", "", "URL of the JSONRPC API to use")
	cmd.Flags().StringVar(&blockNumberRaw, "block", "", "Block number at which to call the view method")
	cmd.Flags().BoolVar(&pending, "pending", false, "Set this flag if it's ok to call the view method against pending state")
	cmd.Flags().UintVar(&timeout, "timeout", 60, "Timeout (in seconds) for interactions with the JSONRPC API")
	cmd.Flags().StringVar(&contractAddressRaw, "contract", "", "Address of the contract to interact with")
	cmd.Flags().StringVar(&fromAddressRaw, "from", "", "Optional address for caller of the view method")

	cmd.Flags().StringVar(&functionSelectorRaw, "function-selector", "", "function-selector argument ([4]byte)")

	return cmd
}
func CreateFacetAddressesCommand() *cobra.Command {
	var contractAddressRaw, rpc string
	var contractAddress common.Address
	var timeout uint

	var blockNumberRaw, fromAddressRaw string
	var pending bool

	var capture0 []common.Address

	cmd := &cobra.Command{
		Use:   "facet-addresses",
		Short: "Call the FacetAddresses view method on a TerminusDiamondLoupeFacet contract",
		PreRunE: func(cmd *cobra.Command, args []string) error {
			if contractAddressRaw == "" {
				return fmt.Errorf("--contract not specified")
			} else if !common.IsHexAddress(contractAddressRaw) {
				return fmt.Errorf("--contract is not a valid Ethereum address")
			}
			contractAddress = common.HexToAddress(contractAddressRaw)

			return nil
		},
		RunE: func(cmd *cobra.Command, args []string) error {
			client, clientErr := NewClient(rpc)
			if clientErr != nil {
				return clientErr
			}

			contract, contractErr := NewTerminusDiamondLoupeFacet(contractAddress, client)
			if contractErr != nil {
				return contractErr
			}

			callOpts := bind.CallOpts{}
			SetCallParametersFromArgs(&callOpts, pending, fromAddressRaw, blockNumberRaw)

			session := TerminusDiamondLoupeFacetCallerSession{
				Contract: &contract.TerminusDiamondLoupeFacetCaller,
				CallOpts: callOpts,
			}

			var callErr error
			capture0, callErr = session.FacetAddresses()
			if callErr != nil {
				return callErr
			}

			cmd.Printf("0: %v\n", capture0)

			return nil
		},
	}

	cmd.Flags().StringVar(&rpc, "rpc", "", "URL of the JSONRPC API to use")
	cmd.Flags().StringVar(&blockNumberRaw, "block", "", "Block number at which to call the view method")
	cmd.Flags().BoolVar(&pending, "pending", false, "Set this flag if it's ok to call the view method against pending state")
	cmd.Flags().UintVar(&timeout, "timeout", 60, "Timeout (in seconds) for interactions with the JSONRPC API")
	cmd.Flags().StringVar(&contractAddressRaw, "contract", "", "Address of the contract to interact with")
	cmd.Flags().StringVar(&fromAddressRaw, "from", "", "Optional address for caller of the view method")

	return cmd
}
func CreateFacetFunctionSelectorsCommand() *cobra.Command {
	var contractAddressRaw, rpc string
	var contractAddress common.Address
	var timeout uint

	var blockNumberRaw, fromAddressRaw string
	var pending bool

	var facet common.Address
	var facetRaw string

	var capture0 [][4]byte

	cmd := &cobra.Command{
		Use:   "facet-function-selectors",
		Short: "Call the FacetFunctionSelectors view method on a TerminusDiamondLoupeFacet contract",
		PreRunE: func(cmd *cobra.Command, args []string) error {
			if contractAddressRaw == "" {
				return fmt.Errorf("--contract not specified")
			} else if !common.IsHexAddress(contractAddressRaw) {
				return fmt.Errorf("--contract is not a valid Ethereum address")
			}
			contractAddress = common.HexToAddress(contractAddressRaw)

			if facetRaw == "" {
				return fmt.Errorf("--facet argument not specified")
			} else if !common.IsHexAddress(facetRaw) {
				return fmt.Errorf("--facet argument is not a valid Ethereum address")
			}
			facet = common.HexToAddress(facetRaw)

			return nil
		},
		RunE: func(cmd *cobra.Command, args []string) error {
			client, clientErr := NewClient(rpc)
			if clientErr != nil {
				return clientErr
			}

			contract, contractErr := NewTerminusDiamondLoupeFacet(contractAddress, client)
			if contractErr != nil {
				return contractErr
			}

			callOpts := bind.CallOpts{}
			SetCallParametersFromArgs(&callOpts, pending, fromAddressRaw, blockNumberRaw)

			session := TerminusDiamondLoupeFacetCallerSession{
				Contract: &contract.TerminusDiamondLoupeFacetCaller,
				CallOpts: callOpts,
			}

			var callErr error
			capture0, callErr = session.FacetFunctionSelectors(
				facet,
			)
			if callErr != nil {
				return callErr
			}

			cmd.Printf("0: %v\n", capture0)

			return nil
		},
	}

	cmd.Flags().StringVar(&rpc, "rpc", "", "URL of the JSONRPC API to use")
	cmd.Flags().StringVar(&blockNumberRaw, "block", "", "Block number at which to call the view method")
	cmd.Flags().BoolVar(&pending, "pending", false, "Set this flag if it's ok to call the view method against pending state")
	cmd.Flags().UintVar(&timeout, "timeout", 60, "Timeout (in seconds) for interactions with the JSONRPC API")
	cmd.Flags().StringVar(&contractAddressRaw, "contract", "", "Address of the contract to interact with")
	cmd.Flags().StringVar(&fromAddressRaw, "from", "", "Optional address for caller of the view method")

	cmd.Flags().StringVar(&facetRaw, "facet", "", "facet argument (common.Address)")

	return cmd
}
func CreateFacetsCommand() *cobra.Command {
	var contractAddressRaw, rpc string
	var contractAddress common.Address
	var timeout uint

	var blockNumberRaw, fromAddressRaw string
	var pending bool

	var capture0 []IDiamondLoupeFacet

	cmd := &cobra.Command{
		Use:   "facets",
		Short: "Call the Facets view method on a TerminusDiamondLoupeFacet contract",
		PreRunE: func(cmd *cobra.Command, args []string) error {
			if contractAddressRaw == "" {
				return fmt.Errorf("--contract not specified")
			} else if !common.IsHexAddress(contractAddressRaw) {
				return fmt.Errorf("--contract is not a valid Ethereum address")
			}
			contractAddress = common.HexToAddress(contractAddressRaw)

			return nil
		},
		RunE: func(cmd *cobra.Command, args []string) error {
			client, clientErr := NewClient(rpc)
			if clientErr != nil {
				return clientErr
			}

			contract, contractErr := NewTerminusDiamondLoupeFacet(contractAddress, client)
			if contractErr != nil {
				return contractErr
			}

			callOpts := bind.CallOpts{}
			SetCallParametersFromArgs(&callOpts, pending, fromAddressRaw, blockNumberRaw)

			session := TerminusDiamondLoupeFacetCallerSession{
				Contract: &contract.TerminusDiamondLoupeFacetCaller,
				CallOpts: callOpts,
			}

			var callErr error
			capture0, callErr = session.Facets()
			if callErr != nil {
				return callErr
			}

			cmd.Printf("0: %v\n", capture0)

			return nil
		},
	}

	cmd.Flags().StringVar(&rpc, "rpc", "", "URL of the JSONRPC API to use")
	cmd.Flags().StringVar(&blockNumberRaw, "block", "", "Block number at which to call the view method")
	cmd.Flags().BoolVar(&pending, "pending", false, "Set this flag if it's ok to call the view method against pending state")
	cmd.Flags().UintVar(&timeout, "timeout", 60, "Timeout (in seconds) for interactions with the JSONRPC API")
	cmd.Flags().StringVar(&contractAddressRaw, "contract", "", "Address of the contract to interact with")
	cmd.Flags().StringVar(&fromAddressRaw, "from", "", "Optional address for caller of the view method")

	return cmd
}
func CreateSupportsInterfaceCommand() *cobra.Command {
	var contractAddressRaw, rpc string
	var contractAddress common.Address
	var timeout uint

	var blockNumberRaw, fromAddressRaw string
	var pending bool

	var interfaceId [4]byte
	var interfaceIdRaw string

	var capture0 bool

	cmd := &cobra.Command{
		Use:   "supports-interface",
		Short: "Call the SupportsInterface view method on a TerminusDiamondLoupeFacet contract",
		PreRunE: func(cmd *cobra.Command, args []string) error {
			if contractAddressRaw == "" {
				return fmt.Errorf("--contract not specified")
			} else if !common.IsHexAddress(contractAddressRaw) {
				return fmt.Errorf("--contract is not a valid Ethereum address")
			}
			contractAddress = common.HexToAddress(contractAddressRaw)

			var interfaceIdIntermediate []byte

			var interfaceIdIntermediateHexDecodeErr error
			interfaceIdIntermediate, interfaceIdIntermediateHexDecodeErr = hex.DecodeString(interfaceIdRaw)
			if interfaceIdIntermediateHexDecodeErr != nil {
				return interfaceIdIntermediateHexDecodeErr
			}

			copy(interfaceId[:], interfaceIdIntermediate)

			return nil
		},
		RunE: func(cmd *cobra.Command, args []string) error {
			client, clientErr := NewClient(rpc)
			if clientErr != nil {
				return clientErr
			}

			contract, contractErr := NewTerminusDiamondLoupeFacet(contractAddress, client)
			if contractErr != nil {
				return contractErr
			}

			callOpts := bind.CallOpts{}
			SetCallParametersFromArgs(&callOpts, pending, fromAddressRaw, blockNumberRaw)

			session := TerminusDiamondLoupeFacetCallerSession{
				Contract: &contract.TerminusDiamondLoupeFacetCaller,
				CallOpts: callOpts,
			}

			var callErr error
			capture0, callErr = session.SupportsInterface(
				interfaceId,
			)
			if callErr != nil {
				return callErr
			}

			cmd.Printf("0: %t\n", capture0)

			return nil
		},
	}

	cmd.Flags().StringVar(&rpc, "rpc", "", "URL of the JSONRPC API to use")
	cmd.Flags().StringVar(&blockNumberRaw, "block", "", "Block number at which to call the view method")
	cmd.Flags().BoolVar(&pending, "pending", false, "Set this flag if it's ok to call the view method against pending state")
	cmd.Flags().UintVar(&timeout, "timeout", 60, "Timeout (in seconds) for interactions with the JSONRPC API")
	cmd.Flags().StringVar(&contractAddressRaw, "contract", "", "Address of the contract to interact with")
	cmd.Flags().StringVar(&fromAddressRaw, "from", "", "Optional address for caller of the view method")

	cmd.Flags().StringVar(&interfaceIdRaw, "interface-id", "", "interface-id argument ([4]byte)")

	return cmd
}

var ErrNoRPCURL error = errors.New("no RPC URL provided -- please pass an RPC URL from the command line or set the TERMINUS_DIAMOND_LOUPE_FACET_RPC_URL environment variable")

// Generates an Ethereum client to the JSONRPC API at the given URL. If rpcURL is empty, then it
// attempts to read the RPC URL from the TERMINUS_DIAMOND_LOUPE_FACET_RPC_URL environment variable. If that is empty,
// too, then it returns an error.
func NewClient(rpcURL string) (*ethclient.Client, error) {
	if rpcURL == "" {
		rpcURL = os.Getenv("TERMINUS_DIAMOND_LOUPE_FACET_RPC_URL")
	}

	if rpcURL == "" {
		return nil, ErrNoRPCURL
	}

	client, err := ethclient.Dial(rpcURL)
	return client, err
}

// Creates a new context to be used when interacting with the chain client.
func NewChainContext(timeout uint) (context.Context, context.CancelFunc) {
	baseCtx := context.Background()
	parsedTimeout := time.Duration(timeout) * time.Second
	ctx, cancel := context.WithTimeout(baseCtx, parsedTimeout)
	return ctx, cancel
}

// Unlocks a key from a keystore (byte contents of a keystore file) with the given password.
func UnlockKeystore(keystoreData []byte, password string) (*keystore.Key, error) {
	key, err := keystore.DecryptKey(keystoreData, password)
	return key, err
}

// Loads a key from file, prompting the user for the password if it is not provided as a function argument.
func KeyFromFile(keystoreFile string, password string) (*keystore.Key, error) {
	var emptyKey *keystore.Key
	keystoreContent, readErr := os.ReadFile(keystoreFile)
	if readErr != nil {
		return emptyKey, readErr
	}

	// If password is "", prompt user for password.
	if password == "" {
		fmt.Printf("Please provide a password for keystore (%s): ", keystoreFile)
		passwordRaw, inputErr := term.ReadPassword(int(os.Stdin.Fd()))
		if inputErr != nil {
			return emptyKey, fmt.Errorf("error reading password: %s", inputErr.Error())
		}
		fmt.Print("\n")
		password = string(passwordRaw)
	}

	key, err := UnlockKeystore(keystoreContent, password)
	return key, err
}

// This method is used to set the parameters on a view call from command line arguments (represented mostly as
// strings).
func SetCallParametersFromArgs(opts *bind.CallOpts, pending bool, fromAddress, blockNumber string) {
	if pending {
		opts.Pending = true
	}

	if fromAddress != "" {
		opts.From = common.HexToAddress(fromAddress)
	}

	if blockNumber != "" {
		opts.BlockNumber = new(big.Int)
		opts.BlockNumber.SetString(blockNumber, 0)
	}
}

// This method is used to set the parameters on a transaction from command line arguments (represented mostly as
// strings).
func SetTransactionParametersFromArgs(opts *bind.TransactOpts, nonce, value, gasPrice, maxFeePerGas, maxPriorityFeePerGas string, gasLimit uint64, noSend bool) {
	if nonce != "" {
		opts.Nonce = new(big.Int)
		opts.Nonce.SetString(nonce, 0)
	}

	if value != "" {
		opts.Value = new(big.Int)
		opts.Value.SetString(value, 0)
	}

	if gasPrice != "" {
		opts.GasPrice = new(big.Int)
		opts.GasPrice.SetString(gasPrice, 0)
	}

	if maxFeePerGas != "" {
		opts.GasFeeCap = new(big.Int)
		opts.GasFeeCap.SetString(maxFeePerGas, 0)
	}

	if maxPriorityFeePerGas != "" {
		opts.GasTipCap = new(big.Int)
		opts.GasTipCap.SetString(maxPriorityFeePerGas, 0)
	}

	if gasLimit != 0 {
		opts.GasLimit = gasLimit
	}

	opts.NoSend = noSend
}

func CreateTerminusDiamondLoupeFacetCommand() *cobra.Command {
	cmd := &cobra.Command{
		Use:   "terminus-diamond-loupe-facet",
		Short: "Interact with the TerminusDiamondLoupeFacet contract",
		Run: func(cmd *cobra.Command, args []string) {
			cmd.Help()
		},
	}

	cmd.SetOut(os.Stdout)

	DeployGroup := &cobra.Group{
		ID: "deploy", Title: "Commands which deploy contracts",
	}
	cmd.AddGroup(DeployGroup)
	ViewGroup := &cobra.Group{
		ID: "view", Title: "Commands which view contract state",
	}
	TransactGroup := &cobra.Group{
		ID: "transact", Title: "Commands which submit transactions",
	}
	cmd.AddGroup(ViewGroup, TransactGroup)

	cmdDeployTerminusDiamondLoupeFacet := CreateTerminusDiamondLoupeFacetDeploymentCommand()
	cmdDeployTerminusDiamondLoupeFacet.GroupID = DeployGroup.ID
	cmd.AddCommand(cmdDeployTerminusDiamondLoupeFacet)

	cmdViewFacetAddress := CreateFacetAddressCommand()
	cmdViewFacetAddress.GroupID = ViewGroup.ID
	cmd.AddCommand(cmdViewFacetAddress)
	cmdViewFacetAddresses := CreateFacetAddressesCommand()
	cmdViewFacetAddresses.GroupID = ViewGroup.ID
	cmd.AddCommand(cmdViewFacetAddresses)
	cmdViewFacetFunctionSelectors := CreateFacetFunctionSelectorsCommand()
	cmdViewFacetFunctionSelectors.GroupID = ViewGroup.ID
	cmd.AddCommand(cmdViewFacetFunctionSelectors)
	cmdViewFacets := CreateFacetsCommand()
	cmdViewFacets.GroupID = ViewGroup.ID
	cmd.AddCommand(cmdViewFacets)
	cmdViewSupportsInterface := CreateSupportsInterfaceCommand()
	cmdViewSupportsInterface.GroupID = ViewGroup.ID
	cmd.AddCommand(cmdViewSupportsInterface)

	return cmd
}
