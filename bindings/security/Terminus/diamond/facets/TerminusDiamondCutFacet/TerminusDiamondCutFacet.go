// This file was generated by seer: https://github.com/moonstream-to/seer.
// seer version: 0.1.20
// seer command: seer evm generate --package TerminusDiamondCutFacet --cli --struct TerminusDiamondCutFacet --output bindings/security/Terminus/diamond/facets/TerminusDiamondCutFacet/TerminusDiamondCutFacet.go
// Code generated - DO NOT EDIT.
// This file is a generated binding and any manual changes will be lost.

package TerminusDiamondCutFacet

import (
	"errors"
	"math/big"
	"strings"

	"context"

	ethereum "github.com/ethereum/go-ethereum"
	"github.com/ethereum/go-ethereum/accounts/abi"
	"github.com/ethereum/go-ethereum/accounts/abi/bind"
	"github.com/ethereum/go-ethereum/common"
	"github.com/ethereum/go-ethereum/core/types"
	"github.com/ethereum/go-ethereum/event"

	// Reference imports to suppress errors if they are not otherwise used.
	"encoding/hex"
	"encoding/json"
	"fmt"
	"os"
	"time"

	"github.com/ethereum/go-ethereum/accounts/keystore"
	"github.com/ethereum/go-ethereum/ethclient"
	"github.com/spf13/cobra"
	"golang.org/x/term"
)

var (
	_ = errors.New
	_ = big.NewInt
	_ = strings.NewReader
	_ = ethereum.NotFound
	_ = bind.Bind
	_ = common.Big1
	_ = types.BloomLookup
	_ = event.NewSubscription
	_ = abi.ConvertType
)

// IDiamondCutFacetCut is an auto generated low-level Go binding around an user-defined struct.
type IDiamondCutFacetCut struct {
	FacetAddress      common.Address
	Action            uint8
	FunctionSelectors [][4]byte
}

// TerminusDiamondCutFacetMetaData contains all meta data concerning the TerminusDiamondCutFacet contract.
var TerminusDiamondCutFacetMetaData = &bind.MetaData{
	ABI: "[{\"anonymous\":false,\"inputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"facetAddress\",\"type\":\"address\"},{\"internalType\":\"enumIDiamondCut.FacetCutAction\",\"name\":\"action\",\"type\":\"uint8\"},{\"internalType\":\"bytes4[]\",\"name\":\"functionSelectors\",\"type\":\"bytes4[]\"}],\"indexed\":false,\"internalType\":\"structIDiamondCut.FacetCut[]\",\"name\":\"_diamondCut\",\"type\":\"tuple[]\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"_init\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bytes\",\"name\":\"_calldata\",\"type\":\"bytes\"}],\"name\":\"DiamondCut\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"facetAddress\",\"type\":\"address\"},{\"internalType\":\"enumIDiamondCut.FacetCutAction\",\"name\":\"action\",\"type\":\"uint8\"},{\"internalType\":\"bytes4[]\",\"name\":\"functionSelectors\",\"type\":\"bytes4[]\"}],\"indexed\":false,\"internalType\":\"structIDiamondCut.FacetCut[]\",\"name\":\"_diamondCut\",\"type\":\"tuple[]\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"_init\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bytes\",\"name\":\"_calldata\",\"type\":\"bytes\"}],\"name\":\"DiamondCut\",\"type\":\"event\"},{\"inputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"facetAddress\",\"type\":\"address\"},{\"internalType\":\"enumIDiamondCut.FacetCutAction\",\"name\":\"action\",\"type\":\"uint8\"},{\"internalType\":\"bytes4[]\",\"name\":\"functionSelectors\",\"type\":\"bytes4[]\"}],\"internalType\":\"structIDiamondCut.FacetCut[]\",\"name\":\"_diamondCut\",\"type\":\"tuple[]\"},{\"internalType\":\"address\",\"name\":\"_init\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"_calldata\",\"type\":\"bytes\"}],\"name\":\"diamondCut\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]",
	Bin: "0x608060405234801561001057600080fd5b506126aa806100206000396000f3fe608060405234801561001057600080fd5b506004361061002b5760003560e01c80631f931c1c14610030575b600080fd5b61004a60048036038101906100459190611693565b61004c565b005b6100546100b6565b6100af8585906100649190611a31565b8484848080601f016020809104026020016040519081016040528093929190818152602001838380828437600081840152601f19601f82011690508083019250505050505050610151565b5050505050565b6100be61037a565b60040160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff161461014f576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161014690611ac9565b60405180910390fd5b565b60005b835181101561032f57600084828151811061017257610171611ae9565b5b60200260200101516020015190506000600281111561019457610193611b18565b5b8160028111156101a7576101a6611b18565b5b036101f7576101f28583815181106101c2576101c1611ae9565b5b6020026020010151600001518684815181106101e1576101e0611ae9565b5b6020026020010151604001516103a7565b610321565b6001600281111561020b5761020a611b18565b5b81600281111561021e5761021d611b18565b5b0361026e5761026985838151811061023957610238611ae9565b5b60200260200101516000015186848151811061025857610257611ae9565b5b602002602001015160400151610618565b610320565b60028081111561028157610280611b18565b5b81600281111561029457610293611b18565b5b036102e4576102df8583815181106102af576102ae611ae9565b5b6020026020010151600001518684815181106102ce576102cd611ae9565b5b602002602001015160400151610893565b61031f565b6040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161031690611bb9565b60405180910390fd5b5b5b508080600101915050610154565b507f8faa70878671ccd212d20771b795c50af8fd3ff6cf27f4bde57e5d4de0aeb67383838360405161036393929190611e8e565b60405180910390a16103758282610a18565b505050565b6000807fc8fcad8db84d3cc18b4c41d551ea0ee66dd599cde068d998e57d5e09332c131c90508091505090565b60008151116103eb576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016103e290611f45565b60405180910390fd5b60006103f561037a565b9050600073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff1603610466576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161045d90611fd7565b60405180910390fd5b60008160010160008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206000018054905090506000816bffffffffffffffffffffffff16036104d3576104d28285610c2a565b5b60005b83518110156106115760008482815181106104f4576104f3611ae9565b5b602002602001015190506000846000016000837bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19167bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916815260200190815260200160002060000160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff16146105e8576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016105df90612069565b60405180910390fd5b6105f48583868a610d05565b83806105ff906120d0565b945050505080806001019150506104d6565b5050505050565b600081511161065c576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161065390611f45565b60405180910390fd5b600061066661037a565b9050600073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff16036106d7576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016106ce90611fd7565b60405180910390fd5b60008160010160008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206000018054905090506000816bffffffffffffffffffffffff1603610744576107438285610c2a565b5b60005b835181101561088c57600084828151811061076557610764611ae9565b5b602002602001015190506000846000016000837bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19167bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916815260200190815260200160002060000160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1690508673ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff1603610858576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161084f90612176565b60405180910390fd5b610863858284610eb2565b61086f8583868a610d05565b838061087a906120d0565b94505050508080600101915050610747565b5050505050565b60008151116108d7576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016108ce90611f45565b60405180910390fd5b60006108e161037a565b9050600073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff1614610952576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161094990612208565b60405180910390fd5b60005b8251811015610a1257600083828151811061097357610972611ae9565b5b602002602001015190506000836000016000837bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19167bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916815260200190815260200160002060000160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050610a03848284610eb2565b50508080600101915050610955565b50505050565b600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff1603610a95576000815114610a90576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610a879061229a565b60405180910390fd5b610c26565b6000815111610ad9576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610ad09061232c565b60405180910390fd5b3073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff1614610b2f57610b2e8260405180606001604052806028815260200161262960289139611514565b5b6000808373ffffffffffffffffffffffffffffffffffffffff1683604051610b579190612388565b600060405180830381855af49150503d8060008114610b92576040519150601f19603f3d011682016040523d82523d6000602084013e610b97565b606091505b509150915081610c2357600081511115610be857806040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610bdf91906123e3565b60405180910390fd5b6040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610c1a90612477565b60405180910390fd5b50505b5050565b610c4c8160405180606001604052806024815260200161265160249139611514565b81600201805490508260010160008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206001018190555081600201819080600181540180825580915050600190039060005260206000200160009091909190916101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055505050565b81846000016000857bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19167bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916815260200190815260200160002060000160146101000a8154816bffffffffffffffffffffffff02191690836bffffffffffffffffffffffff1602179055508360010160008273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206000018390806001815401808255809150506001900390600052602060002090600891828204019190066004029091909190916101000a81548163ffffffff021916908360e01c021790555080846000016000857bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19167bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916815260200190815260200160002060000160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555050505050565b600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff1603610f21576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610f1890612509565b60405180910390fd5b3073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff1603610f8f576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610f869061259b565b60405180910390fd5b6000836000016000837bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19167bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916815260200190815260200160002060000160149054906101000a90046bffffffffffffffffffffffff166bffffffffffffffffffffffff169050600060018560010160008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206000018054905061106691906125c5565b90508082146111fa5760008560010160008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060000182815481106110c7576110c6611ae9565b5b90600052602060002090600891828204019190066004029054906101000a900460e01b9050808660010160008773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600001848154811061114357611142611ae9565b5b90600052602060002090600891828204019190066004026101000a81548163ffffffff021916908360e01c021790555082866000016000837bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19167bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916815260200190815260200160002060000160146101000a8154816bffffffffffffffffffffffff02191690836bffffffffffffffffffffffff160217905550505b8460010160008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060000180548061124e5761124d6125f9565b5b60019003818190600052602060002090600891828204019190066004026101000a81549063ffffffff02191690559055846000016000847bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19167bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19168152602001908152602001600020600080820160006101000a81549073ffffffffffffffffffffffffffffffffffffffff02191690556000820160146101000a8154906bffffffffffffffffffffffff021916905550506000810361150d5760006001866002018054905061133891906125c5565b905060008660010160008773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206001015490508181146114795760008760020183815481106113a2576113a1611ae9565b5b9060005260206000200160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050808860020183815481106113e6576113e5611ae9565b5b9060005260206000200160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550818860010160008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060010181905550505b8660020180548061148d5761148c6125f9565b5b6001900381819060005260206000200160006101000a81549073ffffffffffffffffffffffffffffffffffffffff021916905590558660010160008773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206001016000905550505b5050505050565b6000823b9050600081118290611560576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161155791906123e3565b60405180910390fd5b50505050565b6000604051905090565b600080fd5b600080fd5b600080fd5b600080fd5b600080fd5b60008083601f84011261159f5761159e61157a565b5b8235905067ffffffffffffffff8111156115bc576115bb61157f565b5b6020830191508360208202830111156115d8576115d7611584565b5b9250929050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b600061160a826115df565b9050919050565b61161a816115ff565b811461162557600080fd5b50565b60008135905061163781611611565b92915050565b60008083601f8401126116535761165261157a565b5b8235905067ffffffffffffffff8111156116705761166f61157f565b5b60208301915083600182028301111561168c5761168b611584565b5b9250929050565b6000806000806000606086880312156116af576116ae611570565b5b600086013567ffffffffffffffff8111156116cd576116cc611575565b5b6116d988828901611589565b955095505060206116ec88828901611628565b935050604086013567ffffffffffffffff81111561170d5761170c611575565b5b6117198882890161163d565b92509250509295509295909350565b6000601f19601f8301169050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b61177182611728565b810181811067ffffffffffffffff821117156117905761178f611739565b5b80604052505050565b60006117a3611566565b90506117af8282611768565b919050565b600067ffffffffffffffff8211156117cf576117ce611739565b5b602082029050602081019050919050565b600080fd5b600080fd5b600381106117f757600080fd5b50565b600081359050611809816117ea565b92915050565b600067ffffffffffffffff82111561182a57611829611739565b5b602082029050602081019050919050565b60007fffffffff0000000000000000000000000000000000000000000000000000000082169050919050565b6118708161183b565b811461187b57600080fd5b50565b60008135905061188d81611867565b92915050565b60006118a66118a18461180f565b611799565b905080838252602082019050602084028301858111156118c9576118c8611584565b5b835b818110156118f257806118de888261187e565b8452602084019350506020810190506118cb565b5050509392505050565b600082601f8301126119115761191061157a565b5b8135611921848260208601611893565b91505092915050565b6000606082840312156119405761193f6117e0565b5b61194a6060611799565b9050600061195a84828501611628565b600083015250602061196e848285016117fa565b602083015250604082013567ffffffffffffffff811115611992576119916117e5565b5b61199e848285016118fc565b60408301525092915050565b60006119bd6119b8846117b4565b611799565b905080838252602082019050602084028301858111156119e0576119df611584565b5b835b81811015611a2757803567ffffffffffffffff811115611a0557611a0461157a565b5b808601611a12898261192a565b855260208501945050506020810190506119e2565b5050509392505050565b6000611a3e3684846119aa565b905092915050565b600082825260208201905092915050565b7f4c69624469616d6f6e643a204d75737420626520636f6e7472616374206f776e60008201527f6572000000000000000000000000000000000000000000000000000000000000602082015250565b6000611ab3602283611a46565b9150611abe82611a57565b604082019050919050565b60006020820190508181036000830152611ae281611aa6565b9050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fd5b7f4c69624469616d6f6e644375743a20496e636f7272656374204661636574437560008201527f74416374696f6e00000000000000000000000000000000000000000000000000602082015250565b6000611ba3602783611a46565b9150611bae82611b47565b604082019050919050565b60006020820190508181036000830152611bd281611b96565b9050919050565b600081519050919050565b600082825260208201905092915050565b6000819050602082019050919050565b611c0e816115ff565b82525050565b60038110611c2557611c24611b18565b5b50565b6000819050611c3682611c14565b919050565b6000611c4682611c28565b9050919050565b611c5681611c3b565b82525050565b600081519050919050565b600082825260208201905092915050565b6000819050602082019050919050565b611c918161183b565b82525050565b6000611ca38383611c88565b60208301905092915050565b6000602082019050919050565b6000611cc782611c5c565b611cd18185611c67565b9350611cdc83611c78565b8060005b83811015611d0d578151611cf48882611c97565b9750611cff83611caf565b925050600181019050611ce0565b5085935050505092915050565b6000606083016000830151611d326000860182611c05565b506020830151611d456020860182611c4d565b5060408301518482036040860152611d5d8282611cbc565b9150508091505092915050565b6000611d768383611d1a565b905092915050565b6000602082019050919050565b6000611d9682611bd9565b611da08185611be4565b935083602082028501611db285611bf5565b8060005b85811015611dee5784840389528151611dcf8582611d6a565b9450611dda83611d7e565b925060208a01995050600181019050611db6565b50829750879550505050505092915050565b611e09816115ff565b82525050565b600081519050919050565b600082825260208201905092915050565b60005b83811015611e49578082015181840152602081019050611e2e565b60008484015250505050565b6000611e6082611e0f565b611e6a8185611e1a565b9350611e7a818560208601611e2b565b611e8381611728565b840191505092915050565b60006060820190508181036000830152611ea88186611d8b565b9050611eb76020830185611e00565b8181036040830152611ec98184611e55565b9050949350505050565b7f4c69624469616d6f6e644375743a204e6f2073656c6563746f727320696e206660008201527f6163657420746f20637574000000000000000000000000000000000000000000602082015250565b6000611f2f602b83611a46565b9150611f3a82611ed3565b604082019050919050565b60006020820190508181036000830152611f5e81611f22565b9050919050565b7f4c69624469616d6f6e644375743a204164642066616365742063616e2774206260008201527f6520616464726573732830290000000000000000000000000000000000000000602082015250565b6000611fc1602c83611a46565b9150611fcc82611f65565b604082019050919050565b60006020820190508181036000830152611ff081611fb4565b9050919050565b7f4c69624469616d6f6e644375743a2043616e2774206164642066756e6374696f60008201527f6e207468617420616c7265616479206578697374730000000000000000000000602082015250565b6000612053603583611a46565b915061205e82611ff7565b604082019050919050565b6000602082019050818103600083015261208281612046565b9050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b60006bffffffffffffffffffffffff82169050919050565b60006120db826120b8565b91506bffffffffffffffffffffffff82036120f9576120f8612089565b5b600182019050919050565b7f4c69624469616d6f6e644375743a2043616e2774207265706c6163652066756e60008201527f6374696f6e20776974682073616d652066756e6374696f6e0000000000000000602082015250565b6000612160603883611a46565b915061216b82612104565b604082019050919050565b6000602082019050818103600083015261218f81612153565b9050919050565b7f4c69624469616d6f6e644375743a2052656d6f7665206661636574206164647260008201527f657373206d757374206265206164647265737328302900000000000000000000602082015250565b60006121f2603683611a46565b91506121fd82612196565b604082019050919050565b60006020820190508181036000830152612221816121e5565b9050919050565b7f4c69624469616d6f6e644375743a205f696e697420697320616464726573732860008201527f3029206275745f63616c6c64617461206973206e6f7420656d70747900000000602082015250565b6000612284603c83611a46565b915061228f82612228565b604082019050919050565b600060208201905081810360008301526122b381612277565b9050919050565b7f4c69624469616d6f6e644375743a205f63616c6c6461746120697320656d707460008201527f7920627574205f696e6974206973206e6f742061646472657373283029000000602082015250565b6000612316603d83611a46565b9150612321826122ba565b604082019050919050565b6000602082019050818103600083015261234581612309565b9050919050565b600081905092915050565b600061236282611e0f565b61236c818561234c565b935061237c818560208601611e2b565b80840191505092915050565b60006123948284612357565b915081905092915050565b600081519050919050565b60006123b58261239f565b6123bf8185611a46565b93506123cf818560208601611e2b565b6123d881611728565b840191505092915050565b600060208201905081810360008301526123fd81846123aa565b905092915050565b7f4c69624469616d6f6e644375743a205f696e69742066756e6374696f6e20726560008201527f7665727465640000000000000000000000000000000000000000000000000000602082015250565b6000612461602683611a46565b915061246c82612405565b604082019050919050565b6000602082019050818103600083015261249081612454565b9050919050565b7f4c69624469616d6f6e644375743a2043616e27742072656d6f76652066756e6360008201527f74696f6e207468617420646f65736e2774206578697374000000000000000000602082015250565b60006124f3603783611a46565b91506124fe82612497565b604082019050919050565b60006020820190508181036000830152612522816124e6565b9050919050565b7f4c69624469616d6f6e644375743a2043616e27742072656d6f766520696d6d7560008201527f7461626c652066756e6374696f6e000000000000000000000000000000000000602082015250565b6000612585602e83611a46565b915061259082612529565b604082019050919050565b600060208201905081810360008301526125b481612578565b9050919050565b6000819050919050565b60006125d0826125bb565b91506125db836125bb565b92508282039050818111156125f3576125f2612089565b5b92915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603160045260246000fdfe4c69624469616d6f6e644375743a205f696e6974206164647265737320686173206e6f20636f64654c69624469616d6f6e644375743a204e657720666163657420686173206e6f20636f6465a264697066735822122053638315bbd0d8de66a883a9badcf8983a2e72986f4c3287ad44adb7e88e777064736f6c63430008180033",
}

// TerminusDiamondCutFacetABI is the input ABI used to generate the binding from.
// Deprecated: Use TerminusDiamondCutFacetMetaData.ABI instead.
var TerminusDiamondCutFacetABI = TerminusDiamondCutFacetMetaData.ABI

// TerminusDiamondCutFacetBin is the compiled bytecode used for deploying new contracts.
// Deprecated: Use TerminusDiamondCutFacetMetaData.Bin instead.
var TerminusDiamondCutFacetBin = TerminusDiamondCutFacetMetaData.Bin

// DeployTerminusDiamondCutFacet deploys a new Ethereum contract, binding an instance of TerminusDiamondCutFacet to it.
func DeployTerminusDiamondCutFacet(auth *bind.TransactOpts, backend bind.ContractBackend) (common.Address, *types.Transaction, *TerminusDiamondCutFacet, error) {
	parsed, err := TerminusDiamondCutFacetMetaData.GetAbi()
	if err != nil {
		return common.Address{}, nil, nil, err
	}
	if parsed == nil {
		return common.Address{}, nil, nil, errors.New("GetABI returned nil")
	}

	address, tx, contract, err := bind.DeployContract(auth, *parsed, common.FromHex(TerminusDiamondCutFacetBin), backend)
	if err != nil {
		return common.Address{}, nil, nil, err
	}
	return address, tx, &TerminusDiamondCutFacet{TerminusDiamondCutFacetCaller: TerminusDiamondCutFacetCaller{contract: contract}, TerminusDiamondCutFacetTransactor: TerminusDiamondCutFacetTransactor{contract: contract}, TerminusDiamondCutFacetFilterer: TerminusDiamondCutFacetFilterer{contract: contract}}, nil
}

// TerminusDiamondCutFacet is an auto generated Go binding around an Ethereum contract.
type TerminusDiamondCutFacet struct {
	TerminusDiamondCutFacetCaller     // Read-only binding to the contract
	TerminusDiamondCutFacetTransactor // Write-only binding to the contract
	TerminusDiamondCutFacetFilterer   // Log filterer for contract events
}

// TerminusDiamondCutFacetCaller is an auto generated read-only Go binding around an Ethereum contract.
type TerminusDiamondCutFacetCaller struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// TerminusDiamondCutFacetTransactor is an auto generated write-only Go binding around an Ethereum contract.
type TerminusDiamondCutFacetTransactor struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// TerminusDiamondCutFacetFilterer is an auto generated log filtering Go binding around an Ethereum contract events.
type TerminusDiamondCutFacetFilterer struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// TerminusDiamondCutFacetSession is an auto generated Go binding around an Ethereum contract,
// with pre-set call and transact options.
type TerminusDiamondCutFacetSession struct {
	Contract     *TerminusDiamondCutFacet // Generic contract binding to set the session for
	CallOpts     bind.CallOpts            // Call options to use throughout this session
	TransactOpts bind.TransactOpts        // Transaction auth options to use throughout this session
}

// TerminusDiamondCutFacetCallerSession is an auto generated read-only Go binding around an Ethereum contract,
// with pre-set call options.
type TerminusDiamondCutFacetCallerSession struct {
	Contract *TerminusDiamondCutFacetCaller // Generic contract caller binding to set the session for
	CallOpts bind.CallOpts                  // Call options to use throughout this session
}

// TerminusDiamondCutFacetTransactorSession is an auto generated write-only Go binding around an Ethereum contract,
// with pre-set transact options.
type TerminusDiamondCutFacetTransactorSession struct {
	Contract     *TerminusDiamondCutFacetTransactor // Generic contract transactor binding to set the session for
	TransactOpts bind.TransactOpts                  // Transaction auth options to use throughout this session
}

// TerminusDiamondCutFacetRaw is an auto generated low-level Go binding around an Ethereum contract.
type TerminusDiamondCutFacetRaw struct {
	Contract *TerminusDiamondCutFacet // Generic contract binding to access the raw methods on
}

// TerminusDiamondCutFacetCallerRaw is an auto generated low-level read-only Go binding around an Ethereum contract.
type TerminusDiamondCutFacetCallerRaw struct {
	Contract *TerminusDiamondCutFacetCaller // Generic read-only contract binding to access the raw methods on
}

// TerminusDiamondCutFacetTransactorRaw is an auto generated low-level write-only Go binding around an Ethereum contract.
type TerminusDiamondCutFacetTransactorRaw struct {
	Contract *TerminusDiamondCutFacetTransactor // Generic write-only contract binding to access the raw methods on
}

// NewTerminusDiamondCutFacet creates a new instance of TerminusDiamondCutFacet, bound to a specific deployed contract.
func NewTerminusDiamondCutFacet(address common.Address, backend bind.ContractBackend) (*TerminusDiamondCutFacet, error) {
	contract, err := bindTerminusDiamondCutFacet(address, backend, backend, backend)
	if err != nil {
		return nil, err
	}
	return &TerminusDiamondCutFacet{TerminusDiamondCutFacetCaller: TerminusDiamondCutFacetCaller{contract: contract}, TerminusDiamondCutFacetTransactor: TerminusDiamondCutFacetTransactor{contract: contract}, TerminusDiamondCutFacetFilterer: TerminusDiamondCutFacetFilterer{contract: contract}}, nil
}

// NewTerminusDiamondCutFacetCaller creates a new read-only instance of TerminusDiamondCutFacet, bound to a specific deployed contract.
func NewTerminusDiamondCutFacetCaller(address common.Address, caller bind.ContractCaller) (*TerminusDiamondCutFacetCaller, error) {
	contract, err := bindTerminusDiamondCutFacet(address, caller, nil, nil)
	if err != nil {
		return nil, err
	}
	return &TerminusDiamondCutFacetCaller{contract: contract}, nil
}

// NewTerminusDiamondCutFacetTransactor creates a new write-only instance of TerminusDiamondCutFacet, bound to a specific deployed contract.
func NewTerminusDiamondCutFacetTransactor(address common.Address, transactor bind.ContractTransactor) (*TerminusDiamondCutFacetTransactor, error) {
	contract, err := bindTerminusDiamondCutFacet(address, nil, transactor, nil)
	if err != nil {
		return nil, err
	}
	return &TerminusDiamondCutFacetTransactor{contract: contract}, nil
}

// NewTerminusDiamondCutFacetFilterer creates a new log filterer instance of TerminusDiamondCutFacet, bound to a specific deployed contract.
func NewTerminusDiamondCutFacetFilterer(address common.Address, filterer bind.ContractFilterer) (*TerminusDiamondCutFacetFilterer, error) {
	contract, err := bindTerminusDiamondCutFacet(address, nil, nil, filterer)
	if err != nil {
		return nil, err
	}
	return &TerminusDiamondCutFacetFilterer{contract: contract}, nil
}

// bindTerminusDiamondCutFacet binds a generic wrapper to an already deployed contract.
func bindTerminusDiamondCutFacet(address common.Address, caller bind.ContractCaller, transactor bind.ContractTransactor, filterer bind.ContractFilterer) (*bind.BoundContract, error) {
	parsed, err := TerminusDiamondCutFacetMetaData.GetAbi()
	if err != nil {
		return nil, err
	}
	return bind.NewBoundContract(address, *parsed, caller, transactor, filterer), nil
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_TerminusDiamondCutFacet *TerminusDiamondCutFacetRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _TerminusDiamondCutFacet.Contract.TerminusDiamondCutFacetCaller.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_TerminusDiamondCutFacet *TerminusDiamondCutFacetRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _TerminusDiamondCutFacet.Contract.TerminusDiamondCutFacetTransactor.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_TerminusDiamondCutFacet *TerminusDiamondCutFacetRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _TerminusDiamondCutFacet.Contract.TerminusDiamondCutFacetTransactor.contract.Transact(opts, method, params...)
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_TerminusDiamondCutFacet *TerminusDiamondCutFacetCallerRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _TerminusDiamondCutFacet.Contract.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_TerminusDiamondCutFacet *TerminusDiamondCutFacetTransactorRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _TerminusDiamondCutFacet.Contract.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_TerminusDiamondCutFacet *TerminusDiamondCutFacetTransactorRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _TerminusDiamondCutFacet.Contract.contract.Transact(opts, method, params...)
}

// DiamondCut is a paid mutator transaction binding the contract method 0x1f931c1c.
//
// Solidity: function diamondCut((address,uint8,bytes4[])[] _diamondCut, address _init, bytes _calldata) returns()
func (_TerminusDiamondCutFacet *TerminusDiamondCutFacetTransactor) DiamondCut(opts *bind.TransactOpts, _diamondCut []IDiamondCutFacetCut, _init common.Address, _calldata []byte) (*types.Transaction, error) {
	return _TerminusDiamondCutFacet.contract.Transact(opts, "diamondCut", _diamondCut, _init, _calldata)
}

// DiamondCut is a paid mutator transaction binding the contract method 0x1f931c1c.
//
// Solidity: function diamondCut((address,uint8,bytes4[])[] _diamondCut, address _init, bytes _calldata) returns()
func (_TerminusDiamondCutFacet *TerminusDiamondCutFacetSession) DiamondCut(_diamondCut []IDiamondCutFacetCut, _init common.Address, _calldata []byte) (*types.Transaction, error) {
	return _TerminusDiamondCutFacet.Contract.DiamondCut(&_TerminusDiamondCutFacet.TransactOpts, _diamondCut, _init, _calldata)
}

// DiamondCut is a paid mutator transaction binding the contract method 0x1f931c1c.
//
// Solidity: function diamondCut((address,uint8,bytes4[])[] _diamondCut, address _init, bytes _calldata) returns()
func (_TerminusDiamondCutFacet *TerminusDiamondCutFacetTransactorSession) DiamondCut(_diamondCut []IDiamondCutFacetCut, _init common.Address, _calldata []byte) (*types.Transaction, error) {
	return _TerminusDiamondCutFacet.Contract.DiamondCut(&_TerminusDiamondCutFacet.TransactOpts, _diamondCut, _init, _calldata)
}

// TerminusDiamondCutFacetDiamondCutIterator is returned from FilterDiamondCut and is used to iterate over the raw logs and unpacked data for DiamondCut events raised by the TerminusDiamondCutFacet contract.
type TerminusDiamondCutFacetDiamondCutIterator struct {
	Event *TerminusDiamondCutFacetDiamondCut // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *TerminusDiamondCutFacetDiamondCutIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(TerminusDiamondCutFacetDiamondCut)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(TerminusDiamondCutFacetDiamondCut)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *TerminusDiamondCutFacetDiamondCutIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *TerminusDiamondCutFacetDiamondCutIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// TerminusDiamondCutFacetDiamondCut represents a DiamondCut event raised by the TerminusDiamondCutFacet contract.
type TerminusDiamondCutFacetDiamondCut struct {
	DiamondCut []IDiamondCutFacetCut
	Init       common.Address
	Calldata   []byte
	Raw        types.Log // Blockchain specific contextual infos
}

// FilterDiamondCut is a free log retrieval operation binding the contract event 0x8faa70878671ccd212d20771b795c50af8fd3ff6cf27f4bde57e5d4de0aeb673.
//
// Solidity: event DiamondCut((address,uint8,bytes4[])[] _diamondCut, address _init, bytes _calldata)
func (_TerminusDiamondCutFacet *TerminusDiamondCutFacetFilterer) FilterDiamondCut(opts *bind.FilterOpts) (*TerminusDiamondCutFacetDiamondCutIterator, error) {

	logs, sub, err := _TerminusDiamondCutFacet.contract.FilterLogs(opts, "DiamondCut")
	if err != nil {
		return nil, err
	}
	return &TerminusDiamondCutFacetDiamondCutIterator{contract: _TerminusDiamondCutFacet.contract, event: "DiamondCut", logs: logs, sub: sub}, nil
}

// WatchDiamondCut is a free log subscription operation binding the contract event 0x8faa70878671ccd212d20771b795c50af8fd3ff6cf27f4bde57e5d4de0aeb673.
//
// Solidity: event DiamondCut((address,uint8,bytes4[])[] _diamondCut, address _init, bytes _calldata)
func (_TerminusDiamondCutFacet *TerminusDiamondCutFacetFilterer) WatchDiamondCut(opts *bind.WatchOpts, sink chan<- *TerminusDiamondCutFacetDiamondCut) (event.Subscription, error) {

	logs, sub, err := _TerminusDiamondCutFacet.contract.WatchLogs(opts, "DiamondCut")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(TerminusDiamondCutFacetDiamondCut)
				if err := _TerminusDiamondCutFacet.contract.UnpackLog(event, "DiamondCut", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseDiamondCut is a log parse operation binding the contract event 0x8faa70878671ccd212d20771b795c50af8fd3ff6cf27f4bde57e5d4de0aeb673.
//
// Solidity: event DiamondCut((address,uint8,bytes4[])[] _diamondCut, address _init, bytes _calldata)
func (_TerminusDiamondCutFacet *TerminusDiamondCutFacetFilterer) ParseDiamondCut(log types.Log) (*TerminusDiamondCutFacetDiamondCut, error) {
	event := new(TerminusDiamondCutFacetDiamondCut)
	if err := _TerminusDiamondCutFacet.contract.UnpackLog(event, "DiamondCut", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// TerminusDiamondCutFacetDiamondCut0Iterator is returned from FilterDiamondCut0 and is used to iterate over the raw logs and unpacked data for DiamondCut0 events raised by the TerminusDiamondCutFacet contract.
type TerminusDiamondCutFacetDiamondCut0Iterator struct {
	Event *TerminusDiamondCutFacetDiamondCut0 // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *TerminusDiamondCutFacetDiamondCut0Iterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(TerminusDiamondCutFacetDiamondCut0)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(TerminusDiamondCutFacetDiamondCut0)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *TerminusDiamondCutFacetDiamondCut0Iterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *TerminusDiamondCutFacetDiamondCut0Iterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// TerminusDiamondCutFacetDiamondCut0 represents a DiamondCut0 event raised by the TerminusDiamondCutFacet contract.
type TerminusDiamondCutFacetDiamondCut0 struct {
	DiamondCut []IDiamondCutFacetCut
	Init       common.Address
	Calldata   []byte
	Raw        types.Log // Blockchain specific contextual infos
}

// FilterDiamondCut0 is a free log retrieval operation binding the contract event 0x8faa70878671ccd212d20771b795c50af8fd3ff6cf27f4bde57e5d4de0aeb673.
//
// Solidity: event DiamondCut((address,uint8,bytes4[])[] _diamondCut, address _init, bytes _calldata)
func (_TerminusDiamondCutFacet *TerminusDiamondCutFacetFilterer) FilterDiamondCut0(opts *bind.FilterOpts) (*TerminusDiamondCutFacetDiamondCut0Iterator, error) {

	logs, sub, err := _TerminusDiamondCutFacet.contract.FilterLogs(opts, "DiamondCut0")
	if err != nil {
		return nil, err
	}
	return &TerminusDiamondCutFacetDiamondCut0Iterator{contract: _TerminusDiamondCutFacet.contract, event: "DiamondCut0", logs: logs, sub: sub}, nil
}

// WatchDiamondCut0 is a free log subscription operation binding the contract event 0x8faa70878671ccd212d20771b795c50af8fd3ff6cf27f4bde57e5d4de0aeb673.
//
// Solidity: event DiamondCut((address,uint8,bytes4[])[] _diamondCut, address _init, bytes _calldata)
func (_TerminusDiamondCutFacet *TerminusDiamondCutFacetFilterer) WatchDiamondCut0(opts *bind.WatchOpts, sink chan<- *TerminusDiamondCutFacetDiamondCut0) (event.Subscription, error) {

	logs, sub, err := _TerminusDiamondCutFacet.contract.WatchLogs(opts, "DiamondCut0")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(TerminusDiamondCutFacetDiamondCut0)
				if err := _TerminusDiamondCutFacet.contract.UnpackLog(event, "DiamondCut0", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseDiamondCut0 is a log parse operation binding the contract event 0x8faa70878671ccd212d20771b795c50af8fd3ff6cf27f4bde57e5d4de0aeb673.
//
// Solidity: event DiamondCut((address,uint8,bytes4[])[] _diamondCut, address _init, bytes _calldata)
func (_TerminusDiamondCutFacet *TerminusDiamondCutFacetFilterer) ParseDiamondCut0(log types.Log) (*TerminusDiamondCutFacetDiamondCut0, error) {
	event := new(TerminusDiamondCutFacetDiamondCut0)
	if err := _TerminusDiamondCutFacet.contract.UnpackLog(event, "DiamondCut0", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

func CreateTerminusDiamondCutFacetDeploymentCommand() *cobra.Command {
	var keyfile, nonce, password, value, gasPrice, maxFeePerGas, maxPriorityFeePerGas, rpc string
	var gasLimit uint64
	var simulate bool
	var timeout uint

	cmd := &cobra.Command{
		Use:   "deploy",
		Short: "Deploy a new TerminusDiamondCutFacet contract",
		PreRunE: func(cmd *cobra.Command, args []string) error {
			if keyfile == "" {
				return fmt.Errorf("--keystore not specified (this should be a path to an Ethereum account keystore file)")
			}

			return nil
		},
		RunE: func(cmd *cobra.Command, args []string) error {
			client, clientErr := NewClient(rpc)
			if clientErr != nil {
				return clientErr
			}

			key, keyErr := KeyFromFile(keyfile, password)
			if keyErr != nil {
				return keyErr
			}

			chainIDCtx, cancelChainIDCtx := NewChainContext(timeout)
			defer cancelChainIDCtx()
			chainID, chainIDErr := client.ChainID(chainIDCtx)
			if chainIDErr != nil {
				return chainIDErr
			}

			transactionOpts, transactionOptsErr := bind.NewKeyedTransactorWithChainID(key.PrivateKey, chainID)
			if transactionOptsErr != nil {
				return transactionOptsErr
			}

			SetTransactionParametersFromArgs(transactionOpts, nonce, value, gasPrice, maxFeePerGas, maxPriorityFeePerGas, gasLimit, simulate)

			address, deploymentTransaction, _, deploymentErr := DeployTerminusDiamondCutFacet(
				transactionOpts,
				client,
			)
			if deploymentErr != nil {
				return deploymentErr
			}

			cmd.Printf("Transaction hash: %s\nContract address: %s\n", deploymentTransaction.Hash().Hex(), address.Hex())
			if transactionOpts.NoSend {
				estimationMessage := ethereum.CallMsg{
					From: transactionOpts.From,
					Data: deploymentTransaction.Data(),
				}

				gasEstimationCtx, cancelGasEstimationCtx := NewChainContext(timeout)
				defer cancelGasEstimationCtx()

				gasEstimate, gasEstimateErr := client.EstimateGas(gasEstimationCtx, estimationMessage)
				if gasEstimateErr != nil {
					return gasEstimateErr
				}

				transactionBinary, transactionBinaryErr := deploymentTransaction.MarshalBinary()
				if transactionBinaryErr != nil {
					return transactionBinaryErr
				}
				transactionBinaryHex := hex.EncodeToString(transactionBinary)

				cmd.Printf("Transaction: %s\nEstimated gas: %d\n", transactionBinaryHex, gasEstimate)
			} else {
				cmd.Println("Transaction submitted")
			}

			return nil
		},
	}

	cmd.Flags().StringVar(&rpc, "rpc", "", "URL of the JSONRPC API to use")
	cmd.Flags().StringVar(&keyfile, "keyfile", "", "Path to the keystore file to use for the transaction")
	cmd.Flags().StringVar(&password, "password", "", "Password to use to unlock the keystore (if not specified, you will be prompted for the password when the command executes)")
	cmd.Flags().StringVar(&nonce, "nonce", "", "Nonce to use for the transaction")
	cmd.Flags().StringVar(&value, "value", "", "Value to send with the transaction")
	cmd.Flags().StringVar(&gasPrice, "gas-price", "", "Gas price to use for the transaction")
	cmd.Flags().StringVar(&maxFeePerGas, "max-fee-per-gas", "", "Maximum fee per gas to use for the (EIP-1559) transaction")
	cmd.Flags().StringVar(&maxPriorityFeePerGas, "max-priority-fee-per-gas", "", "Maximum priority fee per gas to use for the (EIP-1559) transaction")
	cmd.Flags().Uint64Var(&gasLimit, "gas-limit", 0, "Gas limit for the transaction")
	cmd.Flags().BoolVar(&simulate, "simulate", false, "Simulate the transaction without sending it")
	cmd.Flags().UintVar(&timeout, "timeout", 60, "Timeout (in seconds) for interactions with the JSONRPC API")

	return cmd
}

func CreateDiamondCutCommand() *cobra.Command {
	var keyfile, nonce, password, value, gasPrice, maxFeePerGas, maxPriorityFeePerGas, rpc, contractAddressRaw string
	var gasLimit uint64
	var simulate bool
	var timeout uint
	var contractAddress common.Address

	var diamondCut []IDiamondCutFacetCut
	var diamondCutRaw string
	var init common.Address
	var initRaw string
	var calldata []byte
	var calldataRaw string

	cmd := &cobra.Command{
		Use:   "diamond-cut",
		Short: "Execute the DiamondCut method on a TerminusDiamondCutFacet contract",
		PreRunE: func(cmd *cobra.Command, args []string) error {
			if keyfile == "" {
				return fmt.Errorf("--keystore not specified")
			}

			if contractAddressRaw == "" {
				return fmt.Errorf("--contract not specified")
			} else if !common.IsHexAddress(contractAddressRaw) {
				return fmt.Errorf("--contract is not a valid Ethereum address")
			}
			contractAddress = common.HexToAddress(contractAddressRaw)

			if diamondCutRaw == "" {
				return fmt.Errorf("--diamond-cut argument not specified")
			} else if strings.HasPrefix(diamondCutRaw, "@") {
				filename := strings.TrimPrefix(diamondCutRaw, "@")
				contents, readErr := os.ReadFile(filename)
				if readErr != nil {
					return readErr
				}
				unmarshalErr := json.Unmarshal(contents, &diamondCut)
				if unmarshalErr != nil {
					return unmarshalErr
				}
			} else {
				unmarshalErr := json.Unmarshal([]byte(diamondCutRaw), &diamondCut)
				if unmarshalErr != nil {
					return unmarshalErr
				}
			}

			if initRaw == "" {
				return fmt.Errorf("--init argument not specified")
			} else if !common.IsHexAddress(initRaw) {
				return fmt.Errorf("--init argument is not a valid Ethereum address")
			}
			init = common.HexToAddress(initRaw)

			var calldataIntermediate []byte

			var calldataIntermediateHexDecodeErr error
			calldataIntermediate, calldataIntermediateHexDecodeErr = hex.DecodeString(calldataRaw)
			if calldataIntermediateHexDecodeErr != nil {
				return calldataIntermediateHexDecodeErr
			}

			copy(calldata[:], calldataIntermediate)

			return nil
		},
		RunE: func(cmd *cobra.Command, args []string) error {
			client, clientErr := NewClient(rpc)
			if clientErr != nil {
				return clientErr
			}

			key, keyErr := KeyFromFile(keyfile, password)
			if keyErr != nil {
				return keyErr
			}

			chainIDCtx, cancelChainIDCtx := NewChainContext(timeout)
			defer cancelChainIDCtx()
			chainID, chainIDErr := client.ChainID(chainIDCtx)
			if chainIDErr != nil {
				return chainIDErr
			}

			transactionOpts, transactionOptsErr := bind.NewKeyedTransactorWithChainID(key.PrivateKey, chainID)
			if transactionOptsErr != nil {
				return transactionOptsErr
			}

			SetTransactionParametersFromArgs(transactionOpts, nonce, value, gasPrice, maxFeePerGas, maxPriorityFeePerGas, gasLimit, simulate)

			contract, contractErr := NewTerminusDiamondCutFacet(contractAddress, client)
			if contractErr != nil {
				return contractErr
			}

			session := TerminusDiamondCutFacetTransactorSession{
				Contract:     &contract.TerminusDiamondCutFacetTransactor,
				TransactOpts: *transactionOpts,
			}

			transaction, transactionErr := session.DiamondCut(
				diamondCut,
				init,
				calldata,
			)
			if transactionErr != nil {
				return transactionErr
			}

			cmd.Printf("Transaction hash: %s\n", transaction.Hash().Hex())
			if transactionOpts.NoSend {
				estimationMessage := ethereum.CallMsg{
					From: transactionOpts.From,
					To:   &contractAddress,
					Data: transaction.Data(),
				}

				gasEstimationCtx, cancelGasEstimationCtx := NewChainContext(timeout)
				defer cancelGasEstimationCtx()

				gasEstimate, gasEstimateErr := client.EstimateGas(gasEstimationCtx, estimationMessage)
				if gasEstimateErr != nil {
					return gasEstimateErr
				}

				transactionBinary, transactionBinaryErr := transaction.MarshalBinary()
				if transactionBinaryErr != nil {
					return transactionBinaryErr
				}
				transactionBinaryHex := hex.EncodeToString(transactionBinary)

				cmd.Printf("Transaction: %s\nEstimated gas: %d\n", transactionBinaryHex, gasEstimate)
			} else {
				cmd.Println("Transaction submitted")
			}

			return nil
		},
	}

	cmd.Flags().StringVar(&rpc, "rpc", "", "URL of the JSONRPC API to use")
	cmd.Flags().StringVar(&keyfile, "keyfile", "", "Path to the keystore file to use for the transaction")
	cmd.Flags().StringVar(&password, "password", "", "Password to use to unlock the keystore (if not specified, you will be prompted for the password when the command executes)")
	cmd.Flags().StringVar(&nonce, "nonce", "", "Nonce to use for the transaction")
	cmd.Flags().StringVar(&value, "value", "", "Value to send with the transaction")
	cmd.Flags().StringVar(&gasPrice, "gas-price", "", "Gas price to use for the transaction")
	cmd.Flags().StringVar(&maxFeePerGas, "max-fee-per-gas", "", "Maximum fee per gas to use for the (EIP-1559) transaction")
	cmd.Flags().StringVar(&maxPriorityFeePerGas, "max-priority-fee-per-gas", "", "Maximum priority fee per gas to use for the (EIP-1559) transaction")
	cmd.Flags().Uint64Var(&gasLimit, "gas-limit", 0, "Gas limit for the transaction")
	cmd.Flags().BoolVar(&simulate, "simulate", false, "Simulate the transaction without sending it")
	cmd.Flags().UintVar(&timeout, "timeout", 60, "Timeout (in seconds) for interactions with the JSONRPC API")
	cmd.Flags().StringVar(&contractAddressRaw, "contract", "", "Address of the contract to interact with")

	cmd.Flags().StringVar(&diamondCutRaw, "diamond-cut", "", "diamond-cut argument ([]IDiamondCutFacetCut)")
	cmd.Flags().StringVar(&initRaw, "init", "", "init argument (common.Address)")
	cmd.Flags().StringVar(&calldataRaw, "calldata", "", "calldata argument ([]byte)")

	return cmd
}

var ErrNoRPCURL error = errors.New("no RPC URL provided -- please pass an RPC URL from the command line or set the TERMINUS_DIAMOND_CUT_FACET_RPC_URL environment variable")

// Generates an Ethereum client to the JSONRPC API at the given URL. If rpcURL is empty, then it
// attempts to read the RPC URL from the TERMINUS_DIAMOND_CUT_FACET_RPC_URL environment variable. If that is empty,
// too, then it returns an error.
func NewClient(rpcURL string) (*ethclient.Client, error) {
	if rpcURL == "" {
		rpcURL = os.Getenv("TERMINUS_DIAMOND_CUT_FACET_RPC_URL")
	}

	if rpcURL == "" {
		return nil, ErrNoRPCURL
	}

	client, err := ethclient.Dial(rpcURL)
	return client, err
}

// Creates a new context to be used when interacting with the chain client.
func NewChainContext(timeout uint) (context.Context, context.CancelFunc) {
	baseCtx := context.Background()
	parsedTimeout := time.Duration(timeout) * time.Second
	ctx, cancel := context.WithTimeout(baseCtx, parsedTimeout)
	return ctx, cancel
}

// Unlocks a key from a keystore (byte contents of a keystore file) with the given password.
func UnlockKeystore(keystoreData []byte, password string) (*keystore.Key, error) {
	key, err := keystore.DecryptKey(keystoreData, password)
	return key, err
}

// Loads a key from file, prompting the user for the password if it is not provided as a function argument.
func KeyFromFile(keystoreFile string, password string) (*keystore.Key, error) {
	var emptyKey *keystore.Key
	keystoreContent, readErr := os.ReadFile(keystoreFile)
	if readErr != nil {
		return emptyKey, readErr
	}

	// If password is "", prompt user for password.
	if password == "" {
		fmt.Printf("Please provide a password for keystore (%s): ", keystoreFile)
		passwordRaw, inputErr := term.ReadPassword(int(os.Stdin.Fd()))
		if inputErr != nil {
			return emptyKey, fmt.Errorf("error reading password: %s", inputErr.Error())
		}
		fmt.Print("\n")
		password = string(passwordRaw)
	}

	key, err := UnlockKeystore(keystoreContent, password)
	return key, err
}

// This method is used to set the parameters on a view call from command line arguments (represented mostly as
// strings).
func SetCallParametersFromArgs(opts *bind.CallOpts, pending bool, fromAddress, blockNumber string) {
	if pending {
		opts.Pending = true
	}

	if fromAddress != "" {
		opts.From = common.HexToAddress(fromAddress)
	}

	if blockNumber != "" {
		opts.BlockNumber = new(big.Int)
		opts.BlockNumber.SetString(blockNumber, 0)
	}
}

// This method is used to set the parameters on a transaction from command line arguments (represented mostly as
// strings).
func SetTransactionParametersFromArgs(opts *bind.TransactOpts, nonce, value, gasPrice, maxFeePerGas, maxPriorityFeePerGas string, gasLimit uint64, noSend bool) {
	if nonce != "" {
		opts.Nonce = new(big.Int)
		opts.Nonce.SetString(nonce, 0)
	}

	if value != "" {
		opts.Value = new(big.Int)
		opts.Value.SetString(value, 0)
	}

	if gasPrice != "" {
		opts.GasPrice = new(big.Int)
		opts.GasPrice.SetString(gasPrice, 0)
	}

	if maxFeePerGas != "" {
		opts.GasFeeCap = new(big.Int)
		opts.GasFeeCap.SetString(maxFeePerGas, 0)
	}

	if maxPriorityFeePerGas != "" {
		opts.GasTipCap = new(big.Int)
		opts.GasTipCap.SetString(maxPriorityFeePerGas, 0)
	}

	if gasLimit != 0 {
		opts.GasLimit = gasLimit
	}

	opts.NoSend = noSend
}

func CreateTerminusDiamondCutFacetCommand() *cobra.Command {
	cmd := &cobra.Command{
		Use:   "terminus-diamond-cut-facet",
		Short: "Interact with the TerminusDiamondCutFacet contract",
		Run: func(cmd *cobra.Command, args []string) {
			cmd.Help()
		},
	}

	cmd.SetOut(os.Stdout)

	DeployGroup := &cobra.Group{
		ID: "deploy", Title: "Commands which deploy contracts",
	}
	cmd.AddGroup(DeployGroup)
	ViewGroup := &cobra.Group{
		ID: "view", Title: "Commands which view contract state",
	}
	TransactGroup := &cobra.Group{
		ID: "transact", Title: "Commands which submit transactions",
	}
	cmd.AddGroup(ViewGroup, TransactGroup)

	cmdDeployTerminusDiamondCutFacet := CreateTerminusDiamondCutFacetDeploymentCommand()
	cmdDeployTerminusDiamondCutFacet.GroupID = DeployGroup.ID
	cmd.AddCommand(cmdDeployTerminusDiamondCutFacet)

	cmdTransactDiamondCut := CreateDiamondCutCommand()
	cmdTransactDiamondCut.GroupID = TransactGroup.ID
	cmd.AddCommand(cmdTransactDiamondCut)

	return cmd
}
