// This file was generated by seer: https://github.com/moonstream-to/seer.
// seer version: 0.1.3
// seer command: seer evm generate --package Staking2 --cli --struct Staking2 --output bindings/Staking2/Staking2.go
// Code generated - DO NOT EDIT.
// This file is a generated binding and any manual changes will be lost.

package Staking2

import (
	"errors"
	"math/big"
	"strings"

	"context"

	ethereum "github.com/ethereum/go-ethereum"
	"github.com/ethereum/go-ethereum/accounts/abi"
	"github.com/ethereum/go-ethereum/accounts/abi/bind"
	"github.com/ethereum/go-ethereum/common"
	"github.com/ethereum/go-ethereum/core/types"
	"github.com/ethereum/go-ethereum/event"

	// Reference imports to suppress errors if they are not otherwise used.
	"encoding/hex"
	"fmt"
	"os"
	"time"

	"github.com/ethereum/go-ethereum/accounts/keystore"
	"github.com/ethereum/go-ethereum/ethclient"
	"github.com/spf13/cobra"
	"golang.org/x/term"
)

var (
	_ = errors.New
	_ = big.NewInt
	_ = strings.NewReader
	_ = ethereum.NotFound
	_ = bind.Bind
	_ = common.Big1
	_ = types.BloomLookup
	_ = event.NewSubscription
	_ = abi.ConvertType
)

// Staking2MetaData contains all meta data concerning the Staking2 contract.
var Staking2MetaData = &bind.MetaData{
	ABI: "[{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"tokenAddress\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"receiver\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"duration\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Deposited\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"depositId\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"receiver\",\"type\":\"address\"}],\"name\":\"Withdrawn\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_tokenAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_duration\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_receiver\",\"type\":\"address\"}],\"name\":\"deposit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"depositsOf\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"tokenAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint64\",\"name\":\"start\",\"type\":\"uint64\"},{\"internalType\":\"uint64\",\"name\":\"end\",\"type\":\"uint64\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"}],\"name\":\"getDepositCount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_depositId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_receiver\",\"type\":\"address\"}],\"name\":\"withdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]",
	Bin: "0x608060405234801561001057600080fd5b50611244806100206000396000f3fe608060405234801561001057600080fd5b506004361061004b5760003560e01c8062f714ce1461005057806313fcaf541461006c5780638b6099db1461009c578063ae22192e146100b8575b600080fd5b61006a60048036038101906100659190610b86565b6100eb565b005b61008660048036038101906100819190610bc6565b6106e2565b6040516100939190610c02565b60405180910390f35b6100b660048036038101906100b19190610c1d565b61072d565b005b6100d260048036038101906100cd9190610c84565b610a58565b6040516100e29493929190610cf6565b60405180910390f35b600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff160361015a576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161015190610dbe565b60405180910390fd5b60008060003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000208054905090508083106101e2576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016101d990610e50565b60405180910390fd5b60008060003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020848154811061023457610233610e70565b5b90600052602060002090600302016040518060800160405290816000820160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001600182015481526020016002820160009054906101000a900467ffffffffffffffff1667ffffffffffffffff1667ffffffffffffffff1681526020016002820160089054906101000a900467ffffffffffffffff1667ffffffffffffffff1667ffffffffffffffff16815250509050806060015167ffffffffffffffff16421015610364576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161035b90610f37565b60405180910390fd5b6000803373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206001836103af9190610f86565b815481106103c0576103bf610e70565b5b90600052602060002090600302016000803373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020858154811061041e5761041d610e70565b5b90600052602060002090600302016000820160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff168160000160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550600182015481600101556002820160009054906101000a900467ffffffffffffffff168160020160006101000a81548167ffffffffffffffff021916908367ffffffffffffffff1602179055506002820160089054906101000a900467ffffffffffffffff168160020160086101000a81548167ffffffffffffffff021916908367ffffffffffffffff1602179055509050506000803373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002080548061057457610573610fba565b5b6001900381819060005260206000209060030201600080820160006101000a81549073ffffffffffffffffffffffffffffffffffffffff021916905560018201600090556002820160006101000a81549067ffffffffffffffff02191690556002820160086101000a81549067ffffffffffffffff0219169055505090556000816000015190508073ffffffffffffffffffffffffffffffffffffffff166323b872dd308685602001516040518463ffffffff1660e01b815260040161063c93929190610fe9565b6020604051808303816000875af115801561065b573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061067f9190611058565b508373ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16867fb524bace85e4ce0f8da306e32f39263c5724780ca00b7551c051c8e3dc36adaf60405160405180910390a45050505050565b60008060008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020805490509050919050565b600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff160361079c576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610793906110f7565b60405180910390fd5b600083116107df576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016107d690611189565b60405180910390fd5b60008490508073ffffffffffffffffffffffffffffffffffffffff166323b872dd3330876040518463ffffffff1660e01b815260040161082193929190610fe9565b6020604051808303816000875af1158015610840573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906108649190611058565b506000808373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060405180608001604052808773ffffffffffffffffffffffffffffffffffffffff1681526020018681526020014267ffffffffffffffff16815260200185426108ec91906111a9565b67ffffffffffffffff16815250908060018154018082558091505060019003906000526020600020906003020160009091909190915060008201518160000160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055506020820151816001015560408201518160020160006101000a81548167ffffffffffffffff021916908367ffffffffffffffff16021790555060608201518160020160086101000a81548167ffffffffffffffff021916908367ffffffffffffffff16021790555050503373ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff168673ffffffffffffffffffffffffffffffffffffffff167fb045190548dadae679cfe9e337437613ca6dd73efdf984f75e56f152ccee22f08688604051610a499291906111e5565b60405180910390a45050505050565b60006020528160005260406000208181548110610a7457600080fd5b9060005260206000209060030201600091509150508060000160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16908060010154908060020160009054906101000a900467ffffffffffffffff16908060020160089054906101000a900467ffffffffffffffff16905084565b600080fd5b6000819050919050565b610b0581610af2565b8114610b1057600080fd5b50565b600081359050610b2281610afc565b92915050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000610b5382610b28565b9050919050565b610b6381610b48565b8114610b6e57600080fd5b50565b600081359050610b8081610b5a565b92915050565b60008060408385031215610b9d57610b9c610aed565b5b6000610bab85828601610b13565b9250506020610bbc85828601610b71565b9150509250929050565b600060208284031215610bdc57610bdb610aed565b5b6000610bea84828501610b71565b91505092915050565b610bfc81610af2565b82525050565b6000602082019050610c176000830184610bf3565b92915050565b60008060008060808587031215610c3757610c36610aed565b5b6000610c4587828801610b71565b9450506020610c5687828801610b13565b9350506040610c6787828801610b13565b9250506060610c7887828801610b71565b91505092959194509250565b60008060408385031215610c9b57610c9a610aed565b5b6000610ca985828601610b71565b9250506020610cba85828601610b13565b9150509250929050565b610ccd81610b48565b82525050565b600067ffffffffffffffff82169050919050565b610cf081610cd3565b82525050565b6000608082019050610d0b6000830187610cc4565b610d186020830186610bf3565b610d256040830185610ce7565b610d326060830184610ce7565b95945050505050565b600082825260208201905092915050565b7f5374616b696e672e77697468647261773a2072656365697665722063616e6e6f60008201527f74206265207a65726f2061646472657373000000000000000000000000000000602082015250565b6000610da8603183610d3b565b9150610db382610d4c565b604082019050919050565b60006020820190508181036000830152610dd781610d9b565b9050919050565b7f5374616b696e672e77697468647261773a206465706f73697420646f6573206e60008201527f6f74206578697374000000000000000000000000000000000000000000000000602082015250565b6000610e3a602883610d3b565b9150610e4582610dde565b604082019050919050565b60006020820190508181036000830152610e6981610e2d565b9050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b7f5374616b696e672e77697468647261773a20544f4f20534f4f4e2120594f552060008201527f48415645204157414b454e4544204d4520544f4f20534f4f4e2c20455845435560208201527f5455532100000000000000000000000000000000000000000000000000000000604082015250565b6000610f21604483610d3b565b9150610f2c82610e9f565b606082019050919050565b60006020820190508181036000830152610f5081610f14565b9050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b6000610f9182610af2565b9150610f9c83610af2565b9250828203905081811115610fb457610fb3610f57565b5b92915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603160045260246000fd5b6000606082019050610ffe6000830186610cc4565b61100b6020830185610cc4565b6110186040830184610bf3565b949350505050565b60008115159050919050565b61103581611020565b811461104057600080fd5b50565b6000815190506110528161102c565b92915050565b60006020828403121561106e5761106d610aed565b5b600061107c84828501611043565b91505092915050565b7f5374616b696e672e6465706f7369743a2072656365697665722063616e6e6f7460008201527f206265207a65726f206164647265737300000000000000000000000000000000602082015250565b60006110e1603083610d3b565b91506110ec82611085565b604082019050919050565b60006020820190508181036000830152611110816110d4565b9050919050565b7f5374616b696e672e6465706f7369743a2063616e6e6f74206465706f7369742060008201527f3000000000000000000000000000000000000000000000000000000000000000602082015250565b6000611173602183610d3b565b915061117e82611117565b604082019050919050565b600060208201905081810360008301526111a281611166565b9050919050565b60006111b482610cd3565b91506111bf83610cd3565b9250828201905067ffffffffffffffff8111156111df576111de610f57565b5b92915050565b60006040820190506111fa6000830185610bf3565b6112076020830184610bf3565b939250505056fea26469706673582212207c50e8ba2a2c393dc6755ac805446bd8ce1fda2c911cec562ab562fb7d25fbcf64736f6c63430008180033",
}

// Staking2ABI is the input ABI used to generate the binding from.
// Deprecated: Use Staking2MetaData.ABI instead.
var Staking2ABI = Staking2MetaData.ABI

// Staking2Bin is the compiled bytecode used for deploying new contracts.
// Deprecated: Use Staking2MetaData.Bin instead.
var Staking2Bin = Staking2MetaData.Bin

// DeployStaking2 deploys a new Ethereum contract, binding an instance of Staking2 to it.
func DeployStaking2(auth *bind.TransactOpts, backend bind.ContractBackend) (common.Address, *types.Transaction, *Staking2, error) {
	parsed, err := Staking2MetaData.GetAbi()
	if err != nil {
		return common.Address{}, nil, nil, err
	}
	if parsed == nil {
		return common.Address{}, nil, nil, errors.New("GetABI returned nil")
	}

	address, tx, contract, err := bind.DeployContract(auth, *parsed, common.FromHex(Staking2Bin), backend)
	if err != nil {
		return common.Address{}, nil, nil, err
	}
	return address, tx, &Staking2{Staking2Caller: Staking2Caller{contract: contract}, Staking2Transactor: Staking2Transactor{contract: contract}, Staking2Filterer: Staking2Filterer{contract: contract}}, nil
}

// Staking2 is an auto generated Go binding around an Ethereum contract.
type Staking2 struct {
	Staking2Caller     // Read-only binding to the contract
	Staking2Transactor // Write-only binding to the contract
	Staking2Filterer   // Log filterer for contract events
}

// Staking2Caller is an auto generated read-only Go binding around an Ethereum contract.
type Staking2Caller struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// Staking2Transactor is an auto generated write-only Go binding around an Ethereum contract.
type Staking2Transactor struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// Staking2Filterer is an auto generated log filtering Go binding around an Ethereum contract events.
type Staking2Filterer struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// Staking2Session is an auto generated Go binding around an Ethereum contract,
// with pre-set call and transact options.
type Staking2Session struct {
	Contract     *Staking2         // Generic contract binding to set the session for
	CallOpts     bind.CallOpts     // Call options to use throughout this session
	TransactOpts bind.TransactOpts // Transaction auth options to use throughout this session
}

// Staking2CallerSession is an auto generated read-only Go binding around an Ethereum contract,
// with pre-set call options.
type Staking2CallerSession struct {
	Contract *Staking2Caller // Generic contract caller binding to set the session for
	CallOpts bind.CallOpts   // Call options to use throughout this session
}

// Staking2TransactorSession is an auto generated write-only Go binding around an Ethereum contract,
// with pre-set transact options.
type Staking2TransactorSession struct {
	Contract     *Staking2Transactor // Generic contract transactor binding to set the session for
	TransactOpts bind.TransactOpts   // Transaction auth options to use throughout this session
}

// Staking2Raw is an auto generated low-level Go binding around an Ethereum contract.
type Staking2Raw struct {
	Contract *Staking2 // Generic contract binding to access the raw methods on
}

// Staking2CallerRaw is an auto generated low-level read-only Go binding around an Ethereum contract.
type Staking2CallerRaw struct {
	Contract *Staking2Caller // Generic read-only contract binding to access the raw methods on
}

// Staking2TransactorRaw is an auto generated low-level write-only Go binding around an Ethereum contract.
type Staking2TransactorRaw struct {
	Contract *Staking2Transactor // Generic write-only contract binding to access the raw methods on
}

// NewStaking2 creates a new instance of Staking2, bound to a specific deployed contract.
func NewStaking2(address common.Address, backend bind.ContractBackend) (*Staking2, error) {
	contract, err := bindStaking2(address, backend, backend, backend)
	if err != nil {
		return nil, err
	}
	return &Staking2{Staking2Caller: Staking2Caller{contract: contract}, Staking2Transactor: Staking2Transactor{contract: contract}, Staking2Filterer: Staking2Filterer{contract: contract}}, nil
}

// NewStaking2Caller creates a new read-only instance of Staking2, bound to a specific deployed contract.
func NewStaking2Caller(address common.Address, caller bind.ContractCaller) (*Staking2Caller, error) {
	contract, err := bindStaking2(address, caller, nil, nil)
	if err != nil {
		return nil, err
	}
	return &Staking2Caller{contract: contract}, nil
}

// NewStaking2Transactor creates a new write-only instance of Staking2, bound to a specific deployed contract.
func NewStaking2Transactor(address common.Address, transactor bind.ContractTransactor) (*Staking2Transactor, error) {
	contract, err := bindStaking2(address, nil, transactor, nil)
	if err != nil {
		return nil, err
	}
	return &Staking2Transactor{contract: contract}, nil
}

// NewStaking2Filterer creates a new log filterer instance of Staking2, bound to a specific deployed contract.
func NewStaking2Filterer(address common.Address, filterer bind.ContractFilterer) (*Staking2Filterer, error) {
	contract, err := bindStaking2(address, nil, nil, filterer)
	if err != nil {
		return nil, err
	}
	return &Staking2Filterer{contract: contract}, nil
}

// bindStaking2 binds a generic wrapper to an already deployed contract.
func bindStaking2(address common.Address, caller bind.ContractCaller, transactor bind.ContractTransactor, filterer bind.ContractFilterer) (*bind.BoundContract, error) {
	parsed, err := Staking2MetaData.GetAbi()
	if err != nil {
		return nil, err
	}
	return bind.NewBoundContract(address, *parsed, caller, transactor, filterer), nil
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_Staking2 *Staking2Raw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _Staking2.Contract.Staking2Caller.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_Staking2 *Staking2Raw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _Staking2.Contract.Staking2Transactor.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_Staking2 *Staking2Raw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _Staking2.Contract.Staking2Transactor.contract.Transact(opts, method, params...)
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_Staking2 *Staking2CallerRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _Staking2.Contract.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_Staking2 *Staking2TransactorRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _Staking2.Contract.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_Staking2 *Staking2TransactorRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _Staking2.Contract.contract.Transact(opts, method, params...)
}

// DepositsOf is a free data retrieval call binding the contract method 0xae22192e.
//
// Solidity: function depositsOf(address , uint256 ) view returns(address tokenAddress, uint256 amount, uint64 start, uint64 end)
func (_Staking2 *Staking2Caller) DepositsOf(opts *bind.CallOpts, arg0 common.Address, arg1 *big.Int) (struct {
	TokenAddress common.Address
	Amount       *big.Int
	Start        uint64
	End          uint64
}, error) {
	var out []interface{}
	err := _Staking2.contract.Call(opts, &out, "depositsOf", arg0, arg1)

	outstruct := new(struct {
		TokenAddress common.Address
		Amount       *big.Int
		Start        uint64
		End          uint64
	})
	if err != nil {
		return *outstruct, err
	}

	outstruct.TokenAddress = *abi.ConvertType(out[0], new(common.Address)).(*common.Address)
	outstruct.Amount = *abi.ConvertType(out[1], new(*big.Int)).(**big.Int)
	outstruct.Start = *abi.ConvertType(out[2], new(uint64)).(*uint64)
	outstruct.End = *abi.ConvertType(out[3], new(uint64)).(*uint64)

	return *outstruct, err

}

// DepositsOf is a free data retrieval call binding the contract method 0xae22192e.
//
// Solidity: function depositsOf(address , uint256 ) view returns(address tokenAddress, uint256 amount, uint64 start, uint64 end)
func (_Staking2 *Staking2Session) DepositsOf(arg0 common.Address, arg1 *big.Int) (struct {
	TokenAddress common.Address
	Amount       *big.Int
	Start        uint64
	End          uint64
}, error) {
	return _Staking2.Contract.DepositsOf(&_Staking2.CallOpts, arg0, arg1)
}

// DepositsOf is a free data retrieval call binding the contract method 0xae22192e.
//
// Solidity: function depositsOf(address , uint256 ) view returns(address tokenAddress, uint256 amount, uint64 start, uint64 end)
func (_Staking2 *Staking2CallerSession) DepositsOf(arg0 common.Address, arg1 *big.Int) (struct {
	TokenAddress common.Address
	Amount       *big.Int
	Start        uint64
	End          uint64
}, error) {
	return _Staking2.Contract.DepositsOf(&_Staking2.CallOpts, arg0, arg1)
}

// GetDepositCount is a free data retrieval call binding the contract method 0x13fcaf54.
//
// Solidity: function getDepositCount(address user) view returns(uint256)
func (_Staking2 *Staking2Caller) GetDepositCount(opts *bind.CallOpts, user common.Address) (*big.Int, error) {
	var out []interface{}
	err := _Staking2.contract.Call(opts, &out, "getDepositCount", user)

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// GetDepositCount is a free data retrieval call binding the contract method 0x13fcaf54.
//
// Solidity: function getDepositCount(address user) view returns(uint256)
func (_Staking2 *Staking2Session) GetDepositCount(user common.Address) (*big.Int, error) {
	return _Staking2.Contract.GetDepositCount(&_Staking2.CallOpts, user)
}

// GetDepositCount is a free data retrieval call binding the contract method 0x13fcaf54.
//
// Solidity: function getDepositCount(address user) view returns(uint256)
func (_Staking2 *Staking2CallerSession) GetDepositCount(user common.Address) (*big.Int, error) {
	return _Staking2.Contract.GetDepositCount(&_Staking2.CallOpts, user)
}

// Deposit is a paid mutator transaction binding the contract method 0x8b6099db.
//
// Solidity: function deposit(address _tokenAddress, uint256 _amount, uint256 _duration, address _receiver) returns()
func (_Staking2 *Staking2Transactor) Deposit(opts *bind.TransactOpts, _tokenAddress common.Address, _amount *big.Int, _duration *big.Int, _receiver common.Address) (*types.Transaction, error) {
	return _Staking2.contract.Transact(opts, "deposit", _tokenAddress, _amount, _duration, _receiver)
}

// Deposit is a paid mutator transaction binding the contract method 0x8b6099db.
//
// Solidity: function deposit(address _tokenAddress, uint256 _amount, uint256 _duration, address _receiver) returns()
func (_Staking2 *Staking2Session) Deposit(_tokenAddress common.Address, _amount *big.Int, _duration *big.Int, _receiver common.Address) (*types.Transaction, error) {
	return _Staking2.Contract.Deposit(&_Staking2.TransactOpts, _tokenAddress, _amount, _duration, _receiver)
}

// Deposit is a paid mutator transaction binding the contract method 0x8b6099db.
//
// Solidity: function deposit(address _tokenAddress, uint256 _amount, uint256 _duration, address _receiver) returns()
func (_Staking2 *Staking2TransactorSession) Deposit(_tokenAddress common.Address, _amount *big.Int, _duration *big.Int, _receiver common.Address) (*types.Transaction, error) {
	return _Staking2.Contract.Deposit(&_Staking2.TransactOpts, _tokenAddress, _amount, _duration, _receiver)
}

// Withdraw is a paid mutator transaction binding the contract method 0x00f714ce.
//
// Solidity: function withdraw(uint256 _depositId, address _receiver) returns()
func (_Staking2 *Staking2Transactor) Withdraw(opts *bind.TransactOpts, _depositId *big.Int, _receiver common.Address) (*types.Transaction, error) {
	return _Staking2.contract.Transact(opts, "withdraw", _depositId, _receiver)
}

// Withdraw is a paid mutator transaction binding the contract method 0x00f714ce.
//
// Solidity: function withdraw(uint256 _depositId, address _receiver) returns()
func (_Staking2 *Staking2Session) Withdraw(_depositId *big.Int, _receiver common.Address) (*types.Transaction, error) {
	return _Staking2.Contract.Withdraw(&_Staking2.TransactOpts, _depositId, _receiver)
}

// Withdraw is a paid mutator transaction binding the contract method 0x00f714ce.
//
// Solidity: function withdraw(uint256 _depositId, address _receiver) returns()
func (_Staking2 *Staking2TransactorSession) Withdraw(_depositId *big.Int, _receiver common.Address) (*types.Transaction, error) {
	return _Staking2.Contract.Withdraw(&_Staking2.TransactOpts, _depositId, _receiver)
}

// Staking2DepositedIterator is returned from FilterDeposited and is used to iterate over the raw logs and unpacked data for Deposited events raised by the Staking2 contract.
type Staking2DepositedIterator struct {
	Event *Staking2Deposited // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *Staking2DepositedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(Staking2Deposited)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(Staking2Deposited)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *Staking2DepositedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *Staking2DepositedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// Staking2Deposited represents a Deposited event raised by the Staking2 contract.
type Staking2Deposited struct {
	TokenAddress common.Address
	Receiver     common.Address
	From         common.Address
	Duration     *big.Int
	Amount       *big.Int
	Raw          types.Log // Blockchain specific contextual infos
}

// FilterDeposited is a free log retrieval operation binding the contract event 0xb045190548dadae679cfe9e337437613ca6dd73efdf984f75e56f152ccee22f0.
//
// Solidity: event Deposited(address indexed tokenAddress, address indexed receiver, address indexed from, uint256 duration, uint256 amount)
func (_Staking2 *Staking2Filterer) FilterDeposited(opts *bind.FilterOpts, tokenAddress []common.Address, receiver []common.Address, from []common.Address) (*Staking2DepositedIterator, error) {

	var tokenAddressRule []interface{}
	for _, tokenAddressItem := range tokenAddress {
		tokenAddressRule = append(tokenAddressRule, tokenAddressItem)
	}
	var receiverRule []interface{}
	for _, receiverItem := range receiver {
		receiverRule = append(receiverRule, receiverItem)
	}
	var fromRule []interface{}
	for _, fromItem := range from {
		fromRule = append(fromRule, fromItem)
	}

	logs, sub, err := _Staking2.contract.FilterLogs(opts, "Deposited", tokenAddressRule, receiverRule, fromRule)
	if err != nil {
		return nil, err
	}
	return &Staking2DepositedIterator{contract: _Staking2.contract, event: "Deposited", logs: logs, sub: sub}, nil
}

// WatchDeposited is a free log subscription operation binding the contract event 0xb045190548dadae679cfe9e337437613ca6dd73efdf984f75e56f152ccee22f0.
//
// Solidity: event Deposited(address indexed tokenAddress, address indexed receiver, address indexed from, uint256 duration, uint256 amount)
func (_Staking2 *Staking2Filterer) WatchDeposited(opts *bind.WatchOpts, sink chan<- *Staking2Deposited, tokenAddress []common.Address, receiver []common.Address, from []common.Address) (event.Subscription, error) {

	var tokenAddressRule []interface{}
	for _, tokenAddressItem := range tokenAddress {
		tokenAddressRule = append(tokenAddressRule, tokenAddressItem)
	}
	var receiverRule []interface{}
	for _, receiverItem := range receiver {
		receiverRule = append(receiverRule, receiverItem)
	}
	var fromRule []interface{}
	for _, fromItem := range from {
		fromRule = append(fromRule, fromItem)
	}

	logs, sub, err := _Staking2.contract.WatchLogs(opts, "Deposited", tokenAddressRule, receiverRule, fromRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(Staking2Deposited)
				if err := _Staking2.contract.UnpackLog(event, "Deposited", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseDeposited is a log parse operation binding the contract event 0xb045190548dadae679cfe9e337437613ca6dd73efdf984f75e56f152ccee22f0.
//
// Solidity: event Deposited(address indexed tokenAddress, address indexed receiver, address indexed from, uint256 duration, uint256 amount)
func (_Staking2 *Staking2Filterer) ParseDeposited(log types.Log) (*Staking2Deposited, error) {
	event := new(Staking2Deposited)
	if err := _Staking2.contract.UnpackLog(event, "Deposited", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// Staking2WithdrawnIterator is returned from FilterWithdrawn and is used to iterate over the raw logs and unpacked data for Withdrawn events raised by the Staking2 contract.
type Staking2WithdrawnIterator struct {
	Event *Staking2Withdrawn // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *Staking2WithdrawnIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(Staking2Withdrawn)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(Staking2Withdrawn)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *Staking2WithdrawnIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *Staking2WithdrawnIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// Staking2Withdrawn represents a Withdrawn event raised by the Staking2 contract.
type Staking2Withdrawn struct {
	DepositId *big.Int
	From      common.Address
	Receiver  common.Address
	Raw       types.Log // Blockchain specific contextual infos
}

// FilterWithdrawn is a free log retrieval operation binding the contract event 0xb524bace85e4ce0f8da306e32f39263c5724780ca00b7551c051c8e3dc36adaf.
//
// Solidity: event Withdrawn(uint256 indexed depositId, address indexed from, address indexed receiver)
func (_Staking2 *Staking2Filterer) FilterWithdrawn(opts *bind.FilterOpts, depositId []*big.Int, from []common.Address, receiver []common.Address) (*Staking2WithdrawnIterator, error) {

	var depositIdRule []interface{}
	for _, depositIdItem := range depositId {
		depositIdRule = append(depositIdRule, depositIdItem)
	}
	var fromRule []interface{}
	for _, fromItem := range from {
		fromRule = append(fromRule, fromItem)
	}
	var receiverRule []interface{}
	for _, receiverItem := range receiver {
		receiverRule = append(receiverRule, receiverItem)
	}

	logs, sub, err := _Staking2.contract.FilterLogs(opts, "Withdrawn", depositIdRule, fromRule, receiverRule)
	if err != nil {
		return nil, err
	}
	return &Staking2WithdrawnIterator{contract: _Staking2.contract, event: "Withdrawn", logs: logs, sub: sub}, nil
}

// WatchWithdrawn is a free log subscription operation binding the contract event 0xb524bace85e4ce0f8da306e32f39263c5724780ca00b7551c051c8e3dc36adaf.
//
// Solidity: event Withdrawn(uint256 indexed depositId, address indexed from, address indexed receiver)
func (_Staking2 *Staking2Filterer) WatchWithdrawn(opts *bind.WatchOpts, sink chan<- *Staking2Withdrawn, depositId []*big.Int, from []common.Address, receiver []common.Address) (event.Subscription, error) {

	var depositIdRule []interface{}
	for _, depositIdItem := range depositId {
		depositIdRule = append(depositIdRule, depositIdItem)
	}
	var fromRule []interface{}
	for _, fromItem := range from {
		fromRule = append(fromRule, fromItem)
	}
	var receiverRule []interface{}
	for _, receiverItem := range receiver {
		receiverRule = append(receiverRule, receiverItem)
	}

	logs, sub, err := _Staking2.contract.WatchLogs(opts, "Withdrawn", depositIdRule, fromRule, receiverRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(Staking2Withdrawn)
				if err := _Staking2.contract.UnpackLog(event, "Withdrawn", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseWithdrawn is a log parse operation binding the contract event 0xb524bace85e4ce0f8da306e32f39263c5724780ca00b7551c051c8e3dc36adaf.
//
// Solidity: event Withdrawn(uint256 indexed depositId, address indexed from, address indexed receiver)
func (_Staking2 *Staking2Filterer) ParseWithdrawn(log types.Log) (*Staking2Withdrawn, error) {
	event := new(Staking2Withdrawn)
	if err := _Staking2.contract.UnpackLog(event, "Withdrawn", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

func CreateStaking2DeploymentCommand() *cobra.Command {
	var keyfile, nonce, password, value, gasPrice, maxFeePerGas, maxPriorityFeePerGas, rpc string
	var gasLimit uint64
	var simulate bool
	var timeout uint

	cmd := &cobra.Command{
		Use:   "deploy",
		Short: "Deploy a new Staking2 contract",
		PreRunE: func(cmd *cobra.Command, args []string) error {
			if keyfile == "" {
				return fmt.Errorf("--keystore not specified (this should be a path to an Ethereum account keystore file)")
			}

			return nil
		},
		RunE: func(cmd *cobra.Command, args []string) error {
			client, clientErr := NewClient(rpc)
			if clientErr != nil {
				return clientErr
			}

			key, keyErr := KeyFromFile(keyfile, password)
			if keyErr != nil {
				return keyErr
			}

			chainIDCtx, cancelChainIDCtx := NewChainContext(timeout)
			defer cancelChainIDCtx()
			chainID, chainIDErr := client.ChainID(chainIDCtx)
			if chainIDErr != nil {
				return chainIDErr
			}

			transactionOpts, transactionOptsErr := bind.NewKeyedTransactorWithChainID(key.PrivateKey, chainID)
			if transactionOptsErr != nil {
				return transactionOptsErr
			}

			SetTransactionParametersFromArgs(transactionOpts, nonce, value, gasPrice, maxFeePerGas, maxPriorityFeePerGas, gasLimit, simulate)

			address, deploymentTransaction, _, deploymentErr := DeployStaking2(
				transactionOpts,
				client,
			)
			if deploymentErr != nil {
				return deploymentErr
			}

			cmd.Printf("Transaction hash: %s\nContract address: %s\n", deploymentTransaction.Hash().Hex(), address.Hex())
			if transactionOpts.NoSend {
				estimationMessage := ethereum.CallMsg{
					From: transactionOpts.From,
					Data: deploymentTransaction.Data(),
				}

				gasEstimationCtx, cancelGasEstimationCtx := NewChainContext(timeout)
				defer cancelGasEstimationCtx()

				gasEstimate, gasEstimateErr := client.EstimateGas(gasEstimationCtx, estimationMessage)
				if gasEstimateErr != nil {
					return gasEstimateErr
				}

				transactionBinary, transactionBinaryErr := deploymentTransaction.MarshalBinary()
				if transactionBinaryErr != nil {
					return transactionBinaryErr
				}
				transactionBinaryHex := hex.EncodeToString(transactionBinary)

				cmd.Printf("Transaction: %s\nEstimated gas: %d\n", transactionBinaryHex, gasEstimate)
			} else {
				cmd.Println("Transaction submitted")
			}

			return nil
		},
	}

	cmd.Flags().StringVar(&rpc, "rpc", "", "URL of the JSONRPC API to use")
	cmd.Flags().StringVar(&keyfile, "keyfile", "", "Path to the keystore file to use for the transaction")
	cmd.Flags().StringVar(&password, "password", "", "Password to use to unlock the keystore (if not specified, you will be prompted for the password when the command executes)")
	cmd.Flags().StringVar(&nonce, "nonce", "", "Nonce to use for the transaction")
	cmd.Flags().StringVar(&value, "value", "", "Value to send with the transaction")
	cmd.Flags().StringVar(&gasPrice, "gas-price", "", "Gas price to use for the transaction")
	cmd.Flags().StringVar(&maxFeePerGas, "max-fee-per-gas", "", "Maximum fee per gas to use for the (EIP-1559) transaction")
	cmd.Flags().StringVar(&maxPriorityFeePerGas, "max-priority-fee-per-gas", "", "Maximum priority fee per gas to use for the (EIP-1559) transaction")
	cmd.Flags().Uint64Var(&gasLimit, "gas-limit", 0, "Gas limit for the transaction")
	cmd.Flags().BoolVar(&simulate, "simulate", false, "Simulate the transaction without sending it")
	cmd.Flags().UintVar(&timeout, "timeout", 60, "Timeout (in seconds) for interactions with the JSONRPC API")

	return cmd
}

func CreateDepositsOfCommand() *cobra.Command {
	var contractAddressRaw, rpc string
	var contractAddress common.Address
	var timeout uint

	var blockNumberRaw, fromAddressRaw string
	var pending bool

	var arg0 common.Address
	var arg0Raw string
	var arg1 *big.Int
	var arg1Raw string

	var capture0 struct {
		TokenAddress common.Address
		Amount       *big.Int
		Start        uint64
		End          uint64
	}

	cmd := &cobra.Command{
		Use:   "deposits-of",
		Short: "Call the DepositsOf view method on a Staking2 contract",
		PreRunE: func(cmd *cobra.Command, args []string) error {
			if contractAddressRaw == "" {
				return fmt.Errorf("--contract not specified")
			} else if !common.IsHexAddress(contractAddressRaw) {
				return fmt.Errorf("--contract is not a valid Ethereum address")
			}
			contractAddress = common.HexToAddress(contractAddressRaw)

			if arg0Raw == "" {
				return fmt.Errorf("--arg-0 argument not specified")
			} else if !common.IsHexAddress(arg0Raw) {
				return fmt.Errorf("--arg-0 argument is not a valid Ethereum address")
			}
			arg0 = common.HexToAddress(arg0Raw)

			if arg1Raw == "" {
				return fmt.Errorf("--arg-1 argument not specified")
			}
			arg1 = new(big.Int)
			arg1.SetString(arg1Raw, 0)

			return nil
		},
		RunE: func(cmd *cobra.Command, args []string) error {
			client, clientErr := NewClient(rpc)
			if clientErr != nil {
				return clientErr
			}

			contract, contractErr := NewStaking2(contractAddress, client)
			if contractErr != nil {
				return contractErr
			}

			callOpts := bind.CallOpts{}
			SetCallParametersFromArgs(&callOpts, pending, fromAddressRaw, blockNumberRaw)

			session := Staking2CallerSession{
				Contract: &contract.Staking2Caller,
				CallOpts: callOpts,
			}

			var callErr error
			capture0, callErr = session.DepositsOf(
				arg0,
				arg1,
			)
			if callErr != nil {
				return callErr
			}

			cmd.Printf("0: %v\n", capture0)

			return nil
		},
	}

	cmd.Flags().StringVar(&rpc, "rpc", "", "URL of the JSONRPC API to use")
	cmd.Flags().StringVar(&blockNumberRaw, "block", "", "Block number at which to call the view method")
	cmd.Flags().BoolVar(&pending, "pending", false, "Set this flag if it's ok to call the view method against pending state")
	cmd.Flags().UintVar(&timeout, "timeout", 60, "Timeout (in seconds) for interactions with the JSONRPC API")
	cmd.Flags().StringVar(&contractAddressRaw, "contract", "", "Address of the contract to interact with")
	cmd.Flags().StringVar(&fromAddressRaw, "from", "", "Optional address for caller of the view method")

	cmd.Flags().StringVar(&arg0Raw, "arg-0", "", "arg-0 argument")
	cmd.Flags().StringVar(&arg1Raw, "arg-1", "", "arg-1 argument")

	return cmd
}
func CreateGetDepositCountCommand() *cobra.Command {
	var contractAddressRaw, rpc string
	var contractAddress common.Address
	var timeout uint

	var blockNumberRaw, fromAddressRaw string
	var pending bool

	var user common.Address
	var userRaw string

	var capture0 *big.Int

	cmd := &cobra.Command{
		Use:   "get-deposit-count",
		Short: "Call the GetDepositCount view method on a Staking2 contract",
		PreRunE: func(cmd *cobra.Command, args []string) error {
			if contractAddressRaw == "" {
				return fmt.Errorf("--contract not specified")
			} else if !common.IsHexAddress(contractAddressRaw) {
				return fmt.Errorf("--contract is not a valid Ethereum address")
			}
			contractAddress = common.HexToAddress(contractAddressRaw)

			if userRaw == "" {
				return fmt.Errorf("--user argument not specified")
			} else if !common.IsHexAddress(userRaw) {
				return fmt.Errorf("--user argument is not a valid Ethereum address")
			}
			user = common.HexToAddress(userRaw)

			return nil
		},
		RunE: func(cmd *cobra.Command, args []string) error {
			client, clientErr := NewClient(rpc)
			if clientErr != nil {
				return clientErr
			}

			contract, contractErr := NewStaking2(contractAddress, client)
			if contractErr != nil {
				return contractErr
			}

			callOpts := bind.CallOpts{}
			SetCallParametersFromArgs(&callOpts, pending, fromAddressRaw, blockNumberRaw)

			session := Staking2CallerSession{
				Contract: &contract.Staking2Caller,
				CallOpts: callOpts,
			}

			var callErr error
			capture0, callErr = session.GetDepositCount(
				user,
			)
			if callErr != nil {
				return callErr
			}

			cmd.Printf("0: %s\n", capture0.String())

			return nil
		},
	}

	cmd.Flags().StringVar(&rpc, "rpc", "", "URL of the JSONRPC API to use")
	cmd.Flags().StringVar(&blockNumberRaw, "block", "", "Block number at which to call the view method")
	cmd.Flags().BoolVar(&pending, "pending", false, "Set this flag if it's ok to call the view method against pending state")
	cmd.Flags().UintVar(&timeout, "timeout", 60, "Timeout (in seconds) for interactions with the JSONRPC API")
	cmd.Flags().StringVar(&contractAddressRaw, "contract", "", "Address of the contract to interact with")
	cmd.Flags().StringVar(&fromAddressRaw, "from", "", "Optional address for caller of the view method")

	cmd.Flags().StringVar(&userRaw, "user", "", "user argument")

	return cmd
}

func CreateDepositCommand() *cobra.Command {
	var keyfile, nonce, password, value, gasPrice, maxFeePerGas, maxPriorityFeePerGas, rpc, contractAddressRaw string
	var gasLimit uint64
	var simulate bool
	var timeout uint
	var contractAddress common.Address

	var tokenAddress common.Address
	var tokenAddressRaw string
	var amount *big.Int
	var amountRaw string
	var duration *big.Int
	var durationRaw string
	var receiver common.Address
	var receiverRaw string

	cmd := &cobra.Command{
		Use:   "deposit",
		Short: "Execute the Deposit method on a Staking2 contract",
		PreRunE: func(cmd *cobra.Command, args []string) error {
			if keyfile == "" {
				return fmt.Errorf("--keystore not specified")
			}

			if contractAddressRaw == "" {
				return fmt.Errorf("--contract not specified")
			} else if !common.IsHexAddress(contractAddressRaw) {
				return fmt.Errorf("--contract is not a valid Ethereum address")
			}
			contractAddress = common.HexToAddress(contractAddressRaw)

			if tokenAddressRaw == "" {
				return fmt.Errorf("--token-address argument not specified")
			} else if !common.IsHexAddress(tokenAddressRaw) {
				return fmt.Errorf("--token-address argument is not a valid Ethereum address")
			}
			tokenAddress = common.HexToAddress(tokenAddressRaw)

			if amountRaw == "" {
				return fmt.Errorf("--amount argument not specified")
			}
			amount = new(big.Int)
			amount.SetString(amountRaw, 0)

			if durationRaw == "" {
				return fmt.Errorf("--duration argument not specified")
			}
			duration = new(big.Int)
			duration.SetString(durationRaw, 0)

			if receiverRaw == "" {
				return fmt.Errorf("--receiver argument not specified")
			} else if !common.IsHexAddress(receiverRaw) {
				return fmt.Errorf("--receiver argument is not a valid Ethereum address")
			}
			receiver = common.HexToAddress(receiverRaw)

			return nil
		},
		RunE: func(cmd *cobra.Command, args []string) error {
			client, clientErr := NewClient(rpc)
			if clientErr != nil {
				return clientErr
			}

			key, keyErr := KeyFromFile(keyfile, password)
			if keyErr != nil {
				return keyErr
			}

			chainIDCtx, cancelChainIDCtx := NewChainContext(timeout)
			defer cancelChainIDCtx()
			chainID, chainIDErr := client.ChainID(chainIDCtx)
			if chainIDErr != nil {
				return chainIDErr
			}

			transactionOpts, transactionOptsErr := bind.NewKeyedTransactorWithChainID(key.PrivateKey, chainID)
			if transactionOptsErr != nil {
				return transactionOptsErr
			}

			SetTransactionParametersFromArgs(transactionOpts, nonce, value, gasPrice, maxFeePerGas, maxPriorityFeePerGas, gasLimit, simulate)

			contract, contractErr := NewStaking2(contractAddress, client)
			if contractErr != nil {
				return contractErr
			}

			session := Staking2TransactorSession{
				Contract:     &contract.Staking2Transactor,
				TransactOpts: *transactionOpts,
			}

			transaction, transactionErr := session.Deposit(
				tokenAddress,
				amount,
				duration,
				receiver,
			)
			if transactionErr != nil {
				return transactionErr
			}

			cmd.Printf("Transaction hash: %s\n", transaction.Hash().Hex())
			if transactionOpts.NoSend {
				estimationMessage := ethereum.CallMsg{
					From: transactionOpts.From,
					To:   &contractAddress,
					Data: transaction.Data(),
				}

				gasEstimationCtx, cancelGasEstimationCtx := NewChainContext(timeout)
				defer cancelGasEstimationCtx()

				gasEstimate, gasEstimateErr := client.EstimateGas(gasEstimationCtx, estimationMessage)
				if gasEstimateErr != nil {
					return gasEstimateErr
				}

				transactionBinary, transactionBinaryErr := transaction.MarshalBinary()
				if transactionBinaryErr != nil {
					return transactionBinaryErr
				}
				transactionBinaryHex := hex.EncodeToString(transactionBinary)

				cmd.Printf("Transaction: %s\nEstimated gas: %d\n", transactionBinaryHex, gasEstimate)
			} else {
				cmd.Println("Transaction submitted")
			}

			return nil
		},
	}

	cmd.Flags().StringVar(&rpc, "rpc", "", "URL of the JSONRPC API to use")
	cmd.Flags().StringVar(&keyfile, "keyfile", "", "Path to the keystore file to use for the transaction")
	cmd.Flags().StringVar(&password, "password", "", "Password to use to unlock the keystore (if not specified, you will be prompted for the password when the command executes)")
	cmd.Flags().StringVar(&nonce, "nonce", "", "Nonce to use for the transaction")
	cmd.Flags().StringVar(&value, "value", "", "Value to send with the transaction")
	cmd.Flags().StringVar(&gasPrice, "gas-price", "", "Gas price to use for the transaction")
	cmd.Flags().StringVar(&maxFeePerGas, "max-fee-per-gas", "", "Maximum fee per gas to use for the (EIP-1559) transaction")
	cmd.Flags().StringVar(&maxPriorityFeePerGas, "max-priority-fee-per-gas", "", "Maximum priority fee per gas to use for the (EIP-1559) transaction")
	cmd.Flags().Uint64Var(&gasLimit, "gas-limit", 0, "Gas limit for the transaction")
	cmd.Flags().BoolVar(&simulate, "simulate", false, "Simulate the transaction without sending it")
	cmd.Flags().UintVar(&timeout, "timeout", 60, "Timeout (in seconds) for interactions with the JSONRPC API")
	cmd.Flags().StringVar(&contractAddressRaw, "contract", "", "Address of the contract to interact with")

	cmd.Flags().StringVar(&tokenAddressRaw, "token-address", "", "token-address argument")
	cmd.Flags().StringVar(&amountRaw, "amount", "", "amount argument")
	cmd.Flags().StringVar(&durationRaw, "duration", "", "duration argument")
	cmd.Flags().StringVar(&receiverRaw, "receiver", "", "receiver argument")

	return cmd
}
func CreateWithdrawCommand() *cobra.Command {
	var keyfile, nonce, password, value, gasPrice, maxFeePerGas, maxPriorityFeePerGas, rpc, contractAddressRaw string
	var gasLimit uint64
	var simulate bool
	var timeout uint
	var contractAddress common.Address

	var depositId *big.Int
	var depositIdRaw string
	var receiver common.Address
	var receiverRaw string

	cmd := &cobra.Command{
		Use:   "withdraw",
		Short: "Execute the Withdraw method on a Staking2 contract",
		PreRunE: func(cmd *cobra.Command, args []string) error {
			if keyfile == "" {
				return fmt.Errorf("--keystore not specified")
			}

			if contractAddressRaw == "" {
				return fmt.Errorf("--contract not specified")
			} else if !common.IsHexAddress(contractAddressRaw) {
				return fmt.Errorf("--contract is not a valid Ethereum address")
			}
			contractAddress = common.HexToAddress(contractAddressRaw)

			if depositIdRaw == "" {
				return fmt.Errorf("--deposit-id argument not specified")
			}
			depositId = new(big.Int)
			depositId.SetString(depositIdRaw, 0)

			if receiverRaw == "" {
				return fmt.Errorf("--receiver argument not specified")
			} else if !common.IsHexAddress(receiverRaw) {
				return fmt.Errorf("--receiver argument is not a valid Ethereum address")
			}
			receiver = common.HexToAddress(receiverRaw)

			return nil
		},
		RunE: func(cmd *cobra.Command, args []string) error {
			client, clientErr := NewClient(rpc)
			if clientErr != nil {
				return clientErr
			}

			key, keyErr := KeyFromFile(keyfile, password)
			if keyErr != nil {
				return keyErr
			}

			chainIDCtx, cancelChainIDCtx := NewChainContext(timeout)
			defer cancelChainIDCtx()
			chainID, chainIDErr := client.ChainID(chainIDCtx)
			if chainIDErr != nil {
				return chainIDErr
			}

			transactionOpts, transactionOptsErr := bind.NewKeyedTransactorWithChainID(key.PrivateKey, chainID)
			if transactionOptsErr != nil {
				return transactionOptsErr
			}

			SetTransactionParametersFromArgs(transactionOpts, nonce, value, gasPrice, maxFeePerGas, maxPriorityFeePerGas, gasLimit, simulate)

			contract, contractErr := NewStaking2(contractAddress, client)
			if contractErr != nil {
				return contractErr
			}

			session := Staking2TransactorSession{
				Contract:     &contract.Staking2Transactor,
				TransactOpts: *transactionOpts,
			}

			transaction, transactionErr := session.Withdraw(
				depositId,
				receiver,
			)
			if transactionErr != nil {
				return transactionErr
			}

			cmd.Printf("Transaction hash: %s\n", transaction.Hash().Hex())
			if transactionOpts.NoSend {
				estimationMessage := ethereum.CallMsg{
					From: transactionOpts.From,
					To:   &contractAddress,
					Data: transaction.Data(),
				}

				gasEstimationCtx, cancelGasEstimationCtx := NewChainContext(timeout)
				defer cancelGasEstimationCtx()

				gasEstimate, gasEstimateErr := client.EstimateGas(gasEstimationCtx, estimationMessage)
				if gasEstimateErr != nil {
					return gasEstimateErr
				}

				transactionBinary, transactionBinaryErr := transaction.MarshalBinary()
				if transactionBinaryErr != nil {
					return transactionBinaryErr
				}
				transactionBinaryHex := hex.EncodeToString(transactionBinary)

				cmd.Printf("Transaction: %s\nEstimated gas: %d\n", transactionBinaryHex, gasEstimate)
			} else {
				cmd.Println("Transaction submitted")
			}

			return nil
		},
	}

	cmd.Flags().StringVar(&rpc, "rpc", "", "URL of the JSONRPC API to use")
	cmd.Flags().StringVar(&keyfile, "keyfile", "", "Path to the keystore file to use for the transaction")
	cmd.Flags().StringVar(&password, "password", "", "Password to use to unlock the keystore (if not specified, you will be prompted for the password when the command executes)")
	cmd.Flags().StringVar(&nonce, "nonce", "", "Nonce to use for the transaction")
	cmd.Flags().StringVar(&value, "value", "", "Value to send with the transaction")
	cmd.Flags().StringVar(&gasPrice, "gas-price", "", "Gas price to use for the transaction")
	cmd.Flags().StringVar(&maxFeePerGas, "max-fee-per-gas", "", "Maximum fee per gas to use for the (EIP-1559) transaction")
	cmd.Flags().StringVar(&maxPriorityFeePerGas, "max-priority-fee-per-gas", "", "Maximum priority fee per gas to use for the (EIP-1559) transaction")
	cmd.Flags().Uint64Var(&gasLimit, "gas-limit", 0, "Gas limit for the transaction")
	cmd.Flags().BoolVar(&simulate, "simulate", false, "Simulate the transaction without sending it")
	cmd.Flags().UintVar(&timeout, "timeout", 60, "Timeout (in seconds) for interactions with the JSONRPC API")
	cmd.Flags().StringVar(&contractAddressRaw, "contract", "", "Address of the contract to interact with")

	cmd.Flags().StringVar(&depositIdRaw, "deposit-id", "", "deposit-id argument")
	cmd.Flags().StringVar(&receiverRaw, "receiver", "", "receiver argument")

	return cmd
}

var ErrNoRPCURL error = errors.New("no RPC URL provided -- please pass an RPC URL from the command line or set the STAKING_2_RPC_URL environment variable")

// Generates an Ethereum client to the JSONRPC API at the given URL. If rpcURL is empty, then it
// attempts to read the RPC URL from the STAKING_2_RPC_URL environment variable. If that is empty,
// too, then it returns an error.
func NewClient(rpcURL string) (*ethclient.Client, error) {
	if rpcURL == "" {
		rpcURL = os.Getenv("STAKING_2_RPC_URL")
	}

	if rpcURL == "" {
		return nil, ErrNoRPCURL
	}

	client, err := ethclient.Dial(rpcURL)
	return client, err
}

// Creates a new context to be used when interacting with the chain client.
func NewChainContext(timeout uint) (context.Context, context.CancelFunc) {
	baseCtx := context.Background()
	parsedTimeout := time.Duration(timeout) * time.Second
	ctx, cancel := context.WithTimeout(baseCtx, parsedTimeout)
	return ctx, cancel
}

// Unlocks a key from a keystore (byte contents of a keystore file) with the given password.
func UnlockKeystore(keystoreData []byte, password string) (*keystore.Key, error) {
	key, err := keystore.DecryptKey(keystoreData, password)
	return key, err
}

// Loads a key from file, prompting the user for the password if it is not provided as a function argument.
func KeyFromFile(keystoreFile string, password string) (*keystore.Key, error) {
	var emptyKey *keystore.Key
	keystoreContent, readErr := os.ReadFile(keystoreFile)
	if readErr != nil {
		return emptyKey, readErr
	}

	// If password is "", prompt user for password.
	if password == "" {
		fmt.Printf("Please provide a password for keystore (%s): ", keystoreFile)
		passwordRaw, inputErr := term.ReadPassword(int(os.Stdin.Fd()))
		if inputErr != nil {
			return emptyKey, fmt.Errorf("error reading password: %s", inputErr.Error())
		}
		fmt.Print("\n")
		password = string(passwordRaw)
	}

	key, err := UnlockKeystore(keystoreContent, password)
	return key, err
}

// This method is used to set the parameters on a view call from command line arguments (represented mostly as
// strings).
func SetCallParametersFromArgs(opts *bind.CallOpts, pending bool, fromAddress, blockNumber string) {
	if pending {
		opts.Pending = true
	}

	if fromAddress != "" {
		opts.From = common.HexToAddress(fromAddress)
	}

	if blockNumber != "" {
		opts.BlockNumber = new(big.Int)
		opts.BlockNumber.SetString(blockNumber, 0)
	}
}

// This method is used to set the parameters on a transaction from command line arguments (represented mostly as
// strings).
func SetTransactionParametersFromArgs(opts *bind.TransactOpts, nonce, value, gasPrice, maxFeePerGas, maxPriorityFeePerGas string, gasLimit uint64, noSend bool) {
	if nonce != "" {
		opts.Nonce = new(big.Int)
		opts.Nonce.SetString(nonce, 0)
	}

	if value != "" {
		opts.Value = new(big.Int)
		opts.Value.SetString(value, 0)
	}

	if gasPrice != "" {
		opts.GasPrice = new(big.Int)
		opts.GasPrice.SetString(gasPrice, 0)
	}

	if maxFeePerGas != "" {
		opts.GasFeeCap = new(big.Int)
		opts.GasFeeCap.SetString(maxFeePerGas, 0)
	}

	if maxPriorityFeePerGas != "" {
		opts.GasTipCap = new(big.Int)
		opts.GasTipCap.SetString(maxPriorityFeePerGas, 0)
	}

	if gasLimit != 0 {
		opts.GasLimit = gasLimit
	}

	opts.NoSend = noSend
}

func CreateStaking2Command() *cobra.Command {
	cmd := &cobra.Command{
		Use:   "staking-2",
		Short: "Interact with the Staking2 contract",
		Run: func(cmd *cobra.Command, args []string) {
			cmd.Help()
		},
	}

	cmd.SetOut(os.Stdout)

	DeployGroup := &cobra.Group{
		ID: "deploy", Title: "Commands which deploy contracts",
	}
	cmd.AddGroup(DeployGroup)
	ViewGroup := &cobra.Group{
		ID: "view", Title: "Commands which view contract state",
	}
	TransactGroup := &cobra.Group{
		ID: "transact", Title: "Commands which submit transactions",
	}
	cmd.AddGroup(ViewGroup, TransactGroup)

	cmdDeployStaking2 := CreateStaking2DeploymentCommand()
	cmdDeployStaking2.GroupID = DeployGroup.ID
	cmd.AddCommand(cmdDeployStaking2)

	cmdViewDepositsOf := CreateDepositsOfCommand()
	cmdViewDepositsOf.GroupID = ViewGroup.ID
	cmd.AddCommand(cmdViewDepositsOf)
	cmdViewGetDepositCount := CreateGetDepositCountCommand()
	cmdViewGetDepositCount.GroupID = ViewGroup.ID
	cmd.AddCommand(cmdViewGetDepositCount)

	cmdTransactDeposit := CreateDepositCommand()
	cmdTransactDeposit.GroupID = TransactGroup.ID
	cmd.AddCommand(cmdTransactDeposit)
	cmdTransactWithdraw := CreateWithdrawCommand()
	cmdTransactWithdraw.GroupID = TransactGroup.ID
	cmd.AddCommand(cmdTransactWithdraw)

	return cmd
}
